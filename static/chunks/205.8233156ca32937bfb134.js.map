{"version":3,"sources":["webpack://_N_E/./modules/message/preview/Clock.tsx","webpack://_N_E/./modules/message/preview/formatTimestamp.ts","webpack://_N_E/./node_modules/date-fns/esm/getDate/index.js","webpack://_N_E/./node_modules/date-fns/esm/getMonth/index.js","webpack://_N_E/./node_modules/date-fns/esm/getYear/index.js"],"names":["Display","styled","span","rem","theme","text","muted","appearance","display","css","Clock","props","timestamp","isValid","undefined","useTheme","format","useCallback","Date","toLocaleString","hour","minute","hour12","formatTimestamp","displayedTime","setDisplayedTime","useState","useEffect","interval","setInterval","clearInterval","date","base","day","String","getDate","padStart","month","getMonth","year","getYear","time","difference","setHours","now","getTimestampFormat","dirtyDate","arguments","dayOfMonth","getFullYear"],"mappings":"gOAMA,MAAMA,EAAUC,IAAOC,KAAV,wCAAGD,CAAH,sEAEDE,YAAI,KAGL,EAAGC,WAAYA,EAAMC,KAAKC,QAEjC,EAAGF,WAC0B,SAA7BA,EAAMG,WAAWC,SACjBC,YADA,2FAEiBN,YAAI,GAENA,YAAI,IAEFA,YAAI,OAIrB,EAAGC,WAC0B,YAA7BA,EAAMG,WAAWC,SACjBC,YADA,6FAEWN,YAAI,IACGA,YAAI,GAEPA,YAAI,IACFA,YAAI,OAUlB,SAASO,EAAMC,GACpB,IAAI,UAAEC,GAAcD,EAChBC,IAAcC,YAAQD,KAAYA,OAAYE,GAElD,MAAMV,EAAQW,cAERC,EAASC,uBACb,CAACL,EAAkB,IAAIM,OACY,YAA7Bd,EAAMG,WAAWC,QACZI,EAAUO,eAAe,QAAS,CACvCC,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAILC,YAAgBX,IAEzB,CAACR,EAAMG,WAAWC,WAGd,EAACgB,EAAD,EAAgBC,GAAoBC,oBAAS,IAAMV,EAAOJ,KAWhE,OATAe,qBAAU,KACR,IAAKf,EAAW,CACd,MAAMgB,EAAWC,aAAY,IAAMJ,EAAiBT,MAAW,KAC/D,MAAO,IAAMc,cAAcF,GAG7BH,EAAiBT,EAAOJ,MACvB,CAACI,EAAQJ,IAEL,cAACZ,EAAD,UAAUwB,M,kCCzEnB,sFAEA,MAeaD,EAAkB,CAACQ,EAAYC,KAC1C,IAAKnB,YAAQkB,GAAO,MAAO,eAE3B,MAAME,EAAMC,OAAOC,YAAQJ,IAAOK,SAAS,EAAG,KACxCC,EAAQH,OAAOI,YAASP,GAAQ,GAAGK,SAAS,EAAG,KAC/CG,EAAOC,YAAQT,GAEfU,EAAOV,EAAKZ,eAAe,QAAS,CACxCC,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAGV,OA1ByB,EAACS,EAAYC,KACtC,MAGMU,GAHY,IAAIxB,KAAKa,GAAMY,SAAS,EAAG,EAAG,EAAG,GACvC,IAAIzB,KAAJ,OAASc,QAAT,IAASA,IAAQd,KAAK0B,OAAOD,SAAS,EAAG,EAAG,EAAG,IAJ7C,MAQd,OAAID,GAAc,EAAU,OACxBA,EAAa,EAAU,YACvBA,EAAa,EAAU,QACvBA,EAAa,EAAU,WACpB,QAgBCG,CAAmBd,EAAMC,IAC/B,IAAK,YACH,MAAQ,gBAAeS,IAEzB,IAAK,QACH,MAAQ,YAAWA,IAErB,IAAK,WACH,MAAQ,eAAcA,IAExB,QACE,MAAQ,GAAER,KAAOI,KAASE,O,kCCzChC,8DAwBe,SAASJ,EAAQW,GAC9B,YAAa,EAAGC,WAChB,IAAIhB,EAAO,YAAOe,GACdE,EAAajB,EAAKI,UACtB,OAAOa,I,kCC5BT,8DAwBe,SAASV,EAASQ,GAC/B,YAAa,EAAGC,WAChB,IAAIhB,EAAO,YAAOe,GACdT,EAAQN,EAAKO,WACjB,OAAOD,I,kCC5BT,8DAwBe,SAASG,EAAQM,GAC9B,YAAa,EAAGC,WAChB,IAAIhB,EAAO,YAAOe,GACdP,EAAOR,EAAKkB,cAChB,OAAOV","file":"static/chunks/205.8233156ca32937bfb134.js","sourcesContent":["import { isValid } from \"date-fns\"\nimport { rem } from \"polished\"\nimport React, { useCallback, useEffect, useState } from \"react\"\nimport styled, { css, useTheme } from \"styled-components\"\nimport { formatTimestamp } from \"./formatTimestamp\"\n\nconst Display = styled.span`\n  display: inline-block;\n  height: ${rem(20)};\n  cursor: default;\n\n  color: ${({ theme }) => theme.text.muted};\n\n  ${({ theme }) =>\n    theme.appearance.display === \"cozy\" &&\n    css`\n      margin-left: ${rem(4)};\n\n      font-size: ${rem(12)};\n      font-weight: 500;\n      line-height: ${rem(22)};\n      vertical-align: baseline;\n    `};\n\n  ${({ theme }) =>\n    theme.appearance.display === \"compact\" &&\n    css`\n      width: ${rem(48)};\n      margin-right: ${rem(8)};\n\n      font-size: ${rem(11)};\n      line-height: ${rem(22)};\n      text-align: right;\n      text-indent: 0;\n    `};\n`\n\nexport type ClockProps = {\n  timestamp?: Date\n}\n\nexport function Clock(props: ClockProps) {\n  let { timestamp } = props\n  if (timestamp && !isValid(timestamp)) timestamp = undefined\n\n  const theme = useTheme()\n\n  const format = useCallback(\n    (timestamp: Date = new Date()) => {\n      if (theme.appearance.display === \"compact\") {\n        return timestamp.toLocaleString(\"en-US\", {\n          hour: \"numeric\",\n          minute: \"numeric\",\n          hour12: true,\n        })\n      }\n\n      return formatTimestamp(timestamp)\n    },\n    [theme.appearance.display],\n  )\n\n  const [displayedTime, setDisplayedTime] = useState(() => format(timestamp))\n\n  useEffect(() => {\n    if (!timestamp) {\n      const interval = setInterval(() => setDisplayedTime(format()), 1000)\n      return () => clearInterval(interval)\n    }\n\n    setDisplayedTime(format(timestamp))\n  }, [format, timestamp])\n\n  return <Display>{displayedTime}</Display>\n}\n","import { getDate, getMonth, getYear, isValid } from \"date-fns\"\n\nconst ONE_DAY = 1000 * 60 * 60 * 24\n\nconst getTimestampFormat = (date: Date, base?: Date) => {\n  const givenDate = new Date(date).setHours(0, 0, 0, 0)\n  const now = new Date(base ?? Date.now()).setHours(0, 0, 0, 0)\n\n  const difference = (givenDate - now) / ONE_DAY\n\n  if (difference < -1) return \"full\"\n  if (difference < 0) return \"yesterday\"\n  if (difference < 1) return \"today\"\n  if (difference < 2) return \"tomorrow\"\n  return \"full\"\n}\n\nexport const formatTimestamp = (date: Date, base?: Date) => {\n  if (!isValid(date)) return \"Invalid date\"\n\n  const day = String(getDate(date)).padStart(2, \"0\")\n  const month = String(getMonth(date) + 1).padStart(2, \"0\")\n  const year = getYear(date)\n\n  const time = date.toLocaleString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"numeric\",\n    hour12: true,\n  })\n\n  switch (getTimestampFormat(date, base)) {\n    case \"yesterday\": {\n      return `Yesterday at ${time}`\n    }\n    case \"today\": {\n      return `Today at ${time}`\n    }\n    case \"tomorrow\": {\n      return `Tomorrow at ${time}`\n    }\n    default: {\n      return `${day}/${month}/${year}`\n    }\n  }\n}\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\n\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\n\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year;\n}"],"sourceRoot":""}