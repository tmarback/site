{"version":3,"sources":["webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?516d","webpack://_N_E/./pages/viewer.tsx"],"names":["window","__NEXT_P","push","Container","styled","div","Content","Viewer","props","state","editorManager","useLazyValue","EditorManager","create","useEffect","destroy","modalManager","useRequiredContext","ModalManagerContext","spawnSettingsModal","spawn","render","router","useRouter","useObserver","value","title","description","name","content","items","to","encodeURIComponent","String","query","data","handler"],"mappings":"gGACOA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,UACA,WACE,OAAO,EAAQ,Y,+TCczB,MAAMC,EAAYC,IAAOC,IAAV,oCAAGD,CAAH,gEAOTE,EAAUF,IAAOC,IAAV,oCAAGD,CAAH,a,SAQE,SAASG,EAAOC,GAC7B,MAAM,MAAEC,GAAUD,EAEZE,EAAgBC,aAAa,IAAMC,IAAcC,OAAOJ,KAC9DK,qBAAU,IAAM,IAAMC,kBAAQL,IAAgB,CAACA,IAE/C,MAAMM,EAAeC,YAAmBC,KAClCC,EAAqB,IACzBH,EAAaI,MAAM,CAAEC,OAAQ,IAAM,cAAC,IAAD,MAE/BC,EAASC,sBAEf,OAAOC,aAAY,IACjB,eAAC,IAAD,CAAuBC,MAAOf,EAA9B,UACE,cAAC,IAAD,CACEgB,MAAM,iBACNC,YAAY,yCAFd,SAIE,sBAAqBC,KAAK,WAAWC,QAAQ,iBAAnC,cAEZ,eAAC1B,EAAD,WACE,cAAC,IAAD,CACE2B,MAAO,CACL,CACEF,KAAM,SACNG,GAAK,UAASC,mBAAmBC,OAAOX,EAAOY,MAAMC,UAEvD,CAAEP,KAAM,WAAYQ,QAASjB,MAGjC,cAACb,EAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,e","file":"static/chunks/pages/viewer-b13b410bb57755725f40.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/viewer\",\n        function () {\n          return require(\"private-next-pages/viewer.tsx\");\n        }\n      ]);\n    ","import { useObserver } from \"mobx-react-lite\"\nimport { destroy, getSnapshot, SnapshotOut } from \"mobx-state-tree\"\nimport type { GetServerSidePropsContext } from \"next\"\nimport { useRouter } from \"next/router\"\nimport React, { useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { ModalManagerContext } from \"../common/modal/ModalManagerContext\"\nimport { Footer } from \"../common/page/Footer\"\nimport { Header } from \"../common/page/Header\"\nimport { PageHead } from \"../common/page/PageHead\"\nimport { PreferencesModal } from \"../common/settings/PreferencesModal\"\nimport { useLazyValue } from \"../common/state/useLazyValue\"\nimport { useRequiredContext } from \"../common/state/useRequiredContext\"\nimport { EditorManager } from \"../modules/editor/EditorManager\"\nimport { EditorManagerProvider } from \"../modules/editor/EditorManagerContext\"\nimport { getEditorManagerFromQuery } from \"../modules/editor/getEditorManagerFromQuery\"\nimport { Preview } from \"../modules/message/preview/Preview\"\n\nconst Container = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  display: flex;\n  flex-flow: column;\n`\n\nconst Content = styled.div`\n  flex: 1;\n`\n\nexport type ViewerProps = {\n  state: SnapshotOut<typeof EditorManager>\n}\n\nexport default function Viewer(props: ViewerProps) {\n  const { state } = props\n\n  const editorManager = useLazyValue(() => EditorManager.create(state))\n  useEffect(() => () => destroy(editorManager), [editorManager])\n\n  const modalManager = useRequiredContext(ModalManagerContext)\n  const spawnSettingsModal = () =>\n    modalManager.spawn({ render: () => <PreferencesModal /> })\n\n  const router = useRouter()\n\n  return useObserver(() => (\n    <EditorManagerProvider value={editorManager}>\n      <PageHead\n        title=\"Message Viewer\"\n        description=\"Discohook's standalone message viewer.\"\n      >\n        <meta key=\"referrer\" name=\"referrer\" content=\"strict-origin\" />\n      </PageHead>\n      <Container>\n        <Header\n          items={[\n            {\n              name: \"Editor\",\n              to: `/?data=${encodeURIComponent(String(router.query.data))}`,\n            },\n            { name: \"Settings\", handler: spawnSettingsModal },\n          ]}\n        />\n        <Content>\n          <Preview />\n        </Content>\n        <Footer />\n      </Container>\n    </EditorManagerProvider>\n  ))\n}\n\nexport const getServerSideProps = (\n  context: GetServerSidePropsContext,\n): { props: ViewerProps } => {\n  return {\n    props: {\n      state: getSnapshot(getEditorManagerFromQuery(context.query)),\n    },\n  }\n}\n"],"sourceRoot":""}