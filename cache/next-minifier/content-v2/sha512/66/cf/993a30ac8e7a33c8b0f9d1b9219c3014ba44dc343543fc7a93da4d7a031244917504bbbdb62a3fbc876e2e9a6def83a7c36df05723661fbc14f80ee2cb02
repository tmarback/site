{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[179],{BrQc:function(n,e){n.exports=function(n){return{name:\"Test Anything Protocol\",case_insensitive:!0,contains:[n.HASH_COMMENT_MODE,{className:\"meta\",variants:[{begin:\"^TAP version (\\\\d+)$\"},{begin:\"^1\\\\.\\\\.(\\\\d+)$\"}]},{begin:/---$/,end:\"\\\\.\\\\.\\\\.$\",subLanguage:\"yaml\",relevance:0},{className:\"number\",begin:\" (\\\\d+) \"},{className:\"symbol\",variants:[{begin:\"^ok\"},{begin:\"^not ok\"}]}]}}}}]);","map":{"version":3,"sources":["static/chunks/179.fa2730e1d2a0c6525e5d.js"],"names":["window","push","BrQc","module","exports","hljs","name","case_insensitive","contains","HASH_COMMENT_MODE","className","variants","begin","end","subLanguage","relevance"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtEC,KACA,SAAUC,EAAQC,GAwDxBD,EAAOC,QA9CP,SAAaC,GACX,MAAO,CACLC,KAAM,yBACNC,kBAAkB,EAClBC,SAAU,CACRH,EAAKI,kBAEL,CACEC,UAAW,OACXC,SAAU,CACR,CACEC,MAAO,wBAET,CACEA,MAAO,qBAKb,CACEA,MAAO,OACPC,IAAK,aACLC,YAAa,OACbC,UAAW,GAGb,CACEL,UAAW,SACXE,MAAO,YAGT,CACEF,UAAW,SACXC,SAAU,CACR,CACEC,MAAO,OAET,CACEA,MAAO"},"name":"static/chunks/179.fa2730e1d2a0c6525e5d.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[179],{\n\n/***/ \"BrQc\":\n/***/ (function(module, exports) {\n\n/*\nLanguage: Test Anything Protocol\nDescription: TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness.\nRequires: yaml.js\nAuthor: Sergey Bronnikov <sergeyb@bronevichok.ru>\nWebsite: https://testanything.org\n*/\n\nfunction tap(hljs) {\n  return {\n    name: 'Test Anything Protocol',\n    case_insensitive: true,\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      // version of format and total amount of testcases\n      {\n        className: 'meta',\n        variants: [\n          {\n            begin: '^TAP version (\\\\d+)$'\n          },\n          {\n            begin: '^1\\\\.\\\\.(\\\\d+)$'\n          }\n        ]\n      },\n      // YAML block\n      {\n        begin: /---$/,\n        end: '\\\\.\\\\.\\\\.$',\n        subLanguage: 'yaml',\n        relevance: 0\n      },\n      // testcase number\n      {\n        className: 'number',\n        begin: ' (\\\\d+) '\n      },\n      // testcase status and description\n      {\n        className: 'symbol',\n        variants: [\n          {\n            begin: '^ok'\n          },\n          {\n            begin: '^not ok'\n          }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = tap;\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/home/runner/work/site/site/node_modules/highlight.js/lib/languages/tap.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"x","sourcesContent":["/*\nLanguage: Test Anything Protocol\nDescription: TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness.\nRequires: yaml.js\nAuthor: Sergey Bronnikov <sergeyb@bronevichok.ru>\nWebsite: https://testanything.org\n*/\n\nfunction tap(hljs) {\n  return {\n    name: 'Test Anything Protocol',\n    case_insensitive: true,\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      // version of format and total amount of testcases\n      {\n        className: 'meta',\n        variants: [\n          {\n            begin: '^TAP version (\\\\d+)$'\n          },\n          {\n            begin: '^1\\\\.\\\\.(\\\\d+)$'\n          }\n        ]\n      },\n      // YAML block\n      {\n        begin: /---$/,\n        end: '\\\\.\\\\.\\\\.$',\n        subLanguage: 'yaml',\n        relevance: 0\n      },\n      // testcase number\n      {\n        className: 'number',\n        begin: ' (\\\\d+) '\n      },\n      // testcase status and description\n      {\n        className: 'symbol',\n        variants: [\n          {\n            begin: '^ok'\n          },\n          {\n            begin: '^not ok'\n          }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = tap;\n"]}}