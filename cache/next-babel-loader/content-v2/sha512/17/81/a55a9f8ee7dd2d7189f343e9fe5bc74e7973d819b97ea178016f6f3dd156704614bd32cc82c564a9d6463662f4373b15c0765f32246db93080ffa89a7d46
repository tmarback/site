{"ast":null,"code":"import { useEffect, useRef } from \"react\";\nimport { useRequiredContext } from \"../state/useRequiredContext\";\nimport { TooltipManagerContext } from \"./TooltipManagerContext\";\nexport function TooltipWrapper(props) {\n  const {\n    label,\n    children\n  } = props;\n  const manager = useRequiredContext(TooltipManagerContext);\n  const anchorRef = useRef(null);\n  useEffect(() => {\n    const {\n      current: anchor\n    } = anchorRef;\n    if (!anchor) return;\n    const dismiss = manager.add({\n      anchor,\n      content: label\n    });\n    return () => {\n      dismiss();\n    };\n  }, [label, manager]);\n  return children(anchorRef);\n}","map":{"version":3,"sources":["/home/runner/work/site/site/common/tooltip/TooltipWrapper.tsx"],"names":["useEffect","useRef","useRequiredContext","TooltipManagerContext","TooltipWrapper","props","label","children","manager","anchorRef","current","anchor","dismiss","add","content"],"mappings":"AAAA,SAA6CA,SAA7C,EAAwDC,MAAxD,QAAsE,OAAtE;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAOA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAoD;AACzD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,KAA5B;AAEA,QAAMG,OAAO,GAAGN,kBAAkB,CAACC,qBAAD,CAAlC;AAEA,QAAMM,SAAS,GAAGR,MAAM,CAAc,IAAd,CAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEU,MAAAA,OAAO,EAAEC;AAAX,QAAsBF,SAA5B;AACA,QAAI,CAACE,MAAL,EAAa;AAEb,UAAMC,OAAO,GAAGJ,OAAO,CAACK,GAAR,CAAY;AAC1BF,MAAAA,MAD0B;AAE1BG,MAAAA,OAAO,EAAER;AAFiB,KAAZ,CAAhB;AAKA,WAAO,MAAM;AACXM,MAAAA,OAAO;AACR,KAFD;AAGD,GAZQ,EAYN,CAACN,KAAD,EAAQE,OAAR,CAZM,CAAT;AAcA,SAAOD,QAAQ,CAACE,SAAD,CAAf;AACD","sourcesContent":["import { ReactElement, ReactNode, RefObject, useEffect, useRef } from \"react\"\nimport { useRequiredContext } from \"../state/useRequiredContext\"\nimport { TooltipManagerContext } from \"./TooltipManagerContext\"\n\nexport type TooltipWrapperProps = {\n  label: ReactNode\n  children: (ref: RefObject<never>) => ReactNode\n}\n\nexport function TooltipWrapper(props: TooltipWrapperProps) {\n  const { label, children } = props\n\n  const manager = useRequiredContext(TooltipManagerContext)\n\n  const anchorRef = useRef<HTMLElement>(null)\n\n  useEffect(() => {\n    const { current: anchor } = anchorRef\n    if (!anchor) return\n\n    const dismiss = manager.add({\n      anchor,\n      content: label,\n    })\n\n    return () => {\n      dismiss()\n    }\n  }, [label, manager])\n\n  return children(anchorRef as RefObject<never>) as ReactElement\n}\n"]},"metadata":{},"sourceType":"module"}