{"ast":null,"code":"import _defineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { forwardRef, useEffect, useRef } from \"react\";\nimport mergeRefs from \"react-merge-refs\";\nimport { InputField } from \"./InputField\";\n\nfunction HiddenInputFieldRenderer(props, ref) {\n  const {\n    type = \"text\"\n  } = props,\n        inputProps = _objectWithoutProperties(props, [\"type\"]);\n\n  const inputRef = useRef(null);\n  useEffect(() => {\n    const {\n      current: input\n    } = inputRef;\n    if (!input) return;\n\n    const onFocus = () => {\n      input.type = type;\n    };\n\n    const onBlur = () => {\n      input.type = \"password\";\n    };\n\n    input.addEventListener(\"focus\", onFocus);\n    input.addEventListener(\"blur\", onBlur);\n    return () => {\n      input.removeEventListener(\"focus\", onFocus);\n      input.removeEventListener(\"blur\", onBlur);\n    };\n  }, [type]);\n  return /*#__PURE__*/_jsx(InputField, _objectSpread({\n    ref: mergeRefs([inputRef, ref]),\n    type: \"password\"\n  }, inputProps));\n}\n\nexport const HiddenInputField = /*#__PURE__*/forwardRef(HiddenInputFieldRenderer);","map":{"version":3,"sources":["/home/runner/work/site/site/common/input/text/HiddenInputField.tsx"],"names":["React","forwardRef","useEffect","useRef","mergeRefs","InputField","HiddenInputFieldRenderer","props","ref","type","inputProps","inputRef","current","input","onFocus","onBlur","addEventListener","removeEventListener","HiddenInputField"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,SAASC,UAAT,QAA4C,cAA5C;;AAIA,SAASC,wBAAT,CACEC,KADF,EAEEC,GAFF,EAGE;AACA,QAAM;AAAEC,IAAAA,IAAI,GAAG;AAAT,MAAmCF,KAAzC;AAAA,QAA0BG,UAA1B,4BAAyCH,KAAzC;;AAEA,QAAMI,QAAQ,GAAGR,MAAM,CAAmB,IAAnB,CAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEU,MAAAA,OAAO,EAAEC;AAAX,QAAqBF,QAA3B;AACA,QAAI,CAACE,KAAL,EAAY;;AAEZ,UAAMC,OAAO,GAAG,MAAM;AACpBD,MAAAA,KAAK,CAACJ,IAAN,GAAaA,IAAb;AACD,KAFD;;AAGA,UAAMM,MAAM,GAAG,MAAM;AACnBF,MAAAA,KAAK,CAACJ,IAAN,GAAa,UAAb;AACD,KAFD;;AAIAI,IAAAA,KAAK,CAACG,gBAAN,CAAuB,OAAvB,EAAgCF,OAAhC;AACAD,IAAAA,KAAK,CAACG,gBAAN,CAAuB,MAAvB,EAA+BD,MAA/B;AAEA,WAAO,MAAM;AACXF,MAAAA,KAAK,CAACI,mBAAN,CAA0B,OAA1B,EAAmCH,OAAnC;AACAD,MAAAA,KAAK,CAACI,mBAAN,CAA0B,MAA1B,EAAkCF,MAAlC;AACD,KAHD;AAID,GAlBQ,EAkBN,CAACN,IAAD,CAlBM,CAAT;AAoBA,sBACE,KAAC,UAAD;AACE,IAAA,GAAG,EAAEL,SAAS,CAAC,CAACO,QAAD,EAAWH,GAAX,CAAD,CADhB;AAEE,IAAA,IAAI,EAAC;AAFP,KAGME,UAHN,EADF;AAOD;;AAED,OAAO,MAAMQ,gBAAgB,gBAAGjB,UAAU,CAACK,wBAAD,CAAnC","sourcesContent":["import React, { forwardRef, useEffect, useRef } from \"react\"\nimport mergeRefs from \"react-merge-refs\"\nimport type { ReactRef } from \"../../state/ReactRef\"\nimport { InputField, InputFieldProps } from \"./InputField\"\n\nexport type HiddenInputFieldProps = Omit<InputFieldProps, \"rows\">\n\nfunction HiddenInputFieldRenderer(\n  props: HiddenInputFieldProps,\n  ref: ReactRef<HTMLInputElement>,\n) {\n  const { type = \"text\", ...inputProps } = props\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  useEffect(() => {\n    const { current: input } = inputRef\n    if (!input) return\n\n    const onFocus = () => {\n      input.type = type\n    }\n    const onBlur = () => {\n      input.type = \"password\"\n    }\n\n    input.addEventListener(\"focus\", onFocus)\n    input.addEventListener(\"blur\", onBlur)\n\n    return () => {\n      input.removeEventListener(\"focus\", onFocus)\n      input.removeEventListener(\"blur\", onBlur)\n    }\n  }, [type])\n\n  return (\n    <InputField\n      ref={mergeRefs([inputRef, ref])}\n      type=\"password\"\n      {...inputProps}\n    />\n  )\n}\n\nexport const HiddenInputField = forwardRef(HiddenInputFieldRenderer)\n"]},"metadata":{},"sourceType":"module"}