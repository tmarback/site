{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { forwardRef } from \"react\";\nimport styled from \"styled-components\";\nimport { FlexContainer } from \"../../layout/FlexContainer\";\nimport { InputError } from \"../error/InputError\";\nimport { getLengthConstraintColor } from \"../getLengthConstraintColor\";\nimport { Input } from \"../layout/Input\";\nimport { InputConstraint } from \"../layout/InputConstraint\";\nimport { InputContainer } from \"../layout/InputContainer\";\nimport { InputLabel } from \"../layout/InputLabel\";\nconst TextInput = styled(Input).withConfig({\n  componentId: \"sc-7tcyzw-0\"\n})([\"\", \" > &{flex:1;}\"], FlexContainer);\n\nfunction InputFieldRenderer(props, ref) {\n  const {\n    id,\n    value,\n    onChange: handleChange,\n    label,\n    hideLabel,\n    type,\n    rows,\n    placeholder,\n    maxLength,\n    required,\n    disabled,\n    readOnly,\n    error,\n    className,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    children\n  } = props;\n\n  const input = /*#__PURE__*/_jsx(TextInput, {\n    ref: ref,\n    as: rows ? \"textarea\" : \"input\",\n    id: id,\n    type: type,\n    value: value,\n    placeholder: placeholder,\n    disabled: disabled,\n    readOnly: readOnly,\n    required: required,\n    style: {\n      height: rows ? 15 + 21 * rows : undefined\n    },\n    onChange: event => handleChange(event.target.value),\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    \"aria-label\": hideLabel ? label : undefined\n  });\n\n  return /*#__PURE__*/_jsxs(InputContainer, {\n    className: className,\n    children: [/*#__PURE__*/_jsxs(InputLabel, {\n      children: [!hideLabel && /*#__PURE__*/_jsx(\"label\", {\n        htmlFor: id,\n        children: label\n      }), required && /*#__PURE__*/_jsx(InputConstraint, {\n        state: \"normal\",\n        children: \"Required\"\n      }), maxLength && /*#__PURE__*/_jsxs(InputConstraint, {\n        state: getLengthConstraintColor(value.length, maxLength),\n        children: [value.length, \"/\", maxLength]\n      })]\n    }), Object.prototype.hasOwnProperty.call(props, \"children\") ? /*#__PURE__*/_jsxs(FlexContainer, {\n      children: [input, children]\n    }) : input, /*#__PURE__*/_jsx(InputError, {\n      error: error\n    })]\n  });\n}\n\nexport const InputField = /*#__PURE__*/forwardRef(InputFieldRenderer);","map":{"version":3,"sources":["/home/runner/work/site/site/common/input/text/InputField.tsx"],"names":["React","forwardRef","styled","FlexContainer","InputError","getLengthConstraintColor","Input","InputConstraint","InputContainer","InputLabel","TextInput","InputFieldRenderer","props","ref","id","value","onChange","handleChange","label","hideLabel","type","rows","placeholder","maxLength","required","disabled","readOnly","error","className","onClick","handleClick","onFocus","handleFocus","onBlur","handleBlur","children","input","height","undefined","event","target","length","Object","prototype","hasOwnProperty","call","InputField"],"mappings":";;AAAA,OAAOA,KAAP,IAAyCC,UAAzC,QAAsE,OAAtE;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,MAAMC,SAAS,GAAGR,MAAM,CAACI,KAAD,CAAT;AAAA;AAAA,0BACXH,aADW,CAAf;;AA8BA,SAASQ,kBAAT,CACEC,KADF,EAEEC,GAFF,EAGE;AACA,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,QAAQ,EAAEC,YAHN;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,IANI;AAOJC,IAAAA,IAPI;AAQJC,IAAAA,WARI;AASJC,IAAAA,SATI;AAUJC,IAAAA,QAVI;AAWJC,IAAAA,QAXI;AAYJC,IAAAA,QAZI;AAaJC,IAAAA,KAbI;AAcJC,IAAAA,SAdI;AAeJC,IAAAA,OAAO,EAAEC,WAfL;AAgBJC,IAAAA,OAAO,EAAEC,WAhBL;AAiBJC,IAAAA,MAAM,EAAEC,UAjBJ;AAkBJC,IAAAA;AAlBI,MAmBFvB,KAnBJ;;AAqBA,QAAMwB,KAAK,gBACT,KAAC,SAAD;AACE,IAAA,GAAG,EAAEvB,GADP;AAEE,IAAA,EAAE,EAAEQ,IAAI,GAAG,UAAH,GAAgB,OAF1B;AAGE,IAAA,EAAE,EAAEP,EAHN;AAIE,IAAA,IAAI,EAAEM,IAJR;AAKE,IAAA,KAAK,EAAEL,KALT;AAME,IAAA,WAAW,EAAEO,WANf;AAOE,IAAA,QAAQ,EAAEG,QAPZ;AAQE,IAAA,QAAQ,EAAEC,QARZ;AASE,IAAA,QAAQ,EAAEF,QATZ;AAUE,IAAA,KAAK,EAAE;AAAEa,MAAAA,MAAM,EAAEhB,IAAI,GAAG,KAAK,KAAKA,IAAb,GAAoBiB;AAAlC,KAVT;AAWE,IAAA,QAAQ,EAAGC,KAAD,IAA6BtB,YAAY,CAACsB,KAAK,CAACC,MAAN,CAAazB,KAAd,CAXrD;AAYE,IAAA,OAAO,EAAEe,WAZX;AAaE,IAAA,OAAO,EAAEE,WAbX;AAcE,IAAA,MAAM,EAAEE,UAdV;AAeE,kBAAYf,SAAS,GAAGD,KAAH,GAAWoB;AAflC,IADF;;AAoBA,sBACE,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEV,SAA3B;AAAA,4BACE,MAAC,UAAD;AAAA,iBACG,CAACT,SAAD,iBAAc;AAAO,QAAA,OAAO,EAAEL,EAAhB;AAAA,kBAAqBI;AAArB,QADjB,EAEGM,QAAQ,iBAAI,KAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,QAAvB;AAAA;AAAA,QAFf,EAGGD,SAAS,iBACR,MAAC,eAAD;AACE,QAAA,KAAK,EAAElB,wBAAwB,CAACU,KAAK,CAAC0B,MAAP,EAAelB,SAAf,CADjC;AAAA,mBAGGR,KAAK,CAAC0B,MAHT,OAGkBlB,SAHlB;AAAA,QAJJ;AAAA,MADF,EAYGmB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCjC,KAArC,EAA4C,UAA5C,iBACC,MAAC,aAAD;AAAA,iBACGwB,KADH,EAEGD,QAFH;AAAA,MADD,GAMCC,KAlBJ,eAoBE,KAAC,UAAD;AAAY,MAAA,KAAK,EAAET;AAAnB,MApBF;AAAA,IADF;AAwBD;;AAED,OAAO,MAAMmB,UAAU,gBAAG7C,UAAU,CAACU,kBAAD,CAA7B","sourcesContent":["import React, { ChangeEvent, FocusEvent, forwardRef, ReactNode } from \"react\"\nimport styled from \"styled-components\"\nimport { FlexContainer } from \"../../layout/FlexContainer\"\nimport type { ReactRef } from \"../../state/ReactRef\"\nimport { InputError } from \"../error/InputError\"\nimport { getLengthConstraintColor } from \"../getLengthConstraintColor\"\nimport { Input } from \"../layout/Input\"\nimport { InputConstraint } from \"../layout/InputConstraint\"\nimport { InputContainer } from \"../layout/InputContainer\"\nimport { InputLabel } from \"../layout/InputLabel\"\n\nconst TextInput = styled(Input)`\n  ${FlexContainer} > & {\n    flex: 1;\n  }\n`\n\ntype InputChangeEvent = ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\ntype InputFocusEvent = FocusEvent<HTMLInputElement | HTMLTextAreaElement>\n\nexport type InputFieldProps = {\n  id: string\n  value: string\n  onChange: (value: string) => void\n  label: string\n  hideLabel?: boolean\n  type?: string\n  rows?: number\n  placeholder?: string\n  maxLength?: number\n  required?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  error?: string\n  className?: string\n  onClick?: () => void\n  onFocus?: (event: InputFocusEvent) => void\n  onBlur?: (event: InputFocusEvent) => void\n  children?: ReactNode\n}\n\nfunction InputFieldRenderer(\n  props: InputFieldProps,\n  ref: ReactRef<HTMLInputElement> | ReactRef<HTMLTextAreaElement>,\n) {\n  const {\n    id,\n    value,\n    onChange: handleChange,\n    label,\n    hideLabel,\n    type,\n    rows,\n    placeholder,\n    maxLength,\n    required,\n    disabled,\n    readOnly,\n    error,\n    className,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    children,\n  } = props\n\n  const input = (\n    <TextInput\n      ref={ref}\n      as={rows ? \"textarea\" : \"input\"}\n      id={id}\n      type={type}\n      value={value}\n      placeholder={placeholder}\n      disabled={disabled}\n      readOnly={readOnly}\n      required={required}\n      style={{ height: rows ? 15 + 21 * rows : undefined }}\n      onChange={(event: InputChangeEvent) => handleChange(event.target.value)}\n      onClick={handleClick}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      aria-label={hideLabel ? label : undefined}\n    />\n  )\n\n  return (\n    <InputContainer className={className}>\n      <InputLabel>\n        {!hideLabel && <label htmlFor={id}>{label}</label>}\n        {required && <InputConstraint state=\"normal\">Required</InputConstraint>}\n        {maxLength && (\n          <InputConstraint\n            state={getLengthConstraintColor(value.length, maxLength)}\n          >\n            {value.length}/{maxLength}\n          </InputConstraint>\n        )}\n      </InputLabel>\n      {Object.prototype.hasOwnProperty.call(props, \"children\") ? (\n        <FlexContainer>\n          {input}\n          {children}\n        </FlexContainer>\n      ) : (\n        input\n      )}\n      <InputError error={error} />\n    </InputContainer>\n  )\n}\n\nexport const InputField = forwardRef(InputFieldRenderer)\n"]},"metadata":{},"sourceType":"module"}