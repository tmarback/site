{"ast":null,"code":"/* eslint-disable import/no-cycle */\nimport { types } from \"mobx-state-tree\";\nimport { nullableDate } from \"../../../../common/state/nullableDate\";\nimport { getUniqueId } from \"../../../../common/state/uid\";\nimport { stringifyMessage } from \"../../helpers/stringifyMessage\";\nimport { EmbedModel } from \"./EmbedModel\";\nexport const MessageModel = types.model(\"MessageModel\", {\n  id: types.optional(types.identifierNumber, getUniqueId),\n  content: \"\",\n  username: \"\",\n  avatar: \"\",\n  embeds: types.array(types.late(() => EmbedModel)),\n  reference: \"\",\n  timestamp: types.optional(nullableDate, null),\n  badge: types.optional(types.maybeNull(types.string), \"Bot\")\n}).volatile(() => ({\n  files: []\n})).views(self => ({\n  get hasContent() {\n    return self.content.trim().length > 0;\n  },\n\n  get hasExtras() {\n    return self.embeds.length > 0 || self.files.length > 0;\n  },\n\n  get embedLength() {\n    return self.embeds.reduce((size, embed) => size + embed.length, 0);\n  },\n\n  get size() {\n    return self.embeds.reduce((size, embed) => size + embed.size, 0);\n  },\n\n  get data() {\n    const embeds = self.embeds.flatMap(embed => embed.data);\n    return {\n      content: self.content || null,\n      embeds: embeds.length > 0 ? embeds : null,\n      username: self.username || undefined,\n      avatar_url: self.avatar || undefined,\n      files: self.files.length > 0 ? Array.from(self.files) : undefined\n    };\n  },\n\n  get body() {\n    const json = stringifyMessage(this.data, false);\n\n    if (self.files.length > 0) {\n      const formData = new FormData();\n      if (json !== \"{}\") formData.append(\"payload_json\", json);\n\n      for (const [index, file] of self.files.entries()) {\n        formData.append(`file[${index}]`, file, file.name);\n      }\n\n      return formData;\n    }\n\n    return json;\n  }\n\n})).actions(self => ({\n  set(key, value) {\n    self[key] = value;\n  }\n\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions","map":null,"metadata":{},"sourceType":"module"}