{"ast":null,"code":"import _initializerDefineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { computed, observable } from \"mobx\";\nimport { openDatabase } from \"./connection/openDatabase\";\nexport let DatabaseManager = (_class = (_temp = class DatabaseManager {\n  constructor() {\n    this.initialized = void 0;\n    this.database = void 0;\n\n    _initializerDefineProperty(this, \"persisted\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"persistenceMessageDismissed\", _descriptor2, this);\n\n    let markAsInitialized;\n    this.initialized = new Promise(resolve => {\n      markAsInitialized = resolve;\n    });\n    if (false) return;\n\n    if (\"storage\" in navigator) {\n      navigator.storage.persisted().then(persisted => {\n        this.persisted = persisted;\n      }).catch(() => {});\n    }\n\n    openDatabase().then(database => {\n      this.database = database;\n      markAsInitialized();\n    }).catch(error => {\n      console.error(\"Failed to open database:\", error);\n    });\n  }\n\n  async requestPersistence() {\n    if (\"chrome\" in window) {\n      await Notification.requestPermission();\n    }\n\n    if (\"storage\" in navigator) {\n      this.persisted = await navigator.storage.persist();\n    }\n  }\n\n  get shouldShowPersistenceWarning() {\n    return !this.persisted && !this.persistenceMessageDismissed;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"persisted\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"persistenceMessageDismissed\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"shouldShowPersistenceWarning\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"shouldShowPersistenceWarning\"), _class.prototype)), _class);","map":{"version":3,"sources":["/home/runner/work/site/site/modules/database/DatabaseManager.ts"],"names":["computed","observable","openDatabase","DatabaseManager","constructor","initialized","database","markAsInitialized","Promise","resolve","navigator","storage","persisted","then","catch","error","console","requestPersistence","window","Notification","requestPermission","persist","shouldShowPersistenceWarning","persistenceMessageDismissed"],"mappings":";;;;;;AACA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,MAArC;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAGA,WAAaC,eAAb,sBAAO,MAAMA,eAAN,CAAsB;AAO3BC,EAAAA,WAAW,GAAG;AAAA,SANdC,WAMc;AAAA,SALdC,QAKc;;AAAA;;AAAA;;AACZ,QAAIC,iBAAJ;AACA,SAAKF,WAAL,GAAmB,IAAIG,OAAJ,CAAYC,OAAO,IAAI;AACxCF,MAAAA,iBAAiB,GAAGE,OAApB;AACD,KAFkB,CAAnB;AAIA,eAAmC;;AAEnC,QAAI,aAAaC,SAAjB,EAA4B;AAC1BA,MAAAA,SAAS,CAACC,OAAV,CACGC,SADH,GAEGC,IAFH,CAEQD,SAAS,IAAI;AACjB,aAAKA,SAAL,GAAiBA,SAAjB;AACD,OAJH,EAKGE,KALH,CAKS,MAAM,CAAE,CALjB;AAMD;;AAEDZ,IAAAA,YAAY,GACTW,IADH,CACQP,QAAQ,IAAI;AAChB,WAAKA,QAAL,GAAgBA,QAAhB;AACAC,MAAAA,iBAAiB;AAClB,KAJH,EAKGO,KALH,CAKSC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACD,KAPH;AAQD;;AAED,QAAME,kBAAN,GAA2B;AACzB,QAAI,YAAYC,MAAhB,EAAwB;AACtB,YAAMC,YAAY,CAACC,iBAAb,EAAN;AACD;;AAED,QAAI,aAAaV,SAAjB,EAA4B;AAC1B,WAAKE,SAAL,GAAiB,MAAMF,SAAS,CAACC,OAAV,CAAkBU,OAAlB,EAAvB;AACD;AACF;;AAED,MAAcC,4BAAd,GAA6C;AAC3C,WAAO,CAAC,KAAKV,SAAN,IAAmB,CAAC,KAAKW,2BAAhC;AACD;;AA9C0B,CAA7B,mFAIGtB,UAJH;AAAA;AAAA;AAAA;AAAA;AAAA,WAI0B,IAJ1B;AAAA;AAAA,+FAKGA,UALH;AAAA;AAAA;AAAA;AAAA;AAAA,WAK4C,KAL5C;AAAA;AAAA,iFA4CGD,QA5CH","sourcesContent":["import type { IDBPDatabase } from \"idb\"\nimport { computed, observable } from \"mobx\"\nimport { openDatabase } from \"./connection/openDatabase\"\nimport type { Schema } from \"./Schema\"\n\nexport class DatabaseManager {\n  initialized: Promise<void>\n  database!: IDBPDatabase<Schema>\n\n  @observable persisted = true\n  @observable persistenceMessageDismissed = false\n\n  constructor() {\n    let markAsInitialized: () => void\n    this.initialized = new Promise(resolve => {\n      markAsInitialized = resolve\n    })\n\n    if (typeof window === \"undefined\") return\n\n    if (\"storage\" in navigator) {\n      navigator.storage\n        .persisted()\n        .then(persisted => {\n          this.persisted = persisted\n        })\n        .catch(() => {})\n    }\n\n    openDatabase()\n      .then(database => {\n        this.database = database\n        markAsInitialized()\n      })\n      .catch(error => {\n        console.error(\"Failed to open database:\", error)\n      })\n  }\n\n  async requestPersistence() {\n    if (\"chrome\" in window) {\n      await Notification.requestPermission()\n    }\n\n    if (\"storage\" in navigator) {\n      this.persisted = await navigator.storage.persist()\n    }\n  }\n\n  @computed get shouldShowPersistenceWarning() {\n    return !this.persisted && !this.persistenceMessageDismissed\n  }\n}\n"]},"metadata":{},"sourceType":"module"}