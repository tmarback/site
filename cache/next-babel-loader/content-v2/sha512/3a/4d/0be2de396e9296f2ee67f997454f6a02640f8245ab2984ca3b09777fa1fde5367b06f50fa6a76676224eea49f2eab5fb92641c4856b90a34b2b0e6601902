{"ast":null,"code":"/* eslint-disable unicorn/no-useless-undefined */\nimport { useCallback, useEffect, useState } from \"react\";\nimport { getUniqueId } from \"../state/uid\";\nimport { useRequiredContext } from \"../state/useRequiredContext\";\nimport { PopoverManagerContext } from \"./PopoverManagerContext\";\nexport const usePopover = options => {\n  const {\n    ref,\n    render,\n    placement,\n    shards = []\n  } = options;\n  const manager = useRequiredContext(PopoverManagerContext);\n  const {\n    0: popoverName,\n    1: setPopoverName\n  } = useState();\n\n  const spawn = () => {\n    const {\n      current: anchor\n    } = ref;\n    if (!anchor || popoverName) return;\n    const name = `usePopover#${getUniqueId()}`;\n    setPopoverName(name);\n    manager.spawn({\n      name,\n      placement,\n      anchor,\n      shards,\n      render,\n      onDismiss: () => setPopoverName(undefined)\n    });\n  };\n\n  const dismiss = useCallback(() => {\n    if (popoverName) {\n      manager.dismiss(popoverName);\n      setPopoverName(undefined);\n    }\n  }, [manager, popoverName]);\n\n  const toggle = () => {\n    if (popoverName) {\n      dismiss();\n    } else {\n      spawn();\n    }\n  };\n\n  useEffect(() => {\n    if (popoverName) {\n      manager.update(popoverName, {\n        placement,\n        render\n      });\n    }\n  });\n  useEffect(() => () => dismiss(), [dismiss]);\n  return {\n    active: Boolean(popoverName),\n    dismiss,\n    toggle,\n    spawn\n  };\n};","map":null,"metadata":{},"sourceType":"module"}