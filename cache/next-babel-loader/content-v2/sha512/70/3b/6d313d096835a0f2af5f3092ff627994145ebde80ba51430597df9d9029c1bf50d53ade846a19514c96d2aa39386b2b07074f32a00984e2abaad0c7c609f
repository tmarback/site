{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-await-in-loop */\nimport { toSnakeCase } from \"../../../common/object/toSnakeCase\";\nexport const upgradeDatabase = async (database, transaction, oldVersion) => {\n  if (oldVersion < 2 && oldVersion >= 1) {\n    let cursor = await transaction.objectStore(\"backups\").openCursor();\n\n    while (cursor) {\n      await cursor.update({\n        name: cursor.key,\n        message: cursor.value\n      });\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 3) {\n    database.createObjectStore(\"backup\", {\n      keyPath: \"id\",\n      autoIncrement: true\n    });\n    const backupStore = transaction.objectStore(\"backup\");\n    backupStore.createIndex(\"name\", \"name\", {\n      unique: true\n    });\n  }\n\n  if (oldVersion < 4 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    const existingBackups = new Set();\n    let nameCursor = await backupStore.index(\"name\").openKeyCursor();\n\n    while (nameCursor) {\n      existingBackups.add(nameCursor.key);\n      nameCursor = await nameCursor.continue();\n    }\n\n    let cursor = await transaction.objectStore(\"backups\").openCursor();\n\n    while (cursor) {\n      if (!existingBackups.has(cursor.key)) {\n        await backupStore.put(_objectSpread(_objectSpread({}, cursor.value), {}, {\n          name: cursor.key,\n          message: toSnakeCase(cursor.value.message)\n        }));\n      }\n\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 5 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    let cursor = await backupStore.openCursor();\n\n    while (cursor) {\n      const _cursor$value = cursor.value,\n            {\n        message\n      } = _cursor$value,\n            rest = _objectWithoutProperties(_cursor$value, [\"message\"]);\n\n      await backupStore.put(_objectSpread(_objectSpread({}, rest), {}, {\n        messages: [message]\n      }));\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 6 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    let cursor = await backupStore.openCursor();\n\n    while (cursor) {\n      const _cursor$value2 = cursor.value,\n            {\n        webhookUrl\n      } = _cursor$value2,\n            rest = _objectWithoutProperties(_cursor$value2, [\"webhookUrl\"]);\n\n      await backupStore.put(_objectSpread(_objectSpread({}, rest), {}, {\n        target: {\n          url: webhookUrl\n        }\n      }));\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 9 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    let cursor = await backupStore.openCursor();\n\n    while (cursor) {\n      const {\n        id,\n        name,\n        messages,\n        target\n      } = cursor.value;\n\n      if (name) {\n        await backupStore.put({\n          id,\n          name,\n          messages: messages.map(data => ({\n            data: \"data\" in data ? data.data : data,\n            reference: \"reference\" in data ? data.reference : target.message\n          })),\n          target: {\n            url: target.url\n          }\n        });\n      } else {\n        await backupStore.delete(id);\n      }\n\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 10 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    let cursor = await backupStore.openCursor();\n\n    while (cursor) {\n      var _target$url;\n\n      const _cursor$value3 = cursor.value,\n            {\n        target\n      } = _cursor$value3,\n            backup = _objectWithoutProperties(_cursor$value3, [\"target\"]);\n\n      await backupStore.put(_objectSpread(_objectSpread({}, backup), {}, {\n        targets: [{\n          url: (_target$url = target.url) !== null && _target$url !== void 0 ? _target$url : \"\"\n        }]\n      }));\n      cursor = await cursor.continue();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}