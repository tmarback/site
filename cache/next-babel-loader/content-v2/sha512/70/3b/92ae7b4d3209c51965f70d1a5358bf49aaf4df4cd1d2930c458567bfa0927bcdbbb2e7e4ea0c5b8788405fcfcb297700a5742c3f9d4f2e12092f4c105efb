{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createPopper } from \"@popperjs/core\";\nimport React, { useLayoutEffect, useRef } from \"react\";\nimport { FocusOn } from \"react-focus-on\";\nimport { useRequiredContext } from \"../state/useRequiredContext\";\nimport { PopoverProvider } from \"./PopoverContext\";\nimport { PopoverManagerContext } from \"./PopoverManagerContext\";\nexport function PopoverItem(props) {\n  const {\n    popover\n  } = props;\n  const manager = useRequiredContext(PopoverManagerContext);\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    const {\n      current: element\n    } = ref;\n    if (!element) return;\n    const popper = createPopper(popover.anchor, element, {\n      placement: popover.placement,\n      modifiers: [{\n        name: \"offset\",\n        options: {\n          offset: [0, 8]\n        }\n      }]\n    });\n    return () => {\n      popper.destroy();\n    };\n  });\n  return /*#__PURE__*/_jsx(PopoverProvider, {\n    value: popover,\n    children: /*#__PURE__*/_jsx(FocusOn, {\n      ref: ref,\n      shards: popover.shards,\n      onClickOutside: () => manager.dismiss(popover.name),\n      onEscapeKey: () => manager.dismiss(popover.name),\n      children: popover.render()\n    })\n  });\n}","map":{"version":3,"sources":["/home/runner/work/site/site/common/popover/PopoverItem.tsx"],"names":["createPopper","React","useLayoutEffect","useRef","FocusOn","useRequiredContext","PopoverProvider","PopoverManagerContext","PopoverItem","props","popover","manager","ref","current","element","popper","anchor","placement","modifiers","name","options","offset","destroy","shards","dismiss","render"],"mappings":";AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,IAAgBC,eAAhB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AAEA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAMA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA8C;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AAEA,QAAME,OAAO,GAAGN,kBAAkB,CAACE,qBAAD,CAAlC;AAEA,QAAMK,GAAG,GAAGT,MAAM,CAAc,IAAd,CAAlB;AAEAD,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAM;AAAEW,MAAAA,OAAO,EAAEC;AAAX,QAAuBF,GAA7B;AACA,QAAI,CAACE,OAAL,EAAc;AAEd,UAAMC,MAAM,GAAGf,YAAY,CAACU,OAAO,CAACM,MAAT,EAAiBF,OAAjB,EAA0B;AACnDG,MAAAA,SAAS,EAAEP,OAAO,CAACO,SADgC;AAEnDC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ;AADD;AAFX,OADS;AAFwC,KAA1B,CAA3B;AAYA,WAAO,MAAM;AACXN,MAAAA,MAAM,CAACO,OAAP;AACD,KAFD;AAGD,GAnBc,CAAf;AAqBA,sBACE,KAAC,eAAD;AAAiB,IAAA,KAAK,EAAEZ,OAAxB;AAAA,2BACE,KAAC,OAAD;AACE,MAAA,GAAG,EAAEE,GADP;AAEE,MAAA,MAAM,EAAEF,OAAO,CAACa,MAFlB;AAGE,MAAA,cAAc,EAAE,MAAMZ,OAAO,CAACa,OAAR,CAAgBd,OAAO,CAACS,IAAxB,CAHxB;AAIE,MAAA,WAAW,EAAE,MAAMR,OAAO,CAACa,OAAR,CAAgBd,OAAO,CAACS,IAAxB,CAJrB;AAAA,gBAMGT,OAAO,CAACe,MAAR;AANH;AADF,IADF;AAYD","sourcesContent":["import { createPopper } from \"@popperjs/core\"\nimport React, { useLayoutEffect, useRef } from \"react\"\nimport { FocusOn } from \"react-focus-on\"\nimport { useRequiredContext } from \"../state/useRequiredContext\"\nimport type { Popover } from \"./Popover\"\nimport { PopoverProvider } from \"./PopoverContext\"\nimport { PopoverManagerContext } from \"./PopoverManagerContext\"\n\nexport type PopoverItemProps = {\n  popover: Popover\n}\n\nexport function PopoverItem(props: PopoverItemProps) {\n  const { popover } = props\n\n  const manager = useRequiredContext(PopoverManagerContext)\n\n  const ref = useRef<HTMLElement>(null)\n\n  useLayoutEffect(() => {\n    const { current: element } = ref\n    if (!element) return\n\n    const popper = createPopper(popover.anchor, element, {\n      placement: popover.placement,\n      modifiers: [\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 8],\n          },\n        },\n      ],\n    })\n\n    return () => {\n      popper.destroy()\n    }\n  })\n\n  return (\n    <PopoverProvider value={popover}>\n      <FocusOn\n        ref={ref}\n        shards={popover.shards}\n        onClickOutside={() => manager.dismiss(popover.name)}\n        onEscapeKey={() => manager.dismiss(popover.name)}\n      >\n        {popover.render()}\n      </FocusOn>\n    </PopoverProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}