{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { useRef, useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport { PopoverContainer } from \"../../popover/PopoverContainer\";\nimport { usePopover } from \"../../popover/usePopover\";\nimport { useAutorun } from \"../../state/useAutorun\";\nimport { Input } from \"../layout/Input\";\nimport { InputField } from \"../text/InputField\";\nimport { ColorPicker } from \"./ColorPicker\";\nconst RGB_STRING_RE = /^([01]?\\d{1,2}|2[0-4]\\d|25[0-5])[\\s,]\\s*([01]?\\d{1,2}|2[0-4]\\d|25[0-5])[\\s,]\\s*([01]?\\d{1,2}|2[0-4]\\d|25[0-5])$/;\nconst MonoInputField = styled(InputField).withConfig({\n  componentId: \"sc-15if2js-0\"\n})([\"& \", \"{font-size:15px;font-family:\", \";}\"], Input, ({\n  theme\n}) => theme.font.mono);\nconst Preview = styled.div.withConfig({\n  componentId: \"sc-15if2js-1\"\n})([\"min-width:36px;max-width:36px;min-height:36px;max-height:36px;border-radius:4px;box-shadow:inset \", \";margin-left:8px;\"], ({\n  theme\n}) => theme.elavation.stroke);\nexport function ColorInputField(props) {\n  const {\n    id,\n    color,\n    label\n  } = props;\n  const {\n    0: value,\n    1: setValue\n  } = useState(() => {\n    var _color$hex;\n\n    return (_color$hex = color.hex) !== null && _color$hex !== void 0 ? _color$hex : \"\";\n  });\n  const {\n    0: touched,\n    1: setTouched\n  } = useState(false);\n  useAutorun(() => {\n    var _color$hex2;\n\n    if (!touched) setValue((_color$hex2 = color.hex) !== null && _color$hex2 !== void 0 ? _color$hex2 : \"\");\n  });\n  const inputRef = useRef(null);\n  const popover = usePopover({\n    ref: inputRef,\n    render: () => /*#__PURE__*/_jsx(PopoverContainer, {\n      children: /*#__PURE__*/_jsx(ColorPicker, {\n        color: color\n      })\n    }),\n    placement: \"bottom-start\",\n    shards: [inputRef]\n  });\n  const theme = useTheme();\n  return useObserver(() => {\n    var _color$hex4;\n\n    return /*#__PURE__*/_jsx(MonoInputField, {\n      ref: inputRef,\n      id: id,\n      value: value,\n      onChange: value => {\n        setTouched(true);\n        setValue(value.toLowerCase());\n\n        if (/^#?[\\da-f]{6}$/i.test(value)) {\n          color.setHex(value);\n        } else if (!value) {\n          color.invalidate();\n        } else {\n          const match = RGB_STRING_RE.exec(value);\n\n          if (match) {\n            const [, red, green, blue] = [...match].map(Number);\n            color.setRaw(red * 0x010000 + green * 0x000100 + blue);\n          }\n        }\n      },\n      onBlur: () => {\n        var _color$hex3;\n\n        setTouched(false);\n        setValue((_color$hex3 = color.hex) !== null && _color$hex3 !== void 0 ? _color$hex3 : \"\");\n      },\n      label: label,\n      placeholder: \"#rrggbb\",\n      onClick: () => {\n        popover.spawn();\n      },\n      children: /*#__PURE__*/_jsx(Preview, {\n        role: \"presentation\",\n        style: {\n          backgroundColor: (_color$hex4 = color.hex) !== null && _color$hex4 !== void 0 ? _color$hex4 : theme.background.tertiary\n        },\n        onClick: () => {\n          popover.spawn();\n        }\n      })\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}