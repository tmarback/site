{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTime } from \"date-fns\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { PopoverContainer } from \"../../popover/PopoverContainer\";\nimport { usePopover } from \"../../popover/usePopover\";\nimport { InputField } from \"../text/InputField\";\nimport { DatePicker } from \"./DatePicker\";\nimport { getDateTimeString } from \"./getDateTimeString\";\nconst TIMESTAMP_FORMAT_RE = /^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2})$/;\nexport function TimestampInputField(props) {\n  const {\n    id,\n    value,\n    onChange: handleChange,\n    label\n  } = props;\n  const {\n    0: input,\n    1: setInput\n  } = useState(() => {\n    var _getDateTimeString;\n\n    return (_getDateTimeString = getDateTimeString(value)) !== null && _getDateTimeString !== void 0 ? _getDateTimeString : \"\";\n  });\n  const lastDateRef = useRef(value.getTime());\n  useEffect(() => {\n    // Object.is considers NaN to be equal to NaN\n    if (!Object.is(lastDateRef.current, getTime(value))) {\n      var _getDateTimeString2;\n\n      setInput((_getDateTimeString2 = getDateTimeString(value)) !== null && _getDateTimeString2 !== void 0 ? _getDateTimeString2 : \"\");\n    }\n\n    lastDateRef.current = getTime(value);\n  }, [value]);\n\n  const handleInputChange = value => {\n    setInput(value);\n\n    if (!value) {\n      handleChange(new Date(Number.NaN));\n      return;\n    }\n\n    const match = TIMESTAMP_FORMAT_RE.exec(value);\n    if (!match) return;\n    const [, year, month, day, hours, minutes] = match;\n    handleChange(new Date(Number(year), Number(month) - 1, Number(day), Number(hours), Number(minutes)));\n  };\n\n  const inputRef = useRef(null);\n  const popover = usePopover({\n    ref: inputRef,\n    render: () => /*#__PURE__*/_jsx(PopoverContainer, {\n      children: /*#__PURE__*/_jsx(DatePicker, {\n        date: value,\n        onChange: handleChange\n      })\n    }),\n    placement: \"bottom-start\",\n    shards: [inputRef]\n  });\n  return /*#__PURE__*/_jsx(InputField, {\n    ref: inputRef,\n    id: id,\n    value: input,\n    label: label,\n    placeholder: \"YYYY-MM-DD hh:mm\",\n    error: input && !TIMESTAMP_FORMAT_RE.test(input) ? \"Invalid date format\" : undefined,\n    onChange: handleInputChange,\n    onClick: () => {\n      popover.spawn();\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}