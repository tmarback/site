{"ast":null,"code":"import { openDB } from \"idb\";\nimport { showUpgradeBlockedMessage } from \"./showUpgradeBlockedMessage\";\nimport { upgradeDatabase } from \"./upgradeDatabase\";\nexport const openDatabase = async () => {\n  return openDB(\"discohook\", 10, {\n    upgrade: (database, oldVersion, newVersion, transaction) => {\n      // Casting to unknown schema, because upgrades shouldn't assume how the\n      // schema looks at that time\n      upgradeDatabase(database, transaction, oldVersion).then(() => {\n        var _document$querySelect;\n\n        localStorage.setItem(\"database-upgraded-version\", \"10\");\n        (_document$querySelect = document.querySelector(\"#db-upgrade-blocked\")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.remove();\n      }).catch(error => {\n        console.error(\"Error on database upgrade:\", error);\n      });\n    },\n    blocked: showUpgradeBlockedMessage\n  });\n};","map":{"version":3,"sources":["/home/runner/work/site/site/modules/database/connection/openDatabase.ts"],"names":["openDB","showUpgradeBlockedMessage","upgradeDatabase","openDatabase","upgrade","database","oldVersion","newVersion","transaction","then","localStorage","setItem","document","querySelector","remove","catch","error","console","blocked"],"mappings":"AAAA,SAAwCA,MAAxC,QAAsD,KAAtD;AAEA,SAASC,yBAAT,QAA0C,6BAA1C;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,YAAY,GAAG,YAAY;AACtC,SAAOH,MAAM,CAAS,WAAT,EAAsB,EAAtB,EAA0B;AACrCI,IAAAA,OAAO,EAAE,CAACC,QAAD,EAAWC,UAAX,EAAuBC,UAAvB,EAAmCC,WAAnC,KAAmD;AAC1D;AACA;AACAN,MAAAA,eAAe,CACbG,QADa,EAEbG,WAFa,EAGbF,UAHa,CAAf,CAKGG,IALH,CAKQ,MAAM;AAAA;;AACVC,QAAAA,YAAY,CAACC,OAAb,CAAqB,2BAArB,EAAkD,IAAlD;AACA,iCAAAC,QAAQ,CAACC,aAAT,CAAuB,qBAAvB,iFAA+CC,MAA/C;AACD,OARH,EASGC,KATH,CASSC,KAAK,IAAI;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,4BAAd,EAA4CA,KAA5C;AACD,OAXH;AAYD,KAhBoC;AAiBrCE,IAAAA,OAAO,EAAEjB;AAjB4B,GAA1B,CAAb;AAmBD,CApBM","sourcesContent":["import { IDBPDatabase, IDBPTransaction, openDB } from \"idb\"\nimport type { Schema } from \"../Schema\"\nimport { showUpgradeBlockedMessage } from \"./showUpgradeBlockedMessage\"\nimport { upgradeDatabase } from \"./upgradeDatabase\"\n\nexport const openDatabase = async () => {\n  return openDB<Schema>(\"discohook\", 10, {\n    upgrade: (database, oldVersion, newVersion, transaction) => {\n      // Casting to unknown schema, because upgrades shouldn't assume how the\n      // schema looks at that time\n      upgradeDatabase(\n        database as IDBPDatabase,\n        transaction as IDBPTransaction<unknown, string[], \"versionchange\">,\n        oldVersion,\n      )\n        .then(() => {\n          localStorage.setItem(\"database-upgraded-version\", \"10\")\n          document.querySelector(\"#db-upgrade-blocked\")?.remove()\n        })\n        .catch(error => {\n          console.error(\"Error on database upgrade:\", error)\n        })\n    },\n    blocked: showUpgradeBlockedMessage,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}