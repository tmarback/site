{"ast":null,"code":"import { types } from \"mobx-state-tree\";\nconst colorValue = types.custom({\n  name: \"ColorValue\",\n\n  fromSnapshot(value) {\n    return value !== null && value !== void 0 ? value : Number.NaN;\n  },\n\n  toSnapshot(value) {\n    return Number.isNaN(value) ? null : value;\n  },\n\n  isTargetType(value) {\n    return typeof value === \"number\";\n  },\n\n  getValidationMessage(value) {\n    if (typeof value === \"number\" || value === null) return \"\";\n    return \"Value is not a number or null\";\n  }\n\n});\nexport const ColorModel = types.model(\"ColorModel\", {\n  hue: types.optional(colorValue, Number.NaN),\n  saturation: types.optional(colorValue, Number.NaN),\n  value: types.optional(colorValue, Number.NaN)\n}).views(self => ({\n  get valid() {\n    return ![self.hue, self.saturation, self.value].some(n => Number.isNaN(n));\n  },\n\n  get raw() {\n    if (!this.valid) return null;\n\n    const f = n => {\n      const k = (n + self.hue / 60) % 6;\n      return self.value - self.value * self.saturation * Math.max(Math.min(k, 4 - k, 1), 0);\n    };\n\n    return (// red\n      Math.round(f(5) * 255) * 0x010000 + // green\n      Math.round(f(3) * 255) * 0x000100 + // blue\n      Math.round(f(1) * 255)\n    );\n  },\n\n  get hex() {\n    var _this$raw;\n\n    if (!this.valid) return;\n    return `#${(_this$raw = this.raw) === null || _this$raw === void 0 ? void 0 : _this$raw.toString(16).padStart(6, \"0\")}`;\n  }\n\n})).actions(self => ({\n  invalidate() {\n    self.hue = Number.NaN;\n    self.saturation = 0;\n    self.value = 0;\n  },\n\n  setHue(value) {\n    self.hue = value;\n  },\n\n  setSaturation(value) {\n    self.saturation = value;\n  },\n\n  setValue(value) {\n    self.value = value;\n  },\n\n  setRaw(value) {\n    this.setHex(typeof value === \"number\" ? `#${value.toString(16).padStart(6, \"0\")}` : \"\");\n  },\n\n  setHex(hex) {\n    var _$exec$map, _$exec;\n\n    if (!hex) {\n      this.invalidate();\n      return;\n    }\n\n    const [, red = 0, green = 0, blue = 0] = (_$exec$map = (_$exec = /^#?([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/.exec(hex)) === null || _$exec === void 0 ? void 0 : _$exec.map(hex => Number.parseInt(hex, 16))) !== null && _$exec$map !== void 0 ? _$exec$map : [];\n    const max = Math.max(red, blue, green);\n    const min = Math.min(red, blue, green);\n    const delta = max - min;\n    const value = max / 255;\n    const saturation = max && (max - min) / max;\n    let hue = 0;\n    if (max === red) hue = 60 * ((green - blue) / delta);\n    if (max === green) hue = 60 * (2 + (blue - red) / delta);\n    if (max === blue) hue = 60 * (4 + (red - green) / delta);\n    if (delta === 0) hue = 0;\n    if (hue < 0) hue += 360;\n    self.hue = hue;\n    self.saturation = saturation;\n    self.value = value;\n  }\n\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions","map":null,"metadata":{},"sourceType":"module"}