{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaultRules, inlineRegex } from \"simple-markdown\";\nimport { getCustomEmojiUrl } from \"../emoji/getCustomEmojiUrl\";\nconst CUSTOM_EMOJI_RE = /^<(a)?:(\\w+):(\\d+)>/;\nexport const customEmoji = _objectSpread(_objectSpread({}, defaultRules.text), {}, {\n  match: inlineRegex(CUSTOM_EMOJI_RE),\n  parse: capture => {\n    const [, animated, name, id] = capture;\n    return {\n      type: \"emoji\",\n      name,\n      emoji: name,\n      src: getCustomEmojiUrl(id, Boolean(animated))\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module"}