{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { chevron, chevronDown } from \"../../../icons/chevron\";\nimport { ActionButtons } from \"../../layout/ActionButtons\";\nimport { Button } from \"../button/Button\";\nimport { InputError } from \"../error/InputError\";\nimport { Input } from \"../layout/Input\";\nimport { InputConstraint } from \"../layout/InputConstraint\";\nimport { InputContainer } from \"../layout/InputContainer\";\nimport { InputLabel } from \"../layout/InputLabel\";\nconst Grid = styled.div.withConfig({\n  componentId: \"sc-1yzfteg-0\"\n})([\"display:grid;grid-template-columns:1fr min-content;align-items:center;gap:\", \";& \", \"{margin-left:0;justify-self:start;}\"], ({\n  hasActions\n}) => hasActions ? \"8px 16px\" : \"8px 0\", Button);\nexport function ListInputField(props) {\n  const {\n    id,\n    value: values,\n    onChange: handleChange,\n    label,\n    limit,\n    error\n  } = props;\n\n  const moveUp = index => {\n    const clone = Array.from(values);\n    clone.splice(index - 1, 0, ...clone.splice(index, 1));\n    handleChange(clone);\n  };\n\n  const moveDown = index => {\n    const clone = Array.from(values);\n    clone.splice(index + 1, 0, ...clone.splice(index, 1));\n    handleChange(clone);\n  };\n\n  const removeItem = index => {\n    const clone = Array.from(values);\n    clone.splice(index, 1);\n    handleChange(clone);\n  };\n\n  const inputs = values.map((value, index) =>\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-array-index-key\n  _jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsx(Input, {\n      id: `${id}_${index}`,\n      value: value,\n      \"aria-label\": `${label.singular} ${index + 1}`,\n      onChange: event => {\n        if (!event.target.value) {\n          event.target.blur();\n          removeItem(index);\n          return;\n        }\n\n        const copy = Array.from(values);\n        copy[index] = event.target.value;\n        handleChange(copy);\n      }\n    }), /*#__PURE__*/_jsx(ActionButtons, {\n      actions: [index !== 0 && {\n        icon: chevron,\n        label: \"Move up\",\n        handler: () => moveUp(index)\n      }, index + 1 !== values.length && {\n        icon: chevronDown,\n        label: \"Move down\",\n        handler: () => moveDown(index)\n      }].filter(action => {\n        return typeof action === \"object\";\n      })\n    })]\n  }, index));\n  const canAdd = !limit || values.length < limit;\n\n  if (canAdd) {\n    inputs.push( /*#__PURE__*/_jsx(Fragment, {\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${id}_${values.length}`,\n        value: \"\",\n        \"aria-label\": `${label.singular} ${values.length + 1}`,\n        onChange: event => {\n          handleChange([...values, event.target.value]);\n        }\n      })\n    }, values.length));\n  }\n\n  return /*#__PURE__*/_jsxs(InputContainer, {\n    children: [/*#__PURE__*/_jsxs(InputLabel, {\n      children: [label.plural, limit && /*#__PURE__*/_jsxs(InputConstraint, {\n        children: [values.length, \"/\", limit]\n      })]\n    }), /*#__PURE__*/_jsx(Grid, {\n      hasActions: inputs.length - Number(canAdd) > 1,\n      children: inputs\n    }), /*#__PURE__*/_jsx(InputError, {\n      error: error\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}