{"ast":null,"code":"import { SERIALISED_EMOJI_DATA } from \"./serialisedEmojiData\";\nimport { SKIN_TONES, TONE_NAMES, TONE_NUMBERS } from \"./skinTones\"; // Flag reference:\n// + = include ::skin-tone-x\n// # = include _tonex\n// ! = include _x_skin_tone\n// * = skip alias as global\n\nconst EMOJI = SERIALISED_EMOJI_DATA.split(\"\\n\").map(line => {\n  const [emoji, ...names] = line.split(\" \");\n  return {\n    emoji: emoji.split(\"/\")[0],\n    flags: emoji.split(\"/\")[1],\n    aliases: names.map(name => ({\n      name: name.split(\"/\")[0],\n      flags: name.split(\"/\")[1]\n    }))\n  };\n});\nconst ZWJ = String.fromCodePoint(0x200d);\nconst MAN = \"üë®\";\nconst WOMAN = \"üë©\";\nconst PERSON = \"üßë\";\nconst HANDSHAKE = \"ü§ù\";\nconst NAME_TO_EMOJI = new Map();\nconst EMOJI_TO_NAME = new Map();\n\nfor (const {\n  emoji,\n  flags,\n  aliases\n} of EMOJI) {\n  EMOJI_TO_NAME.set(emoji, aliases[0].name);\n\n  if (flags !== null && flags !== void 0 && flags.includes(\"+\")) {\n    for (const [number, diversity] of Object.entries(TONE_NUMBERS)) {\n      EMOJI_TO_NAME.set(emoji + diversity, `${aliases[0].name}_tone${number}`);\n    }\n  }\n\n  for (const alias of aliases) {\n    var _alias$flags, _alias$flags2, _alias$flags3;\n\n    if (!((_alias$flags = alias.flags) !== null && _alias$flags !== void 0 && _alias$flags.includes(\"*\"))) {\n      NAME_TO_EMOJI.set(alias.name, emoji);\n    }\n\n    if (flags !== null && flags !== void 0 && flags.includes(\"+\")) {\n      for (const [number, diversity] of Object.entries(TONE_NUMBERS)) {\n        NAME_TO_EMOJI.set(`${alias.name}::skin-tone-${number}`, emoji + diversity);\n      }\n    }\n\n    if ((_alias$flags2 = alias.flags) !== null && _alias$flags2 !== void 0 && _alias$flags2.includes(\"#\")) {\n      for (const [id, diversity] of Object.entries(TONE_NUMBERS)) {\n        NAME_TO_EMOJI.set(`${alias.name}_tone${id}`, emoji + diversity);\n      }\n    }\n\n    if ((_alias$flags3 = alias.flags) !== null && _alias$flags3 !== void 0 && _alias$flags3.includes(\"!\")) {\n      for (const [number, diversity] of Object.entries(TONE_NAMES)) {\n        NAME_TO_EMOJI.set(`${alias.name}_${number}_skin_tone`, emoji + diversity);\n      }\n    }\n  }\n}\n\nfor (const {\n  unicode: toneA,\n  number: numberA,\n  name: nameA\n} of SKIN_TONES) {\n  const idSuffix = `_tone${numberA}`;\n  const nameSuffix = `_${nameA}_skin_tone`;\n  const toneSuffix = `::skin-tone-${numberA}`;\n  const womanAndMan = `üë´${toneA}`;\n  const womanAndManName = \"woman_and_man_holding_hands\";\n  EMOJI_TO_NAME.set(womanAndMan, womanAndManName + idSuffix);\n  NAME_TO_EMOJI.set(womanAndManName + idSuffix, womanAndMan);\n  NAME_TO_EMOJI.set(womanAndManName + nameSuffix, womanAndMan);\n  NAME_TO_EMOJI.set(`couple${toneSuffix}`, womanAndMan);\n  const men = `üë¨${toneA}`;\n  const menName = \"men_holding_hands\";\n  EMOJI_TO_NAME.set(men, menName + idSuffix);\n  NAME_TO_EMOJI.set(menName + idSuffix, men);\n  NAME_TO_EMOJI.set(menName + nameSuffix, men);\n  NAME_TO_EMOJI.set(`two_${menName}${toneSuffix}`, men);\n  const women = `üë≠${toneA}`;\n  const womenName = \"women_holding_hands\";\n  EMOJI_TO_NAME.set(women, womenName + idSuffix);\n  NAME_TO_EMOJI.set(womenName + idSuffix, women);\n  NAME_TO_EMOJI.set(womenName + nameSuffix, women);\n  NAME_TO_EMOJI.set(`two_${womenName}${toneSuffix}`, women);\n  const people = PERSON + toneA + ZWJ + HANDSHAKE + ZWJ + PERSON + toneA;\n  const peopleName = \"people_holding_hands\";\n  EMOJI_TO_NAME.set(people, peopleName + idSuffix);\n  NAME_TO_EMOJI.set(peopleName + idSuffix, people);\n  NAME_TO_EMOJI.set(peopleName + nameSuffix, people);\n  NAME_TO_EMOJI.set(peopleName + toneSuffix, people);\n\n  for (const {\n    unicode: toneB,\n    number: numberB,\n    name: nameB\n  } of SKIN_TONES) {\n    if (numberA <= numberB) continue;\n    const idSuffix = `_tone${numberA}_tone${numberB}`;\n    const nameSuffix = `_${nameA}_skin_tone_${nameB}_skin_tone`;\n    const womanAndMan = WOMAN + toneA + ZWJ + HANDSHAKE + ZWJ + MAN + toneB;\n    EMOJI_TO_NAME.set(womanAndMan, womanAndManName + idSuffix);\n    NAME_TO_EMOJI.set(womanAndManName + idSuffix, womanAndMan);\n    NAME_TO_EMOJI.set(womanAndManName + nameSuffix, womanAndMan);\n    const men = MAN + toneA + ZWJ + HANDSHAKE + ZWJ + MAN + toneB;\n    EMOJI_TO_NAME.set(men, menName + idSuffix);\n    NAME_TO_EMOJI.set(menName + idSuffix, men);\n    NAME_TO_EMOJI.set(menName + nameSuffix, men);\n    const women = WOMAN + toneA + ZWJ + HANDSHAKE + ZWJ + WOMAN + toneB;\n    EMOJI_TO_NAME.set(women, womenName + idSuffix);\n    NAME_TO_EMOJI.set(womenName + idSuffix, women);\n    NAME_TO_EMOJI.set(womenName + nameSuffix, women);\n    const people = PERSON + toneA + ZWJ + HANDSHAKE + ZWJ + PERSON + toneB;\n    EMOJI_TO_NAME.set(people, peopleName + idSuffix);\n    NAME_TO_EMOJI.set(peopleName + idSuffix, people);\n    NAME_TO_EMOJI.set(peopleName + nameSuffix, people);\n  }\n}\n\nexport { NAME_TO_EMOJI, EMOJI_TO_NAME };","map":{"version":3,"sources":["/home/runner/work/site/site/modules/markdown/emoji/emoji.ts"],"names":["SERIALISED_EMOJI_DATA","SKIN_TONES","TONE_NAMES","TONE_NUMBERS","EMOJI","split","map","line","emoji","names","flags","aliases","name","ZWJ","String","fromCodePoint","MAN","WOMAN","PERSON","HANDSHAKE","NAME_TO_EMOJI","Map","EMOJI_TO_NAME","set","includes","number","diversity","Object","entries","alias","id","unicode","toneA","numberA","nameA","idSuffix","nameSuffix","toneSuffix","womanAndMan","womanAndManName","men","menName","women","womenName","people","peopleName","toneB","numberB","nameB"],"mappings":"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","sourcesContent":["import { SERIALISED_EMOJI_DATA } from \"./serialisedEmojiData\"\nimport { SKIN_TONES, TONE_NAMES, TONE_NUMBERS } from \"./skinTones\"\n\n// Flag reference:\n// + = include ::skin-tone-x\n// # = include _tonex\n// ! = include _x_skin_tone\n// * = skip alias as global\n\ntype Emoji = {\n  emoji: string\n  flags?: string\n  aliases: {\n    name: string\n    flags?: string\n  }[]\n}\n\nconst EMOJI: Emoji[] = SERIALISED_EMOJI_DATA.split(\"\\n\").map(line => {\n  const [emoji, ...names] = line.split(\" \")\n\n  return {\n    emoji: emoji.split(\"/\")[0],\n    flags: emoji.split(\"/\")[1],\n    aliases: names.map(name => ({\n      name: name.split(\"/\")[0],\n      flags: name.split(\"/\")[1],\n    })),\n  }\n})\n\nconst ZWJ = String.fromCodePoint(0x200d)\n\nconst MAN = \"üë®\"\nconst WOMAN = \"üë©\"\nconst PERSON = \"üßë\"\n\nconst HANDSHAKE = \"ü§ù\"\n\nconst NAME_TO_EMOJI = new Map<string, string>()\nconst EMOJI_TO_NAME = new Map<string, string>()\n\nfor (const { emoji, flags, aliases } of EMOJI) {\n  EMOJI_TO_NAME.set(emoji, aliases[0].name)\n\n  if (flags?.includes(\"+\")) {\n    for (const [number, diversity] of Object.entries(TONE_NUMBERS)) {\n      EMOJI_TO_NAME.set(emoji + diversity, `${aliases[0].name}_tone${number}`)\n    }\n  }\n\n  for (const alias of aliases) {\n    if (!alias.flags?.includes(\"*\")) {\n      NAME_TO_EMOJI.set(alias.name, emoji)\n    }\n\n    if (flags?.includes(\"+\")) {\n      for (const [number, diversity] of Object.entries(TONE_NUMBERS)) {\n        NAME_TO_EMOJI.set(\n          `${alias.name}::skin-tone-${number}`,\n          emoji + diversity,\n        )\n      }\n    }\n\n    if (alias.flags?.includes(\"#\")) {\n      for (const [id, diversity] of Object.entries(TONE_NUMBERS)) {\n        NAME_TO_EMOJI.set(`${alias.name}_tone${id}`, emoji + diversity)\n      }\n    }\n\n    if (alias.flags?.includes(\"!\")) {\n      for (const [number, diversity] of Object.entries(TONE_NAMES)) {\n        NAME_TO_EMOJI.set(\n          `${alias.name}_${number}_skin_tone`,\n          emoji + diversity,\n        )\n      }\n    }\n  }\n}\n\nfor (const { unicode: toneA, number: numberA, name: nameA } of SKIN_TONES) {\n  const idSuffix = `_tone${numberA}`\n  const nameSuffix = `_${nameA}_skin_tone`\n  const toneSuffix = `::skin-tone-${numberA}`\n\n  const womanAndMan = `üë´${toneA}`\n  const womanAndManName = \"woman_and_man_holding_hands\"\n\n  EMOJI_TO_NAME.set(womanAndMan, womanAndManName + idSuffix)\n  NAME_TO_EMOJI.set(womanAndManName + idSuffix, womanAndMan)\n  NAME_TO_EMOJI.set(womanAndManName + nameSuffix, womanAndMan)\n  NAME_TO_EMOJI.set(`couple${toneSuffix}`, womanAndMan)\n\n  const men = `üë¨${toneA}`\n  const menName = \"men_holding_hands\"\n  EMOJI_TO_NAME.set(men, menName + idSuffix)\n  NAME_TO_EMOJI.set(menName + idSuffix, men)\n  NAME_TO_EMOJI.set(menName + nameSuffix, men)\n  NAME_TO_EMOJI.set(`two_${menName}${toneSuffix}`, men)\n\n  const women = `üë≠${toneA}`\n  const womenName = \"women_holding_hands\"\n  EMOJI_TO_NAME.set(women, womenName + idSuffix)\n  NAME_TO_EMOJI.set(womenName + idSuffix, women)\n  NAME_TO_EMOJI.set(womenName + nameSuffix, women)\n  NAME_TO_EMOJI.set(`two_${womenName}${toneSuffix}`, women)\n\n  const people = PERSON + toneA + ZWJ + HANDSHAKE + ZWJ + PERSON + toneA\n  const peopleName = \"people_holding_hands\"\n  EMOJI_TO_NAME.set(people, peopleName + idSuffix)\n  NAME_TO_EMOJI.set(peopleName + idSuffix, people)\n  NAME_TO_EMOJI.set(peopleName + nameSuffix, people)\n  NAME_TO_EMOJI.set(peopleName + toneSuffix, people)\n\n  for (const { unicode: toneB, number: numberB, name: nameB } of SKIN_TONES) {\n    if (numberA <= numberB) continue\n\n    const idSuffix = `_tone${numberA}_tone${numberB}`\n    const nameSuffix = `_${nameA}_skin_tone_${nameB}_skin_tone`\n\n    const womanAndMan = WOMAN + toneA + ZWJ + HANDSHAKE + ZWJ + MAN + toneB\n    EMOJI_TO_NAME.set(womanAndMan, womanAndManName + idSuffix)\n    NAME_TO_EMOJI.set(womanAndManName + idSuffix, womanAndMan)\n    NAME_TO_EMOJI.set(womanAndManName + nameSuffix, womanAndMan)\n\n    const men = MAN + toneA + ZWJ + HANDSHAKE + ZWJ + MAN + toneB\n    EMOJI_TO_NAME.set(men, menName + idSuffix)\n    NAME_TO_EMOJI.set(menName + idSuffix, men)\n    NAME_TO_EMOJI.set(menName + nameSuffix, men)\n\n    const women = WOMAN + toneA + ZWJ + HANDSHAKE + ZWJ + WOMAN + toneB\n    EMOJI_TO_NAME.set(women, womenName + idSuffix)\n    NAME_TO_EMOJI.set(womenName + idSuffix, women)\n    NAME_TO_EMOJI.set(womenName + nameSuffix, women)\n\n    const people = PERSON + toneA + ZWJ + HANDSHAKE + ZWJ + PERSON + toneB\n    EMOJI_TO_NAME.set(people, peopleName + idSuffix)\n    NAME_TO_EMOJI.set(peopleName + idSuffix, people)\n    NAME_TO_EMOJI.set(peopleName + nameSuffix, people)\n  }\n}\n\nexport { NAME_TO_EMOJI, EMOJI_TO_NAME }\n"]},"metadata":{},"sourceType":"module"}