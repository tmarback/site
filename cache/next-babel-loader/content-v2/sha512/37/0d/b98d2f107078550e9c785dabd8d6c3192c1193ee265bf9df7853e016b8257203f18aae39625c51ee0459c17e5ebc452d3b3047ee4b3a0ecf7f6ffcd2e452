{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport hljs from \"highlight.js/lib/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { CodeBlockContainer } from \"../styles/CodeBlockContainer\";\nimport { getLanguageFromAlias } from \"./getLanguageFromAlias\";\nimport { highlightCode } from \"./highlightCode\";\nexport function CodeBlock(props) {\n  const {\n    content,\n    language = \"\"\n  } = props;\n  const {\n    0: html,\n    1: setHtml\n  } = useState(\"\");\n  useEffect(() => {\n    highlightCode(language, content).then(html => setHtml(html !== null && html !== void 0 ? html : \"\")).catch(() => setHtml(\"\"));\n  }, [content, language]);\n\n  if (true) {\n    var _getLanguageFromAlias, _getLanguageFromAlias2;\n\n    const safeLanguage = (_getLanguageFromAlias = (_getLanguageFromAlias2 = getLanguageFromAlias(language)) === null || _getLanguageFromAlias2 === void 0 ? void 0 : _getLanguageFromAlias2.name) !== null && _getLanguageFromAlias !== void 0 ? _getLanguageFromAlias : \"plaintext\";\n    return /*#__PURE__*/_jsx(CodeBlockContainer, {\n      dangerouslySetInnerHTML: {\n        __html: hljs.highlight(safeLanguage, content).value\n      }\n    });\n  }\n\n  if (!html) {\n    return /*#__PURE__*/_jsx(CodeBlockContainer, {\n      children: content\n    });\n  }\n\n  return /*#__PURE__*/_jsx(CodeBlockContainer, {\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}