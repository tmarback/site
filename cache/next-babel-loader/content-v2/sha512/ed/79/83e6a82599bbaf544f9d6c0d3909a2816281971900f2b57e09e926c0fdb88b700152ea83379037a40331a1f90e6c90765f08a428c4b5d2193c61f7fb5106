{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef, useEffect, useRef } from \"react\";\nimport mergeRefs from \"react-merge-refs\";\nimport { InputField } from \"./InputField\";\n\nfunction HiddenInputFieldRenderer(props, ref) {\n  const {\n    type = \"text\"\n  } = props,\n        inputProps = _objectWithoutProperties(props, [\"type\"]);\n\n  const inputRef = useRef(null);\n  useEffect(() => {\n    const {\n      current: input\n    } = inputRef;\n    if (!input) return;\n\n    const onFocus = () => {\n      input.type = type;\n    };\n\n    const onBlur = () => {\n      input.type = \"password\";\n    };\n\n    input.addEventListener(\"focus\", onFocus);\n    input.addEventListener(\"blur\", onBlur);\n    return () => {\n      input.removeEventListener(\"focus\", onFocus);\n      input.removeEventListener(\"blur\", onBlur);\n    };\n  }, [type]);\n  return /*#__PURE__*/_jsx(InputField, _objectSpread({\n    ref: mergeRefs([inputRef, ref]),\n    type: \"password\"\n  }, inputProps));\n}\n\nexport const HiddenInputField = /*#__PURE__*/forwardRef(HiddenInputFieldRenderer);","map":null,"metadata":{},"sourceType":"module"}