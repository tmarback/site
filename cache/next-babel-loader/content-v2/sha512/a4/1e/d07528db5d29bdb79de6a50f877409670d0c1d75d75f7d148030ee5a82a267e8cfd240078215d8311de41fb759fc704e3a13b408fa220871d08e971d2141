{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { destroy, getSnapshot } from \"mobx-state-tree\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { base64UrlEncode } from \"../common/base64/base64UrlEncode\";\nimport { ModalManagerContext } from \"../common/modal/ModalManagerContext\";\nimport { Footer } from \"../common/page/Footer\";\nimport { Header } from \"../common/page/Header\";\nimport { PageHead } from \"../common/page/PageHead\";\nimport { PreferencesModal } from \"../common/settings/PreferencesModal\";\nimport { useAutorun } from \"../common/state/useAutorun\";\nimport { useLazyValue } from \"../common/state/useLazyValue\";\nimport { useRequiredContext } from \"../common/state/useRequiredContext\";\nimport { timeout } from \"../common/utilities/timeout\";\nimport { Editor } from \"../modules/editor/Editor\";\nimport { EditorManager } from \"../modules/editor/EditorManager\";\nimport { EditorManagerProvider } from \"../modules/editor/EditorManagerContext\";\nimport { getEditorManagerFromQuery } from \"../modules/editor/getEditorManagerFromQuery\";\nimport { Preview } from \"../modules/message/preview/Preview\";\nconst Container = styled.div.withConfig({\n  componentId: \"nf398x-0\"\n})([\"display:flex;flex-direction:column;height:100%;\"]);\nconst View = styled.main.attrs({\n  translate: \"no\"\n}).withConfig({\n  componentId: \"nf398x-1\"\n})([\"max-height:calc(100% - 48px);display:flex;flex-direction:row-reverse;align-items:stretch;flex:1;& > *{flex:1;height:100%;overflow-y:scroll;}\"]);\nexport default function Main(props) {\n  const {\n    state,\n    mobile\n  } = props;\n  const editorManager = useLazyValue(() => EditorManager.create(state));\n  useEffect(() => () => destroy(editorManager), [editorManager]);\n  const cancelRef = useRef();\n  useAutorun(() => {\n    var _cancelRef$current;\n\n    const messages = editorManager.messages.map(message => ({\n      data: message.data\n    }));\n    (_cancelRef$current = cancelRef.current) === null || _cancelRef$current === void 0 ? void 0 : _cancelRef$current.call(cancelRef);\n    cancelRef.current = timeout(() => {\n      const json = JSON.stringify({\n        messages\n      });\n      const base64 = base64UrlEncode(json);\n      history.replaceState({\n        __N: false\n      }, \"\", `/?data=${base64}`);\n    }, 500);\n  });\n  const {\n    0: activeTab,\n    1: setActiveTab\n  } = useState(\"Preview\");\n  const modalManager = useRequiredContext(ModalManagerContext);\n\n  const spawnSettingsModal = () => modalManager.spawn({\n    render: () => /*#__PURE__*/_jsx(PreferencesModal, {})\n  });\n\n  return useObserver(() => /*#__PURE__*/_jsxs(EditorManagerProvider, {\n    value: editorManager,\n    children: [/*#__PURE__*/_jsx(PageHead, {\n      title: \"Discohook\",\n      description: \"The easiest way to build and send Discord messages with embeds using webhooks.\",\n      children: /*#__PURE__*/_jsx(\"meta\", {\n        name: \"referrer\",\n        content: \"strict-origin\"\n      }, \"referrer\")\n    }), /*#__PURE__*/_jsxs(Container, {\n      children: [/*#__PURE__*/_jsx(Header, {\n        items: [{\n          name: \"Support Server\",\n          to: \"/discord\",\n          newWindow: true\n        }, {\n          name: \"Discord Bot\",\n          to: \"/bot\",\n          newWindow: true\n        }, {\n          name: \"Settings\",\n          handler: spawnSettingsModal\n        }],\n        tabs: mobile ? {\n          items: [\"Editor\", \"Preview\"],\n          current: activeTab,\n          onChange: setActiveTab\n        } : undefined\n      }), /*#__PURE__*/_jsxs(View, {\n        children: [(!mobile || activeTab === \"Preview\") && /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(Preview, {})\n        }), (!mobile || activeTab === \"Editor\") && /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(Editor, {}), /*#__PURE__*/_jsx(Footer, {})]\n        })]\n      })]\n    })]\n  }));\n}\nexport const getServerSideProps = context => {\n  var _context$req$headers$;\n\n  return {\n    props: {\n      state: getSnapshot(getEditorManagerFromQuery(context.query)),\n      mobile: /mobile/i.test((_context$req$headers$ = context.req.headers[\"user-agent\"]) !== null && _context$req$headers$ !== void 0 ? _context$req$headers$ : \"\")\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}