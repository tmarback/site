{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const jumbosizeEmojis = ast => {\n  // Gets all nodes of type 'emoji' or 'customEmoji'\n  const emojiNodes = ast.filter(node => node.type === \"emoji\"); // If there's more than 27 (limit of jumbosized emojis), return the tree as is\n\n  if (emojiNodes.length > 27) return ast; // Check if the tree has any amount of nodes that aren't emojis,\n  // or nodes containing whitespace only\n\n  const hasText = ast.some(node => {\n    if (node.type === \"emoji\") return false;\n    if (node.type === \"br\") return false;\n    if (typeof node.content !== \"string\") return true;\n    if (node.content.trim() !== \"\") return true;\n    return false;\n  });\n  if (hasText) return ast; // If the message passed all checks, return a copy of the tree where all nodes\n  // have the 'jumboable' property set to true\n\n  return ast.map(node => {\n    if (node.type === \"emoji\") {\n      return _objectSpread(_objectSpread({}, node), {}, {\n        jumboable: true\n      });\n    }\n\n    return node;\n  });\n};","map":null,"metadata":{},"sourceType":"module"}