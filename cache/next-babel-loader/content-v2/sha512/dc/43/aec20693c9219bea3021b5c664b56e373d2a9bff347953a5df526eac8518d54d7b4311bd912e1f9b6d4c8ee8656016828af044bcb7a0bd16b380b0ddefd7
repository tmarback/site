{"ast":null,"code":"/* eslint-disable import/no-cycle */\nimport { isValid } from \"date-fns\";\nimport { getParentOfType, types } from \"mobx-state-tree\";\nimport { ColorModel } from \"../../../../common/input/color/ColorModel\";\nimport { nullableDate } from \"../../../../common/state/nullableDate\";\nimport { getUniqueId } from \"../../../../common/state/uid\";\nimport { FieldModel } from \"./FieldModel\";\nimport { MessageModel } from \"./MessageModel\";\nexport const EmbedModel = types.model(\"EmbedModel\", {\n  id: types.optional(types.identifierNumber, getUniqueId),\n  title: \"\",\n  description: \"\",\n  url: \"\",\n  color: types.optional(ColorModel, {}),\n  fields: types.array(types.late(() => FieldModel)),\n  author: \"\",\n  authorUrl: \"\",\n  authorIcon: \"\",\n  footer: \"\",\n  footerIcon: \"\",\n  timestamp: types.optional(nullableDate, null),\n  gallery: types.array(types.string),\n  thumbnail: \"\"\n}).views(self => ({\n  get message() {\n    return getParentOfType(self, MessageModel);\n  },\n\n  get length() {\n    return self.title.length + self.description.length + self.fields.reduce((length, field) => length + field.name.length + field.value.length, 0) + self.author.length + self.footer.length;\n  },\n\n  get size() {\n    return Math.max(self.gallery.length, 1);\n  },\n\n  get hasTitle() {\n    return self.title.trim().length > 0;\n  },\n\n  get hasDescription() {\n    return self.description.trim().length > 0;\n  },\n\n  get hasAuthor() {\n    return self.author.trim().length > 0;\n  },\n\n  get hasFooter() {\n    return self.footer.trim().length > 0 || isValid(self.timestamp);\n  },\n\n  get data() {\n    const fields = self.fields.length > 0 ? self.fields.map(field => ({\n      name: field.name || undefined,\n      value: field.value || undefined,\n      inline: field.inline || undefined\n    })) : undefined;\n    const author = this.hasAuthor ? {\n      name: self.author,\n      url: self.authorUrl || undefined,\n      icon_url: self.authorIcon || undefined\n    } : undefined;\n    const footer = self.footer.trim().length > 0 || isValid(self.timestamp) && self.footerIcon ? {\n      text: self.footer || undefined,\n      icon_url: self.footerIcon || undefined\n    } : undefined;\n    const embeds = [{\n      title: self.title || undefined,\n      description: self.description || undefined,\n      url: self.url || undefined,\n      color: self.color.raw,\n      fields,\n      author,\n      footer,\n      timestamp: isValid(self.timestamp) ? self.timestamp.toJSON() : undefined,\n      image: self.gallery.length > 0 ? {\n        url: self.gallery[0]\n      } : undefined,\n      thumbnail: self.thumbnail ? {\n        url: self.thumbnail\n      } : undefined\n    }];\n\n    for (const image of self.gallery.slice(1)) {\n      embeds.push({\n        url: self.url,\n        image: {\n          url: image\n        }\n      });\n    }\n\n    return embeds;\n  },\n\n  get displayName() {\n    /* eslint-disable @typescript-eslint/prefer-nullish-coalescing */\n    return self.author.split(\"\\n\").map(line => line.trim()).find(Boolean) || self.title.split(\"\\n\").map(line => line.trim()).find(Boolean) || self.description.split(\"\\n\").map(line => line.trim()).find(Boolean) || self.fields.map(field => field.displayName).find(Boolean) || self.footer.split(\"\\n\").map(line => line.trim()).find(Boolean) || undefined;\n    /* eslint-enable @typescript-eslint/prefer-nullish-coalescing */\n  }\n\n})).actions(self => ({\n  set(key, value) {\n    self[key] = value;\n  }\n\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions","map":null,"metadata":{},"sourceType":"module"}