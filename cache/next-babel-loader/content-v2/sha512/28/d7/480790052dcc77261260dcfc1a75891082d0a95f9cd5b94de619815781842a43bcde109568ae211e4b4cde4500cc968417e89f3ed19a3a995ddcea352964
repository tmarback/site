{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { defaultRules } from \"simple-markdown\";\nimport { NAME_TO_EMOJI } from \"../emoji/emoji\";\nimport { getEmojiUrl } from \"../emoji/getEmojiUrl\";\nimport { Emoji } from \"../styles/Emoji\";\nconst PLAINTEXT_EMOJIS = new Set([\"™\", \"™️\", \"©\", \"©️\", \"®\", \"®️\"]);\nconst EMOJI_NAME_RE = /^:([^\\s:]+?(?:::skin-tone-\\d)?):/;\nexport const emoji = _objectSpread(_objectSpread({}, defaultRules.text), {}, {\n  match: content => {\n    const match = EMOJI_NAME_RE.exec(content);\n    if (!match) return null;\n    const [, name] = match;\n\n    if (NAME_TO_EMOJI.get(name)) {\n      return match;\n    }\n\n    return null;\n  },\n  parse: capture => {\n    const [content, name] = capture;\n    const emoji = NAME_TO_EMOJI.get(name);\n\n    if (!emoji || PLAINTEXT_EMOJIS.has(emoji)) {\n      return {\n        type: \"text\",\n        content\n      };\n    }\n\n    const url = getEmojiUrl(emoji);\n    return {\n      name,\n      emoji,\n      src: url\n    };\n  },\n  react: (node, _, state) => /*#__PURE__*/_jsx(Emoji, {\n    src: node.src,\n    alt: node.emoji,\n    title: node.name,\n    draggable: false,\n    big: node.jumboable\n  }, state.key)\n});","map":{"version":3,"sources":["/home/runner/work/site/site/modules/markdown/rules/emoji.tsx"],"names":["React","defaultRules","NAME_TO_EMOJI","getEmojiUrl","Emoji","PLAINTEXT_EMOJIS","Set","EMOJI_NAME_RE","emoji","text","match","content","exec","name","get","parse","capture","has","type","url","src","react","node","_","state","jumboable","key"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,SAASC,KAAT,QAAsB,iBAAtB;AAEA,MAAMC,gBAAgB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,EAA4B,IAA5B,CAAR,CAAzB;AAEA,MAAMC,aAAa,GAAG,kCAAtB;AAEA,OAAO,MAAMC,KAAmB,mCAC3BP,YAAY,CAACQ,IADc;AAE9BC,EAAAA,KAAK,EAAEC,OAAO,IAAI;AAChB,UAAMD,KAAK,GAAGH,aAAa,CAACK,IAAd,CAAmBD,OAAnB,CAAd;AACA,QAAI,CAACD,KAAL,EAAY,OAAO,IAAP;AAEZ,UAAM,GAAGG,IAAH,IAAWH,KAAjB;;AAEA,QAAIR,aAAa,CAACY,GAAd,CAAkBD,IAAlB,CAAJ,EAA6B;AAC3B,aAAOH,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAb6B;AAc9BK,EAAAA,KAAK,EAAEC,OAAO,IAAI;AAChB,UAAM,CAACL,OAAD,EAAUE,IAAV,IAAkBG,OAAxB;AAEA,UAAMR,KAAK,GAAGN,aAAa,CAACY,GAAd,CAAkBD,IAAlB,CAAd;;AAEA,QAAI,CAACL,KAAD,IAAUH,gBAAgB,CAACY,GAAjB,CAAqBT,KAArB,CAAd,EAA2C;AACzC,aAAO;AACLU,QAAAA,IAAI,EAAE,MADD;AAELP,QAAAA;AAFK,OAAP;AAID;;AAED,UAAMQ,GAAG,GAAGhB,WAAW,CAACK,KAAD,CAAvB;AAEA,WAAO;AACLK,MAAAA,IADK;AAELL,MAAAA,KAFK;AAGLY,MAAAA,GAAG,EAAED;AAHA,KAAP;AAKD,GAjC6B;AAkC9BE,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,CAAP,EAAUC,KAAV,kBACL,KAAC,KAAD;AAEE,IAAA,GAAG,EAAEF,IAAI,CAACF,GAFZ;AAGE,IAAA,GAAG,EAAEE,IAAI,CAACd,KAHZ;AAIE,IAAA,KAAK,EAAEc,IAAI,CAACT,IAJd;AAKE,IAAA,SAAS,EAAE,KALb;AAME,IAAA,GAAG,EAAES,IAAI,CAACG;AANZ,KACOD,KAAK,CAACE,GADb;AAnC4B,EAAzB","sourcesContent":["import React from \"react\"\nimport { defaultRules } from \"simple-markdown\"\nimport { NAME_TO_EMOJI } from \"../emoji/emoji\"\nimport { getEmojiUrl } from \"../emoji/getEmojiUrl\"\nimport type { MarkdownRule } from \"../parsers/MarkdownRule\"\nimport { Emoji } from \"../styles/Emoji\"\n\nconst PLAINTEXT_EMOJIS = new Set([\"™\", \"™️\", \"©\", \"©️\", \"®\", \"®️\"])\n\nconst EMOJI_NAME_RE = /^:([^\\s:]+?(?:::skin-tone-\\d)?):/\n\nexport const emoji: MarkdownRule = {\n  ...defaultRules.text,\n  match: content => {\n    const match = EMOJI_NAME_RE.exec(content)\n    if (!match) return null\n\n    const [, name] = match\n\n    if (NAME_TO_EMOJI.get(name)) {\n      return match\n    }\n\n    return null\n  },\n  parse: capture => {\n    const [content, name] = capture\n\n    const emoji = NAME_TO_EMOJI.get(name)\n\n    if (!emoji || PLAINTEXT_EMOJIS.has(emoji)) {\n      return {\n        type: \"text\",\n        content,\n      }\n    }\n\n    const url = getEmojiUrl(emoji)\n\n    return {\n      name,\n      emoji,\n      src: url,\n    }\n  },\n  react: (node, _, state) => (\n    <Emoji\n      key={state.key}\n      src={node.src}\n      alt={node.emoji}\n      title={node.name}\n      draggable={false}\n      big={node.jumboable}\n    />\n  ),\n}\n"]},"metadata":{},"sourceType":"module"}