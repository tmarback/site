{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { action, observable } from \"mobx\";\nexport let PopoverManager = (_class = (_temp = class PopoverManager {\n  constructor() {\n    _initializerDefineProperty(this, \"popovers\", _descriptor, this);\n  }\n\n  spawn(popover) {\n    this.popovers.push(popover);\n  }\n\n  dismiss(name) {\n    var _popover$onDismiss;\n\n    const popover = this.popovers.find(popover => popover.name === name);\n    if (!popover) return;\n    (_popover$onDismiss = popover.onDismiss) === null || _popover$onDismiss === void 0 ? void 0 : _popover$onDismiss.call(popover);\n    this.popovers = this.popovers.filter(popover => popover.name !== name);\n  }\n\n  update(name, partial) {\n    const popover = this.popovers.find(popover => popover.name === name);\n    if (!popover) return;\n    const index = this.popovers.indexOf(popover);\n    this.popovers[index] = _objectSpread(_objectSpread({}, popover), partial);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"popovers\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"spawn\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"spawn\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"dismiss\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"dismiss\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"update\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"update\"), _class.prototype)), _class);","map":null,"metadata":{},"sourceType":"module"}