{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { toASCII } from \"punycode\";\nimport * as URL from \"url\";\nexport const depunycodeUrl = link => {\n  try {\n    const url = URL.parse(link);\n    const {\n      hostname,\n      protocol\n    } = url;\n    if ((protocol === null || protocol === void 0 ? void 0 : protocol.toLowerCase()) === \"file:\") return;\n    if (!hostname) return;\n    const asciiHostname = toASCII(hostname);\n    return URL.format(_objectSpread(_objectSpread({}, url), {}, {\n      hostname: asciiHostname,\n      protocol\n    }));\n  } catch {// return nothing\n  }\n};","map":null,"metadata":{},"sourceType":"module"}