{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { defaultRules } from \"simple-markdown\";\nimport { BlockQuote } from \"../styles/BlockQuote\";\nconst BEGINNING_OF_LINE_RE = /^$|\\n *$/;\nconst BLOCK_QUOTE_RE = /^( *>>> +([\\S\\s]*))|^( *>(?!>>) +[^\\n]*(\\n *>(?!>>) +[^\\n]*)*\\n?)/;\nconst SINGLELINE_QUOTE_RE = /^ *> ?/gm;\nconst MULTILINE_QUOTE_RE = /^ *>>> ?/;\nexport const blockQuote = _objectSpread(_objectSpread({}, defaultRules.blockQuote), {}, {\n  match: (source, state) => {\n    var _lookbehind$;\n\n    const {\n      nested,\n      inQuote,\n      prevCapture: lookbehind\n    } = state; // Prevents having multiple layers of quote blocks\n\n    if (nested) return null;\n    if (inQuote) return null; // Makes sure that quotes can only start on the beginning of a line\n\n    if (!BEGINNING_OF_LINE_RE.test((_lookbehind$ = lookbehind === null || lookbehind === void 0 ? void 0 : lookbehind[0]) !== null && _lookbehind$ !== void 0 ? _lookbehind$ : \"\")) return null;\n    return BLOCK_QUOTE_RE.exec(source);\n  },\n  parse: (capture, parse, state) => {\n    const [content] = capture;\n    const {\n      inline = false\n    } = state; // Determine whether or not the quote block is multi-line\n\n    const multiline = MULTILINE_QUOTE_RE.test(capture[0]); // Removes the '>' symbols from content\n\n    const trimRegex = multiline ? MULTILINE_QUOTE_RE : SINGLELINE_QUOTE_RE;\n    const trimmedContent = content.replace(trimRegex, \"\"); // Parses the trimmed content for any markdown\n\n    const parsedContent = parse(trimmedContent, _objectSpread(_objectSpread({}, state), {}, {\n      inline: multiline ? inline : true,\n      inQuote: true\n    })); // Makes sure the block quote always renders, even without content\n\n    if (parsedContent.length === 0) {\n      parsedContent.push({\n        type: \"text\",\n        content: \" \"\n      });\n    }\n\n    return {\n      content: parsedContent\n    };\n  },\n  react: (node, output, state) => /*#__PURE__*/_jsx(BlockQuote, {\n    children: output(node.content, state)\n  }, state.key)\n});","map":null,"metadata":{},"sourceType":"module"}