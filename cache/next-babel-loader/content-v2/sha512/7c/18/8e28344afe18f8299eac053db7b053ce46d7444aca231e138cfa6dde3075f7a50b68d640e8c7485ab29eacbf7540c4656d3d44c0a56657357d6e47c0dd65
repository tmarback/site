{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { defaultRules } from \"simple-markdown\";\nimport { NAME_TO_EMOJI } from \"../emoji/emoji\";\nimport { getEmojiUrl } from \"../emoji/getEmojiUrl\";\nimport { Emoji } from \"../styles/Emoji\";\nconst PLAINTEXT_EMOJIS = new Set([\"™\", \"™️\", \"©\", \"©️\", \"®\", \"®️\"]);\nconst EMOJI_NAME_RE = /^:([^\\s:]+?(?:::skin-tone-\\d)?):/;\nexport const emoji = _objectSpread(_objectSpread({}, defaultRules.text), {}, {\n  match: content => {\n    const match = EMOJI_NAME_RE.exec(content);\n    if (!match) return null;\n    const [, name] = match;\n\n    if (NAME_TO_EMOJI.get(name)) {\n      return match;\n    }\n\n    return null;\n  },\n  parse: capture => {\n    const [content, name] = capture;\n    const emoji = NAME_TO_EMOJI.get(name);\n\n    if (!emoji || PLAINTEXT_EMOJIS.has(emoji)) {\n      return {\n        type: \"text\",\n        content\n      };\n    }\n\n    const url = getEmojiUrl(emoji);\n    return {\n      name,\n      emoji,\n      src: url\n    };\n  },\n  react: (node, _, state) => /*#__PURE__*/_jsx(Emoji, {\n    src: node.src,\n    alt: node.emoji,\n    title: node.name,\n    draggable: false,\n    big: node.jumboable\n  }, state.key)\n});","map":null,"metadata":{},"sourceType":"module"}