{"ast":null,"code":"import _defineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useObserver } from \"mobx-react-lite\";\nimport { applyPatch } from \"mobx-state-tree\";\nimport dynamic from \"next/dynamic\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { PrimaryButton } from \"../../../common/input/button/PrimaryButton\";\nimport { SecondaryButton } from \"../../../common/input/button/SecondaryButton\";\nimport { InputError } from \"../../../common/input/error/InputError\";\nimport { InputField } from \"../../../common/input/text/InputField\";\nimport { ButtonList } from \"../../../common/layout/ButtonList\";\nimport { Stack } from \"../../../common/layout/Stack\";\nimport { ModalManagerContext } from \"../../../common/modal/ModalManagerContext\";\nimport { useRequiredContext } from \"../../../common/state/useRequiredContext\";\nimport { Markdown } from \"../../markdown/Markdown\";\nimport { EditorManagerContext } from \"../EditorManagerContext\";\nimport { EmbedEditor } from \"./EmbedEditor\";\nimport { PrimaryContentEditor } from \"./PrimaryContentEditor\";\nconst DataEditorModal = dynamic(async () => import(\"../data/DataEditorModal\").then(module => module.DataEditorModal), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../data/DataEditorModal\")],\n    modules: [\"../data/DataEditorModal\"]\n  }\n});\nconst Message = styled(Markdown).withConfig({\n  componentId: \"gy799t-0\"\n})([\"margin-top:-8px;font-size:15px;\"]);\nconst EmbedValidationErrorContainer = styled.div.withConfig({\n  componentId: \"gy799t-1\"\n})([\"margin-bottom:8px;&:empty{margin:0;}\"]);\nexport function MessageEditor(props) {\n  const {\n    message,\n    form\n  } = props;\n  const modalManager = useRequiredContext(ModalManagerContext);\n  const editorManager = useRequiredContext(EditorManagerContext);\n\n  const spawnDataEditorModal = () => modalManager.spawn({\n    render: () => /*#__PURE__*/_jsx(DataEditorModal, {\n      message: message\n    })\n  });\n\n  return useObserver(() => /*#__PURE__*/_jsxs(Stack, {\n    gap: 16,\n    children: [/*#__PURE__*/_jsx(PrimaryContentEditor, {\n      message: message,\n      form: form\n    }), message.embeds.length > 0 && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(EmbedValidationErrorContainer, {\n        children: /*#__PURE__*/_jsx(InputError, {\n          error: message.embedLength > 6000 ? \"Embeds exceed 6000 character limit\" : undefined\n        })\n      }), /*#__PURE__*/_jsx(Stack, {\n        gap: 16,\n        children: message.embeds.map((embed, index) => /*#__PURE__*/_jsx(EmbedEditor, {\n          embed: embed,\n          form: form.repeatingForm(\"embeds\").index(index)\n        }, embed.id))\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(PrimaryButton, {\n        disabled: message.size >= 10,\n        onClick: () => {\n          form.repeatingForm(\"embeds\").push({}, [\"timestamp\"]);\n        },\n        children: \"Add Embed\"\n      })\n    }), /*#__PURE__*/_jsx(InputField, _objectSpread({\n      id: `_${message.id}_reference`,\n      label: \"Message Link\",\n      placeholder: \"https://discord.com/channels/...\",\n      error: form.field(\"reference\").error\n    }, form.field(\"reference\").inputProps)), /*#__PURE__*/_jsx(Message, {\n      content: \"*When a message link is set, pressing submit or edit will edit the\" + \" message sent inside of Discord. To load a message sent in Discord, use\" + \" the bot's 'restore' command.*\"\n    }), /*#__PURE__*/_jsxs(ButtonList, {\n      children: [editorManager.messages.length > 1 && /*#__PURE__*/_jsx(SecondaryButton, {\n        onClick: () => {\n          applyPatch(form.state.value, [{\n            op: \"remove\",\n            path: form.path\n          }]);\n        },\n        children: \"Remove Message\"\n      }), /*#__PURE__*/_jsx(SecondaryButton, {\n        onClick: () => spawnDataEditorModal(),\n        children: \"JSON Data Editor\"\n      })]\n    })]\n  }));\n}","map":{"version":3,"sources":["/home/runner/work/site/site/modules/editor/message/MessageEditor.tsx"],"names":["useObserver","applyPatch","dynamic","React","styled","PrimaryButton","SecondaryButton","InputError","InputField","ButtonList","Stack","ModalManagerContext","useRequiredContext","Markdown","EditorManagerContext","EmbedEditor","PrimaryContentEditor","DataEditorModal","then","module","Message","EmbedValidationErrorContainer","div","MessageEditor","props","message","form","modalManager","editorManager","spawnDataEditorModal","spawn","render","embeds","length","embedLength","undefined","map","embed","index","repeatingForm","id","size","push","field","error","inputProps","messages","state","value","op","path"],"mappings":"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","sourcesContent":["import { useObserver } from \"mobx-react-lite\"\nimport { applyPatch } from \"mobx-state-tree\"\nimport dynamic from \"next/dynamic\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { PrimaryButton } from \"../../../common/input/button/PrimaryButton\"\nimport { SecondaryButton } from \"../../../common/input/button/SecondaryButton\"\nimport { InputError } from \"../../../common/input/error/InputError\"\nimport { InputField } from \"../../../common/input/text/InputField\"\nimport { ButtonList } from \"../../../common/layout/ButtonList\"\nimport { Stack } from \"../../../common/layout/Stack\"\nimport { ModalManagerContext } from \"../../../common/modal/ModalManagerContext\"\nimport { useRequiredContext } from \"../../../common/state/useRequiredContext\"\nimport { Markdown } from \"../../markdown/Markdown\"\nimport type { MessageItemFormState } from \"../../message/state/editorForm\"\nimport type { EmbedLike } from \"../../message/state/models/EmbedModel\"\nimport type { MessageLike } from \"../../message/state/models/MessageModel\"\nimport type { DataEditorModalProps } from \"../data/DataEditorModal\"\nimport { EditorManagerContext } from \"../EditorManagerContext\"\nimport { EmbedEditor } from \"./EmbedEditor\"\nimport { PrimaryContentEditor } from \"./PrimaryContentEditor\"\n\nconst DataEditorModal = dynamic<DataEditorModalProps>(async () =>\n  import(\"../data/DataEditorModal\").then(module => module.DataEditorModal),\n)\n\nconst Message = styled(Markdown)`\n  margin-top: -8px;\n  font-size: 15px;\n`\n\nconst EmbedValidationErrorContainer = styled.div`\n  margin-bottom: 8px;\n\n  &:empty {\n    margin: 0;\n  }\n`\n\nexport type MessageEditorProps = {\n  message: MessageLike\n  form: MessageItemFormState\n}\n\nexport function MessageEditor(props: MessageEditorProps) {\n  const { message, form } = props\n\n  const modalManager = useRequiredContext(ModalManagerContext)\n  const editorManager = useRequiredContext(EditorManagerContext)\n\n  const spawnDataEditorModal = () =>\n    modalManager.spawn({\n      render: () => <DataEditorModal message={message} />,\n    })\n\n  return useObserver(() => (\n    <Stack gap={16}>\n      <PrimaryContentEditor message={message} form={form} />\n      {message.embeds.length > 0 && (\n        <div>\n          <EmbedValidationErrorContainer>\n            <InputError\n              error={\n                message.embedLength > 6000\n                  ? \"Embeds exceed 6000 character limit\"\n                  : undefined\n              }\n            />\n          </EmbedValidationErrorContainer>\n          <Stack gap={16}>\n            {message.embeds.map((embed, index) => (\n              <EmbedEditor\n                key={embed.id}\n                embed={embed}\n                form={form.repeatingForm(\"embeds\").index(index)}\n              />\n            ))}\n          </Stack>\n        </div>\n      )}\n      <div>\n        <PrimaryButton\n          disabled={message.size >= 10}\n          onClick={() => {\n            form.repeatingForm(\"embeds\").push({} as EmbedLike, [\"timestamp\"])\n          }}\n        >\n          Add Embed\n        </PrimaryButton>\n      </div>\n      <InputField\n        id={`_${message.id}_reference`}\n        label=\"Message Link\"\n        placeholder=\"https://discord.com/channels/...\"\n        error={form.field(\"reference\").error}\n        {...form.field(\"reference\").inputProps}\n      />\n      <Message\n        content={\n          \"*When a message link is set, pressing submit or edit will edit the\" +\n          \" message sent inside of Discord. To load a message sent in Discord, use\" +\n          \" the bot's 'restore' command.*\"\n        }\n      />\n      <ButtonList>\n        {editorManager.messages.length > 1 && (\n          <SecondaryButton\n            onClick={() => {\n              applyPatch(form.state.value, [\n                {\n                  op: \"remove\",\n                  path: form.path,\n                },\n              ])\n            }}\n          >\n            Remove Message\n          </SecondaryButton>\n        )}\n        <SecondaryButton onClick={() => spawnDataEditorModal()}>\n          JSON Data Editor\n        </SecondaryButton>\n      </ButtonList>\n    </Stack>\n  ))\n}\n"]},"metadata":{},"sourceType":"module"}