{"ast":null,"code":"var _class, _descriptor, _descriptor2, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { computed, observable } from \"mobx\";\nimport { openDatabase } from \"./connection/openDatabase\";\nexport let DatabaseManager = (_class = (_temp = class DatabaseManager {\n  constructor() {\n    this.initialized = void 0;\n    this.database = void 0;\n\n    _initializerDefineProperty(this, \"persisted\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"persistenceMessageDismissed\", _descriptor2, this);\n\n    let markAsInitialized;\n    this.initialized = new Promise(resolve => {\n      markAsInitialized = resolve;\n    });\n    if (true) return;\n\n    if (\"storage\" in navigator) {\n      navigator.storage.persisted().then(persisted => {\n        this.persisted = persisted;\n      }).catch(() => {});\n    }\n\n    openDatabase().then(database => {\n      this.database = database;\n      markAsInitialized();\n    }).catch(error => {\n      console.error(\"Failed to open database:\", error);\n    });\n  }\n\n  async requestPersistence() {\n    if (\"chrome\" in window) {\n      await Notification.requestPermission();\n    }\n\n    if (\"storage\" in navigator) {\n      this.persisted = await navigator.storage.persist();\n    }\n  }\n\n  get shouldShowPersistenceWarning() {\n    return !this.persisted && !this.persistenceMessageDismissed;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"persisted\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"persistenceMessageDismissed\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"shouldShowPersistenceWarning\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"shouldShowPersistenceWarning\"), _class.prototype)), _class);","map":null,"metadata":{},"sourceType":"module"}