{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaultRules } from \"simple-markdown\";\nimport { parseUrl } from \"../helpers/parseUrl\";\nimport { link } from \"./link\";\nexport const url = _objectSpread(_objectSpread({}, defaultRules.url), {}, {\n  match: (content, state) => {\n    if (!state.inline) return null;\n    const match = /^((?:https?|steam):\\/\\/[^\\s<]+[^\\s\"',.:;<\\]])/.exec(content);\n    if (!match) return null;\n    let [href] = match;\n    let searchPosition = 0;\n\n    for (let pos = href.length - 1; pos >= 0 && href[pos] === \")\"; pos -= 1) {\n      const index = href.indexOf(\"(\", searchPosition);\n\n      if (index === -1) {\n        href = href.slice(0, -1);\n        break;\n      }\n\n      searchPosition = index + 1;\n    }\n\n    return [href, href];\n  },\n  parse: parseUrl,\n  react: link.react\n});","map":null,"metadata":{},"sourceType":"module"}