{"ast":null,"code":"import _defineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { defaultRules } from \"simple-markdown\";\nimport { parseUrl } from \"../helpers/parseUrl\";\nimport { link } from \"./link\";\nexport const url = _objectSpread(_objectSpread({}, defaultRules.url), {}, {\n  match: (content, state) => {\n    if (!state.inline) return null;\n    const match = /^((?:https?|steam):\\/\\/[^\\s<]+[^\\s\"',.:;<\\]])/.exec(content);\n    if (!match) return null;\n    let [href] = match;\n    let searchPosition = 0;\n\n    for (let pos = href.length - 1; pos >= 0 && href[pos] === \")\"; pos -= 1) {\n      const index = href.indexOf(\"(\", searchPosition);\n\n      if (index === -1) {\n        href = href.slice(0, -1);\n        break;\n      }\n\n      searchPosition = index + 1;\n    }\n\n    return [href, href];\n  },\n  parse: parseUrl,\n  react: link.react\n});","map":{"version":3,"sources":["/home/runner/work/site/site/modules/markdown/rules/url.tsx"],"names":["defaultRules","parseUrl","link","url","match","content","state","inline","exec","href","searchPosition","pos","length","index","indexOf","slice","parse","react"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAO,MAAMC,GAAiB,mCACzBH,YAAY,CAACG,GADY;AAE5BC,EAAAA,KAAK,EAAE,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACzB,QAAI,CAACA,KAAK,CAACC,MAAX,EAAmB,OAAO,IAAP;AAEnB,UAAMH,KAAK,GAAG,gDAAgDI,IAAhD,CAAqDH,OAArD,CAAd;AACA,QAAI,CAACD,KAAL,EAAY,OAAO,IAAP;AAEZ,QAAI,CAACK,IAAD,IAASL,KAAb;AACA,QAAIM,cAAc,GAAG,CAArB;;AAEA,SAAK,IAAIC,GAAG,GAAGF,IAAI,CAACG,MAAL,GAAc,CAA7B,EAAgCD,GAAG,IAAI,CAAP,IAAYF,IAAI,CAACE,GAAD,CAAJ,KAAc,GAA1D,EAA+DA,GAAG,IAAI,CAAtE,EAAyE;AACvE,YAAME,KAAK,GAAGJ,IAAI,CAACK,OAAL,CAAa,GAAb,EAAkBJ,cAAlB,CAAd;;AAEA,UAAIG,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBJ,QAAAA,IAAI,GAAGA,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACA;AACD;;AAEDL,MAAAA,cAAc,GAAGG,KAAK,GAAG,CAAzB;AACD;;AAED,WAAO,CAACJ,IAAD,EAAOA,IAAP,CAAP;AACD,GAvB2B;AAwB5BO,EAAAA,KAAK,EAAEf,QAxBqB;AAyB5BgB,EAAAA,KAAK,EAAEf,IAAI,CAACe;AAzBgB,EAAvB","sourcesContent":["import { defaultRules } from \"simple-markdown\"\nimport { parseUrl } from \"../helpers/parseUrl\"\nimport type { MarkdownRule } from \"../parsers/MarkdownRule\"\nimport { link } from \"./link\"\n\nexport const url: MarkdownRule = {\n  ...defaultRules.url,\n  match: (content, state) => {\n    if (!state.inline) return null\n\n    const match = /^((?:https?|steam):\\/\\/[^\\s<]+[^\\s\"',.:;<\\]])/.exec(content)\n    if (!match) return null\n\n    let [href] = match\n    let searchPosition = 0\n\n    for (let pos = href.length - 1; pos >= 0 && href[pos] === \")\"; pos -= 1) {\n      const index = href.indexOf(\"(\", searchPosition)\n\n      if (index === -1) {\n        href = href.slice(0, -1)\n        break\n      }\n\n      searchPosition = index + 1\n    }\n\n    return [href, href]\n  },\n  parse: parseUrl,\n  react: link.react,\n}\n"]},"metadata":{},"sourceType":"module"}