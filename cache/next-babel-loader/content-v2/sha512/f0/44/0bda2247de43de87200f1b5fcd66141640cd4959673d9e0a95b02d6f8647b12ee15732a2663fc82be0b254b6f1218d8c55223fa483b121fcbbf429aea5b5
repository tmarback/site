{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { forwardRef } from \"react\";\nimport { Interactive } from \"../input/Interactive\";\nimport { TooltipWrapper } from \"../tooltip/TooltipWrapper\";\nimport { Icon } from \"./Icon\";\nimport { VisuallyHidden } from \"./VisuallyHidden\";\n\nfunction IconButtonRenderer(props, ref) {\n  const {\n    icon,\n    label,\n    className,\n    tooltip = true,\n    onClick: handleClick\n  } = props;\n\n  const render = anchorRef => {\n    return /*#__PURE__*/_jsxs(Interactive, {\n      className: className,\n      ref: ref,\n      onClick: handleClick,\n      children: [/*#__PURE__*/_jsx(VisuallyHidden, {\n        children: label\n      }), /*#__PURE__*/_jsx(Icon, {\n        ref: anchorRef,\n        \"aria-hidden\": true,\n        children: icon\n      })]\n    });\n  };\n\n  return tooltip ? /*#__PURE__*/_jsx(TooltipWrapper, {\n    label: label,\n    children: render\n  }, label) : render();\n}\n\nexport const IconButton = /*#__PURE__*/forwardRef(IconButtonRenderer);","map":{"version":3,"sources":["/home/runner/work/site/site/common/layout/IconButton.tsx"],"names":["React","forwardRef","Interactive","TooltipWrapper","Icon","VisuallyHidden","IconButtonRenderer","props","ref","icon","label","className","tooltip","onClick","handleClick","render","anchorRef","IconButton"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAUA,SAASC,kBAAT,CACEC,KADF,EAEEC,GAFF,EAGE;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA,OAAO,GAAG,IAApC;AAA0CC,IAAAA,OAAO,EAAEC;AAAnD,MAAmEP,KAAzE;;AAEA,QAAMQ,MAAM,GAAIC,SAAD,IAAkC;AAC/C,wBACE,MAAC,WAAD;AAAa,MAAA,SAAS,EAAEL,SAAxB;AAAmC,MAAA,GAAG,EAAEH,GAAxC;AAA6C,MAAA,OAAO,EAAEM,WAAtD;AAAA,8BACE,KAAC,cAAD;AAAA,kBAAiBJ;AAAjB,QADF,eAEE,KAAC,IAAD;AAAM,QAAA,GAAG,EAAEM,SAAX;AAAsB,2BAAtB;AAAA,kBACGP;AADH,QAFF;AAAA,MADF;AAQD,GATD;;AAWA,SAAOG,OAAO,gBACZ,KAAC,cAAD;AAA4B,IAAA,KAAK,EAAEF,KAAnC;AAAA,cACGK;AADH,KAAqBL,KAArB,CADY,GAKZK,MAAM,EALR;AAOD;;AAED,OAAO,MAAME,UAAU,gBAAGhB,UAAU,CAACK,kBAAD,CAA7B","sourcesContent":["import type { ReactElement, RefObject } from \"react\"\nimport React, { forwardRef } from \"react\"\nimport { Interactive } from \"../input/Interactive\"\nimport type { ReactRef } from \"../state/ReactRef\"\nimport { TooltipWrapper } from \"../tooltip/TooltipWrapper\"\nimport { Icon } from \"./Icon\"\nimport { VisuallyHidden } from \"./VisuallyHidden\"\n\nexport type IconButtonProps = {\n  icon: ReactElement\n  label: string\n  className?: string\n  tooltip?: boolean\n  onClick?: () => void\n}\n\nfunction IconButtonRenderer(\n  props: IconButtonProps,\n  ref: ReactRef<HTMLButtonElement>,\n) {\n  const { icon, label, className, tooltip = true, onClick: handleClick } = props\n\n  const render = (anchorRef?: RefObject<never>) => {\n    return (\n      <Interactive className={className} ref={ref} onClick={handleClick}>\n        <VisuallyHidden>{label}</VisuallyHidden>\n        <Icon ref={anchorRef} aria-hidden>\n          {icon}\n        </Icon>\n      </Interactive>\n    )\n  }\n\n  return tooltip ? (\n    <TooltipWrapper key={label} label={label}>\n      {render}\n    </TooltipWrapper>\n  ) : (\n    render()\n  )\n}\n\nexport const IconButton = forwardRef(IconButtonRenderer)\n"]},"metadata":{},"sourceType":"module"}