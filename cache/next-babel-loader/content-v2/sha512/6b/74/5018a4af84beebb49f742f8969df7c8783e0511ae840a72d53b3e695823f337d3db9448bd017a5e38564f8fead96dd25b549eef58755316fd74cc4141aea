{"ast":null,"code":"import { types } from \"mobx-state-tree\";\nconst colorValue = types.custom({\n  name: \"ColorValue\",\n\n  fromSnapshot(value) {\n    return value !== null && value !== void 0 ? value : Number.NaN;\n  },\n\n  toSnapshot(value) {\n    return Number.isNaN(value) ? null : value;\n  },\n\n  isTargetType(value) {\n    return typeof value === \"number\";\n  },\n\n  getValidationMessage(value) {\n    if (typeof value === \"number\" || value === null) return \"\";\n    return \"Value is not a number or null\";\n  }\n\n});\nexport const ColorModel = types.model(\"ColorModel\", {\n  hue: types.optional(colorValue, Number.NaN),\n  saturation: types.optional(colorValue, Number.NaN),\n  value: types.optional(colorValue, Number.NaN)\n}).views(self => ({\n  get valid() {\n    return ![self.hue, self.saturation, self.value].some(n => Number.isNaN(n));\n  },\n\n  get raw() {\n    if (!this.valid) return null;\n\n    const f = n => {\n      const k = (n + self.hue / 60) % 6;\n      return self.value - self.value * self.saturation * Math.max(Math.min(k, 4 - k, 1), 0);\n    };\n\n    return (// red\n      Math.round(f(5) * 255) * 0x010000 + // green\n      Math.round(f(3) * 255) * 0x000100 + // blue\n      Math.round(f(1) * 255)\n    );\n  },\n\n  get hex() {\n    var _this$raw;\n\n    if (!this.valid) return;\n    return `#${(_this$raw = this.raw) === null || _this$raw === void 0 ? void 0 : _this$raw.toString(16).padStart(6, \"0\")}`;\n  }\n\n})).actions(self => ({\n  invalidate() {\n    self.hue = Number.NaN;\n    self.saturation = 0;\n    self.value = 0;\n  },\n\n  setHue(value) {\n    self.hue = value;\n  },\n\n  setSaturation(value) {\n    self.saturation = value;\n  },\n\n  setValue(value) {\n    self.value = value;\n  },\n\n  setRaw(value) {\n    this.setHex(typeof value === \"number\" ? `#${value.toString(16).padStart(6, \"0\")}` : \"\");\n  },\n\n  setHex(hex) {\n    var _$exec$map, _$exec;\n\n    if (!hex) {\n      this.invalidate();\n      return;\n    }\n\n    const [, red = 0, green = 0, blue = 0] = (_$exec$map = (_$exec = /^#?([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/.exec(hex)) === null || _$exec === void 0 ? void 0 : _$exec.map(hex => Number.parseInt(hex, 16))) !== null && _$exec$map !== void 0 ? _$exec$map : [];\n    const max = Math.max(red, blue, green);\n    const min = Math.min(red, blue, green);\n    const delta = max - min;\n    const value = max / 255;\n    const saturation = max && (max - min) / max;\n    let hue = 0;\n    if (max === red) hue = 60 * ((green - blue) / delta);\n    if (max === green) hue = 60 * (2 + (blue - red) / delta);\n    if (max === blue) hue = 60 * (4 + (red - green) / delta);\n    if (delta === 0) hue = 0;\n    if (hue < 0) hue += 360;\n    self.hue = hue;\n    self.saturation = saturation;\n    self.value = value;\n  }\n\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions","map":{"version":3,"sources":["/home/runner/work/site/site/common/input/color/ColorModel.ts"],"names":["types","colorValue","custom","name","fromSnapshot","value","Number","NaN","toSnapshot","isNaN","isTargetType","getValidationMessage","ColorModel","model","hue","optional","saturation","views","self","valid","some","n","raw","f","k","Math","max","min","round","hex","toString","padStart","actions","invalidate","setHue","setSaturation","setValue","setRaw","setHex","red","green","blue","exec","map","parseInt","delta"],"mappings":"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","sourcesContent":["import { Instance, types } from \"mobx-state-tree\"\n\nconst colorValue = types.custom<number | null, number>({\n  name: \"ColorValue\",\n  fromSnapshot(value) {\n    return value ?? Number.NaN\n  },\n  toSnapshot(value) {\n    return Number.isNaN(value) ? null : value\n  },\n  isTargetType(value) {\n    return typeof value === \"number\"\n  },\n  getValidationMessage(value: unknown) {\n    if (typeof value === \"number\" || value === null) return \"\"\n    return \"Value is not a number or null\"\n  },\n})\n\nexport const ColorModel = types\n  .model(\"ColorModel\", {\n    hue: types.optional(colorValue, Number.NaN),\n    saturation: types.optional(colorValue, Number.NaN),\n    value: types.optional(colorValue, Number.NaN),\n  })\n  .views(self => ({\n    get valid() {\n      return ![self.hue, self.saturation, self.value].some(n => Number.isNaN(n))\n    },\n\n    get raw() {\n      if (!this.valid) return null\n\n      const f = (n: number) => {\n        const k = (n + self.hue / 60) % 6\n\n        return (\n          self.value -\n          self.value * self.saturation * Math.max(Math.min(k, 4 - k, 1), 0)\n        )\n      }\n\n      return (\n        // red\n        Math.round(f(5) * 255) * 0x010000 +\n        // green\n        Math.round(f(3) * 255) * 0x000100 +\n        // blue\n        Math.round(f(1) * 255)\n      )\n    },\n\n    get hex() {\n      if (!this.valid) return\n      return `#${this.raw?.toString(16).padStart(6, \"0\")}`\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.hue = Number.NaN\n      self.saturation = 0\n      self.value = 0\n    },\n\n    setHue(value: number) {\n      self.hue = value\n    },\n    setSaturation(value: number) {\n      self.saturation = value\n    },\n    setValue(value: number) {\n      self.value = value\n    },\n\n    setRaw(value: number | null) {\n      this.setHex(\n        typeof value === \"number\"\n          ? `#${value.toString(16).padStart(6, \"0\")}`\n          : \"\",\n      )\n    },\n\n    setHex(hex: string) {\n      if (!hex) {\n        this.invalidate()\n        return\n      }\n\n      const [, red = 0, green = 0, blue = 0] =\n        /^#?([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/\n          .exec(hex)\n          ?.map(hex => Number.parseInt(hex, 16)) ?? []\n\n      const max = Math.max(red, blue, green)\n      const min = Math.min(red, blue, green)\n      const delta = max - min\n\n      const value = max / 255\n      const saturation = max && (max - min) / max\n\n      let hue = 0\n      if (max === red) hue = 60 * ((green - blue) / delta)\n      if (max === green) hue = 60 * (2 + (blue - red) / delta)\n      if (max === blue) hue = 60 * (4 + (red - green) / delta)\n      if (delta === 0) hue = 0\n\n      if (hue < 0) hue += 360\n\n      self.hue = hue\n      self.saturation = saturation\n      self.value = value\n    },\n  }))\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions\nexport interface ColorLike extends Instance<typeof ColorModel> {}\n"]},"metadata":{},"sourceType":"module"}