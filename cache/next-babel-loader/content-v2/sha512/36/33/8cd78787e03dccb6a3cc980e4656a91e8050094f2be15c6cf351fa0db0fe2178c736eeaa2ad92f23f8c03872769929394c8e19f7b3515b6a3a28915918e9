{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { chevron, chevronDown } from \"../../../icons/chevron\";\nimport { ActionButtons } from \"../../layout/ActionButtons\";\nimport { Button } from \"../button/Button\";\nimport { InputError } from \"../error/InputError\";\nimport { Input } from \"../layout/Input\";\nimport { InputConstraint } from \"../layout/InputConstraint\";\nimport { InputContainer } from \"../layout/InputContainer\";\nimport { InputLabel } from \"../layout/InputLabel\";\nconst Grid = styled.div.withConfig({\n  componentId: \"sc-1yzfteg-0\"\n})([\"display:grid;grid-template-columns:1fr min-content;align-items:center;gap:\", \";& \", \"{margin-left:0;justify-self:start;}\"], ({\n  hasActions\n}) => hasActions ? \"8px 16px\" : \"8px 0\", Button);\nexport function ListInputField(props) {\n  const {\n    id,\n    value: values,\n    onChange: handleChange,\n    label,\n    limit,\n    error\n  } = props;\n\n  const moveUp = index => {\n    const clone = Array.from(values);\n    clone.splice(index - 1, 0, ...clone.splice(index, 1));\n    handleChange(clone);\n  };\n\n  const moveDown = index => {\n    const clone = Array.from(values);\n    clone.splice(index + 1, 0, ...clone.splice(index, 1));\n    handleChange(clone);\n  };\n\n  const removeItem = index => {\n    const clone = Array.from(values);\n    clone.splice(index, 1);\n    handleChange(clone);\n  };\n\n  const inputs = values.map((value, index) =>\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-array-index-key\n  _jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsx(Input, {\n      id: `${id}_${index}`,\n      value: value,\n      \"aria-label\": `${label.singular} ${index + 1}`,\n      onChange: event => {\n        if (!event.target.value) {\n          event.target.blur();\n          removeItem(index);\n          return;\n        }\n\n        const copy = Array.from(values);\n        copy[index] = event.target.value;\n        handleChange(copy);\n      }\n    }), /*#__PURE__*/_jsx(ActionButtons, {\n      actions: [index !== 0 && {\n        icon: chevron,\n        label: \"Move up\",\n        handler: () => moveUp(index)\n      }, index + 1 !== values.length && {\n        icon: chevronDown,\n        label: \"Move down\",\n        handler: () => moveDown(index)\n      }].filter(action => {\n        return typeof action === \"object\";\n      })\n    })]\n  }, index));\n  const canAdd = !limit || values.length < limit;\n\n  if (canAdd) {\n    inputs.push( /*#__PURE__*/_jsx(Fragment, {\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${id}_${values.length}`,\n        value: \"\",\n        \"aria-label\": `${label.singular} ${values.length + 1}`,\n        onChange: event => {\n          handleChange([...values, event.target.value]);\n        }\n      })\n    }, values.length));\n  }\n\n  return /*#__PURE__*/_jsxs(InputContainer, {\n    children: [/*#__PURE__*/_jsxs(InputLabel, {\n      children: [label.plural, limit && /*#__PURE__*/_jsxs(InputConstraint, {\n        children: [values.length, \"/\", limit]\n      })]\n    }), /*#__PURE__*/_jsx(Grid, {\n      hasActions: inputs.length - Number(canAdd) > 1,\n      children: inputs\n    }), /*#__PURE__*/_jsx(InputError, {\n      error: error\n    })]\n  });\n}","map":{"version":3,"sources":["/home/runner/work/site/site/common/input/list/ListInputField.tsx"],"names":["React","Fragment","styled","chevron","chevronDown","ActionButtons","Button","InputError","Input","InputConstraint","InputContainer","InputLabel","Grid","div","hasActions","ListInputField","props","id","value","values","onChange","handleChange","label","limit","error","moveUp","index","clone","Array","from","splice","moveDown","removeItem","inputs","map","singular","event","target","blur","copy","icon","handler","length","filter","action","canAdd","push","plural","Number"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\"\nimport styled from \"styled-components\"\nimport { chevron, chevronDown } from \"../../../icons/chevron\"\nimport { Action, ActionButtons } from \"../../layout/ActionButtons\"\nimport { Button } from \"../button/Button\"\nimport { InputError } from \"../error/InputError\"\nimport { Input } from \"../layout/Input\"\nimport { InputConstraint } from \"../layout/InputConstraint\"\nimport { InputContainer } from \"../layout/InputContainer\"\nimport { InputLabel } from \"../layout/InputLabel\"\n\nconst Grid = styled.div<{ hasActions: boolean }>`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n  gap: ${({ hasActions }) => (hasActions ? \"8px 16px\" : \"8px 0\")};\n\n  & ${Button} {\n    margin-left: 0;\n    justify-self: start;\n  }\n`\n\nexport type ListInputFieldProps = {\n  id: string\n  value: string[]\n  onChange: (value: string[]) => void\n  label: {\n    singular: string\n    plural: string\n  }\n  limit?: number\n  error?: string\n}\n\nexport function ListInputField(props: ListInputFieldProps) {\n  const {\n    id,\n    value: values,\n    onChange: handleChange,\n    label,\n    limit,\n    error,\n  } = props\n\n  const moveUp = (index: number) => {\n    const clone = Array.from(values)\n    clone.splice(index - 1, 0, ...clone.splice(index, 1))\n    handleChange(clone)\n  }\n\n  const moveDown = (index: number) => {\n    const clone = Array.from(values)\n    clone.splice(index + 1, 0, ...clone.splice(index, 1))\n    handleChange(clone)\n  }\n\n  const removeItem = (index: number) => {\n    const clone = Array.from(values)\n    clone.splice(index, 1)\n    handleChange(clone)\n  }\n\n  const inputs = values.map((value, index) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <Fragment key={index}>\n      <Input\n        id={`${id}_${index}`}\n        value={value}\n        aria-label={`${label.singular} ${index + 1}`}\n        onChange={event => {\n          if (!event.target.value) {\n            event.target.blur()\n            removeItem(index)\n            return\n          }\n\n          const copy = Array.from(values)\n          copy[index] = event.target.value\n          handleChange(copy)\n        }}\n      />\n      <ActionButtons\n        actions={[\n          index !== 0 && {\n            icon: chevron,\n            label: \"Move up\",\n            handler: () => moveUp(index),\n          },\n          index + 1 !== values.length && {\n            icon: chevronDown,\n            label: \"Move down\",\n            handler: () => moveDown(index),\n          },\n        ].filter((action): action is Action => {\n          return typeof action === \"object\"\n        })}\n      />\n    </Fragment>\n  ))\n\n  const canAdd = !limit || values.length < limit\n  if (canAdd) {\n    inputs.push(\n      <Fragment key={values.length}>\n        <Input\n          id={`${id}_${values.length}`}\n          value=\"\"\n          aria-label={`${label.singular} ${values.length + 1}`}\n          onChange={event => {\n            handleChange([...values, event.target.value])\n          }}\n        />\n      </Fragment>,\n    )\n  }\n\n  return (\n    <InputContainer>\n      <InputLabel>\n        {label.plural}\n        {limit && (\n          <InputConstraint>\n            {values.length}/{limit}\n          </InputConstraint>\n        )}\n      </InputLabel>\n      <Grid hasActions={inputs.length - Number(canAdd) > 1}>{inputs}</Grid>\n      <InputError error={error} />\n    </InputContainer>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}