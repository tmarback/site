{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useObserver } from \"mobx-react-lite\";\nimport { applyPatch } from \"mobx-state-tree\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { PrimaryButton } from \"../../../common/input/button/PrimaryButton\";\nimport { SecondaryButton } from \"../../../common/input/button/SecondaryButton\";\nimport { HiddenInputField } from \"../../../common/input/text/HiddenInputField\";\nimport { IconButton } from \"../../../common/layout/IconButton\";\nimport { Stack } from \"../../../common/layout/Stack\";\nimport { ModalManagerContext } from \"../../../common/modal/ModalManagerContext\";\nimport { useRequiredContext } from \"../../../common/state/useRequiredContext\";\nimport { remove } from \"../../../icons/remove\";\nimport { EditorManagerContext } from \"../EditorManagerContext\";\nimport { NetworkErrorModal } from \"./NetworkErrorModal\";\nconst InputAction = styled(IconButton).withConfig({\n  componentId: \"sc-12rmoi1-0\"\n})([\"margin-left:8px;\"]);\nexport function WebhookControls(props) {\n  const {\n    form\n  } = props;\n  const editorManager = useRequiredContext(EditorManagerContext);\n  const modalManager = useRequiredContext(ModalManagerContext);\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false);\n\n  const handleSubmit = async () => {\n    if (submitting) return;\n    form.validate();\n    if (!form.isValid) return;\n    setSubmitting(true);\n\n    try {\n      await form.save();\n    } catch {\n      modalManager.spawn({\n        render: () => /*#__PURE__*/_jsx(NetworkErrorModal, {})\n      });\n    }\n\n    setSubmitting(false);\n  };\n\n  useEffect(() => {\n    if (editorManager.targets.length > 0) return;\n    applyPatch(form.state.value, [{\n      op: \"add\",\n      path: \"/targets/0\",\n      value: {}\n    }]);\n  });\n  return useObserver(() => {\n    let submitLabel = \"Submit\";\n\n    if (editorManager.messages.every(message => !message.reference)) {\n      submitLabel = \"Send\";\n    } else if (editorManager.messages.every(message => message.reference)) {\n      submitLabel = \"Edit\";\n    }\n\n    return /*#__PURE__*/_jsxs(Stack, {\n      gap: 8,\n      children: [editorManager.targets.map((target, index) => {\n        const targetForm = form.repeatingForm(\"targets\").index(index);\n        return /*#__PURE__*/_jsx(HiddenInputField, _objectSpread(_objectSpread({\n          id: `_${target.id}_url`,\n          label: \"Webhook URL\",\n          hideLabel: index > 0,\n          placeholder: \"https://discord.com/api/webhooks/...\",\n          error: targetForm.field(\"url\").error\n        }, targetForm.field(\"url\").inputProps), {}, {\n          children: index === 0 ? /*#__PURE__*/_jsx(PrimaryButton, {\n            disabled: editorManager.targets.some(target => !target.exists) || editorManager.messages.length === 0,\n            onClick: handleSubmit,\n            children: submitLabel\n          }) : /*#__PURE__*/_jsx(InputAction, {\n            icon: remove,\n            label: \"Remove\",\n            onClick: () => {\n              applyPatch(targetForm.state.value, [{\n                op: \"remove\",\n                path: targetForm.path\n              }]);\n            }\n          })\n        }), target.id);\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(SecondaryButton, {\n          onClick: () => {\n            applyPatch(form.state.value, [{\n              op: \"add\",\n              path: `/targets/${editorManager.targets.length}`,\n              value: {}\n            }]);\n          },\n          children: \"Add Webhook\"\n        })\n      })]\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}