{"ast":null,"code":"import { useEffect, useRef, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport { useLazyValue } from \"../state/useLazyValue\";\nexport const useMeasure = () => {\n  const ref = useRef(null);\n  const {\n    0: bounds,\n    1: setBounds\n  } = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  });\n  const observer = useLazyValue(() => {\n    return new ResizeObserver(([entry]) => setBounds(entry.contentRect));\n  });\n  useEffect(() => {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [observer]);\n  return [ref, bounds];\n};","map":{"version":3,"sources":["/home/runner/work/site/site/common/dom/useMeasure.ts"],"names":["useEffect","useRef","useState","ResizeObserver","useLazyValue","useMeasure","ref","bounds","setBounds","left","top","width","height","observer","entry","contentRect","current","observe","disconnect"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,QAAMC,GAAG,GAAGL,MAAM,CAAQ,IAAR,CAAlB;AAEA,QAAM;AAAA,OAACM,MAAD;AAAA,OAASC;AAAT,MAAsBN,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAhB;AAAmBC,IAAAA,KAAK,EAAE,CAA1B;AAA6BC,IAAAA,MAAM,EAAE;AAArC,GAAD,CAApC;AAEA,QAAMC,QAAQ,GAAGT,YAAY,CAAC,MAAM;AAClC,WAAO,IAAID,cAAJ,CAAmB,CAAC,CAACW,KAAD,CAAD,KAAaN,SAAS,CAACM,KAAK,CAACC,WAAP,CAAzC,CAAP;AACD,GAF4B,CAA7B;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,GAAG,CAACU,OAAR,EAA4B;AAC1BH,MAAAA,QAAQ,CAACI,OAAT,CAAkBX,GAAG,CAACU,OAAtB;AACD;;AAED,WAAO,MAAM;AACXH,MAAAA,QAAQ,CAACK,UAAT;AACD,KAFD;AAGD,GARQ,EAQN,CAACL,QAAD,CARM,CAAT;AAUA,SAAO,CAACP,GAAD,EAAMC,MAAN,CAAP;AACD,CApBM","sourcesContent":["import { useEffect, useRef, useState } from \"react\"\nimport ResizeObserver from \"resize-observer-polyfill\"\nimport { useLazyValue } from \"../state/useLazyValue\"\n\nexport const useMeasure = () => {\n  const ref = useRef<never>(null)\n\n  const [bounds, setBounds] = useState({ left: 0, top: 0, width: 0, height: 0 })\n\n  const observer = useLazyValue(() => {\n    return new ResizeObserver(([entry]) => setBounds(entry.contentRect))\n  })\n\n  useEffect(() => {\n    if (ref.current as unknown) {\n      observer.observe((ref.current as unknown) as Element)\n    }\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [observer])\n\n  return [ref, bounds] as const\n}\n"]},"metadata":{},"sourceType":"module"}