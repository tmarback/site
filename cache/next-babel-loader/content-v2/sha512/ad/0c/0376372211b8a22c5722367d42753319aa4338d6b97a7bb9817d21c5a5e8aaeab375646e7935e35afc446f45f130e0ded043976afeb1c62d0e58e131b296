{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { addDays, getDate, getHours, getMilliseconds, getMinutes, getMonth, getSeconds, isSameDay, isSameMonth, isSunday, isValid, set, startOfMonth, startOfWeek, subWeeks } from \"date-fns\";\nimport React from \"react\";\nimport styled, { css } from \"styled-components\";\nconst CalendarGrid = styled.div.withConfig({\n  componentId: \"sc-1dlmyoi-0\"\n})([\"display:grid;grid-template-columns:repeat(7,1fr);margin-top:4px;\"]);\nconst WeekdayCell = styled.div.withConfig({\n  componentId: \"sc-1dlmyoi-1\"\n})([\"display:flex;align-items:center;justify-content:center;margin:2px;cursor:default;font-size:12px;text-transform:uppercase;\"]);\nconst DayCell = styled.div.withConfig({\n  componentId: \"sc-1dlmyoi-2\"\n})([\"display:flex;align-items:center;justify-content:center;height:24px;margin:2px;background:\", \";border-radius:4px;cursor:default;font-size:16px;\", \";\", \";\"], ({\n  theme\n}) => theme.background.tertiary, ({\n  muted\n}) => muted && css([\"color:\", \";\"], ({\n  theme\n}) => theme.interactive.muted), ({\n  selected\n}) => selected && css([\"background:\", \";\"], ({\n  theme\n}) => theme.background.secondary));\nexport function DayPicker(props) {\n  const {\n    date,\n    onChange: handleChange,\n    month: monthDate\n  } = props;\n  const month = startOfMonth(isValid(monthDate) ? monthDate !== null && monthDate !== void 0 ? monthDate : 0 : Date.now());\n  const firstDay = isSunday(month) ? subWeeks(month, 1) : startOfWeek(month);\n  const days = new Array(7 * 6).fill(0).map((_, days) => set(addDays(firstDay, days), {\n    hours: getHours(date) || 0,\n    minutes: getMinutes(date) || 0,\n    seconds: getSeconds(date) || 0,\n    milliseconds: getMilliseconds(date) || 0\n  }));\n  return /*#__PURE__*/_jsxs(CalendarGrid, {\n    children: [[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map(weekday => /*#__PURE__*/_jsx(WeekdayCell, {\n      children: weekday\n    }, weekday)), days.map(day => /*#__PURE__*/_jsx(DayCell, {\n      muted: !isSameMonth(month, day),\n      selected: isSameDay(date, day),\n      onClick: () => handleChange(day),\n      children: getDate(day)\n    }, `${getMonth(day)}-${getDate(day)}`))]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}