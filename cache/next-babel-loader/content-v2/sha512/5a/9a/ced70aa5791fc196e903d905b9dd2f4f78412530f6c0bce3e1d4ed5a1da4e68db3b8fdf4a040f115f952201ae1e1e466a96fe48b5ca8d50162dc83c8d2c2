{"ast":null,"code":"import _defineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { defaultRules, inlineRegex } from \"simple-markdown\";\nexport const strikethrough = _objectSpread(_objectSpread({}, defaultRules.del), {}, {\n  match: inlineRegex(/^~~([\\S\\s]+?)~~(?!_)/)\n});","map":{"version":3,"sources":["/home/runner/work/site/site/modules/markdown/rules/strikethrough.ts"],"names":["defaultRules","inlineRegex","strikethrough","del","match"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,WAAvB,QAA0C,iBAA1C;AAGA,OAAO,MAAMC,aAA2B,mCACnCF,YAAY,CAACG,GADsB;AAEtCC,EAAAA,KAAK,EAAEH,WAAW,CAAC,sBAAD;AAFoB,EAAjC","sourcesContent":["import { defaultRules, inlineRegex } from \"simple-markdown\"\nimport type { MarkdownRule } from \"../parsers/MarkdownRule\"\n\nexport const strikethrough: MarkdownRule = {\n  ...defaultRules.del,\n  match: inlineRegex(/^~~([\\S\\s]+?)~~(?!_)/),\n}\n"]},"metadata":{},"sourceType":"module"}