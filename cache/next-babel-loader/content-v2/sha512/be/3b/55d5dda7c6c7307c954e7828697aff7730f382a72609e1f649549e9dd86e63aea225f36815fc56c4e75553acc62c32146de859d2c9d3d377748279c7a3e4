{"ast":null,"code":"/* eslint-disable import/no-cycle */\nimport { flow, types } from \"mobx-state-tree\";\nimport { getUniqueId } from \"../../common/state/uid\";\nimport { BRANDED_DEFAULT_AVATAR_URL, DEFAULT_AVATAR_URL, DEFAULT_DISPLAY_NAME, DISCORD_API_HOST_PROMISE, DISCORD_AVATARS_CDN_BASE_URL, MESSAGE_REF_RE } from \"./constants\";\nexport const WebhookModel = types.model(\"WebhookModel\", {\n  id: types.optional(types.identifierNumber, getUniqueId),\n  url: \"\"\n}).volatile(() => ({\n  exists: undefined,\n  snowflake: undefined,\n  name: undefined,\n  avatar: undefined,\n  channelId: undefined,\n  guildId: undefined,\n  token: undefined,\n  thread_id: undefined\n})).views(self => ({\n  get avatarUrl() {\n    if (!self.avatar) return self.avatar;\n    return `${DISCORD_AVATARS_CDN_BASE_URL}/${self.snowflake}/${self.avatar}.png`;\n  },\n\n  get displayName() {\n    var _self$name;\n\n    return (_self$name = self.name) !== null && _self$name !== void 0 ? _self$name : DEFAULT_DISPLAY_NAME;\n  },\n\n  get displayAvatarUrl() {\n    var _this$avatarUrl;\n\n    return (_this$avatarUrl = this.avatarUrl) !== null && _this$avatarUrl !== void 0 ? _this$avatarUrl : self.avatar === null ? DEFAULT_AVATAR_URL : BRANDED_DEFAULT_AVATAR_URL;\n  },\n\n  async getRoute(reference) {\n    const host = await DISCORD_API_HOST_PROMISE;\n    const match = reference && MESSAGE_REF_RE.exec(reference);\n\n    if (match) {\n      const [, messageId] = match;\n      let url = `https://${host}/api/v8/webhooks/${self.snowflake}/${self.token}/messages/${messageId}`;\n\n      if (self.thread_id != null) {\n        url = `${url}?thread_id=${self.thread_id}`;\n      }\n\n      return [\"PATCH\", url];\n    } else {\n      let url = `https://${host}/api/v8/webhooks/${self.snowflake}/${self.token}?wait=true`;\n\n      if (self.thread_id != null) {\n        url = `${url}&thread_id=${self.thread_id}`;\n      }\n\n      return [\"POST\", url];\n    }\n  }\n\n})).actions(self => ({\n  set(key, value) {\n    self[key] = value;\n  },\n\n  fetch: flow(function* () {\n    self.exists = undefined;\n    self.snowflake = undefined;\n    self.name = undefined;\n    self.avatar = undefined;\n    self.channelId = undefined;\n    self.guildId = undefined;\n    self.token = undefined;\n    self.thread_id = undefined;\n\n    try {\n      const url = new URL(self.url);\n      url.host = yield DISCORD_API_HOST_PROMISE;\n      const response = yield fetch(String(url));\n      /* eslint-disable require-atomic-updates */\n\n      if (!response.ok) {\n        self.exists = false;\n        return;\n      }\n\n      const webhook = yield response.json();\n      self.exists = true;\n      self.snowflake = webhook.id;\n      self.name = webhook.name;\n      self.avatar = webhook.avatar;\n      self.channelId = webhook.channel_id;\n      self.guildId = webhook.guild_id;\n      self.token = webhook.token;\n      self.thread_id = url.searchParams.get(\"thread_id\");\n      /* eslint-enable require-atomic-updates */\n    } catch {// do nothing\n    }\n  })\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions","map":{"version":3,"sources":["/home/runner/work/site/site/modules/webhook/WebhookModel.ts"],"names":["flow","types","getUniqueId","BRANDED_DEFAULT_AVATAR_URL","DEFAULT_AVATAR_URL","DEFAULT_DISPLAY_NAME","DISCORD_API_HOST_PROMISE","DISCORD_AVATARS_CDN_BASE_URL","MESSAGE_REF_RE","WebhookModel","model","id","optional","identifierNumber","url","volatile","exists","undefined","snowflake","name","avatar","channelId","guildId","token","thread_id","views","self","avatarUrl","displayName","displayAvatarUrl","getRoute","reference","host","match","exec","messageId","actions","set","key","value","fetch","URL","response","String","ok","webhook","json","channel_id","guild_id","searchParams","get"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n\nimport { flow, Instance, SnapshotOrInstance, types } from \"mobx-state-tree\"\nimport { getUniqueId } from \"../../common/state/uid\"\nimport {\n  BRANDED_DEFAULT_AVATAR_URL,\n  DEFAULT_AVATAR_URL,\n  DEFAULT_DISPLAY_NAME,\n  DISCORD_API_HOST_PROMISE,\n  DISCORD_AVATARS_CDN_BASE_URL,\n  MESSAGE_REF_RE,\n} from \"./constants\"\nimport type { WebhookData } from \"./WebhookData\"\n\nexport const WebhookModel = types\n  .model(\"WebhookModel\", {\n    id: types.optional(types.identifierNumber, getUniqueId),\n    url: \"\",\n  })\n  .volatile(() => ({\n    exists: undefined as boolean | undefined,\n    snowflake: undefined as string | undefined,\n    name: undefined as string | undefined,\n    avatar: undefined as string | null | undefined,\n    channelId: undefined as string | undefined,\n    guildId: undefined as string | undefined,\n    token: undefined as string | undefined,\n    thread_id: undefined as string | null | undefined,\n  }))\n  .views(self => ({\n    get avatarUrl() {\n      if (!self.avatar) return self.avatar\n      return `${DISCORD_AVATARS_CDN_BASE_URL}/${self.snowflake}/${self.avatar}.png`\n    },\n\n    get displayName() {\n      return self.name ?? DEFAULT_DISPLAY_NAME\n    },\n\n    get displayAvatarUrl() {\n      return (\n        this.avatarUrl ??\n        (self.avatar === null ? DEFAULT_AVATAR_URL : BRANDED_DEFAULT_AVATAR_URL)\n      )\n    },\n\n    async getRoute(reference?: string) {\n      const host = await DISCORD_API_HOST_PROMISE\n\n      const match = reference && MESSAGE_REF_RE.exec(reference)\n\n      if (match) {\n        const [, messageId] = match\n\n        let url = `https://${host}/api/v8/webhooks/${self.snowflake}/${self.token}/messages/${messageId}`\n        if (self.thread_id != null) {\n          url = `${url}?thread_id=${self.thread_id}`\n        }\n        return [\n          \"PATCH\",\n          url,\n        ]\n      } else {\n        let url = `https://${host}/api/v8/webhooks/${self.snowflake}/${self.token}?wait=true`\n        if (self.thread_id != null) {\n            url = `${url}&thread_id=${self.thread_id}`\n        }\n        return [\n          \"POST\",\n          url,\n        ]\n      }\n    },\n  }))\n  .actions(self => ({\n    set<K extends keyof typeof self>(\n      key: K,\n      value: SnapshotOrInstance<typeof self[K]>,\n    ) {\n      self[key] = value\n    },\n\n    fetch: flow(function* () {\n      self.exists = undefined\n      self.snowflake = undefined\n      self.name = undefined\n      self.avatar = undefined\n      self.channelId = undefined\n      self.guildId = undefined\n      self.token = undefined\n      self.thread_id = undefined\n\n      try {\n        const url = new URL(self.url)\n        url.host = yield DISCORD_API_HOST_PROMISE\n\n        const response: Response = yield fetch(String(url))\n\n        /* eslint-disable require-atomic-updates */\n\n        if (!response.ok) {\n          self.exists = false\n          return\n        }\n\n        const webhook: WebhookData = yield response.json()\n\n        self.exists = true\n        self.snowflake = webhook.id\n        self.name = webhook.name\n        self.avatar = webhook.avatar\n        self.channelId = webhook.channel_id\n        self.guildId = webhook.guild_id\n        self.token = webhook.token\n        self.thread_id = url.searchParams.get(\"thread_id\")\n\n        /* eslint-enable require-atomic-updates */\n      } catch {\n        // do nothing\n      }\n    }),\n  }))\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions\nexport interface WebhookLike extends Instance<typeof WebhookModel> {}\n"]},"metadata":{},"sourceType":"module"}