{"ast":null,"code":"import { controlled, converters, Field, Form, Group, RepeatingForm, SubForm } from \"mstform\";\nimport { isUrl } from \"../../../common/form/validators/isUrl\";\nimport { matchesRegex } from \"../../../common/form/validators/matchesRegex\";\nimport { maxLength } from \"../../../common/form/validators/maxLength\";\nimport { EditorManager } from \"../../editor/EditorManager\";\nimport { MESSAGE_REF_RE, WEBHOOK_URL_RE } from \"../../webhook/constants\";\nexport const editorForm = new Form(EditorManager, {\n  messages: new RepeatingForm({\n    content: new Field(converters.string, {\n      controlled: controlled.object,\n      validators: [maxLength(2000)]\n    }),\n    username: new Field(converters.string, {\n      controlled: controlled.object,\n      validators: [maxLength(80)]\n    }),\n    avatar: new Field(converters.string, {\n      controlled: controlled.object,\n      validators: [isUrl()]\n    }),\n    embeds: new RepeatingForm({\n      title: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [maxLength(256)]\n      }),\n      description: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [maxLength(4096)]\n      }),\n      url: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [isUrl()]\n      }),\n      color: new SubForm({\n        hue: new Field(converters.object),\n        saturation: new Field(converters.object),\n        value: new Field(converters.object)\n      }),\n      fields: new RepeatingForm({\n        name: new Field(converters.string, {\n          controlled: controlled.object,\n          validators: [maxLength(256)],\n          required: true\n        }),\n        value: new Field(converters.string, {\n          controlled: controlled.object,\n          validators: [maxLength(1024)],\n          required: true\n        }),\n        inline: new Field(converters.boolean, {\n          controlled: controlled.object\n        })\n      }),\n      author: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [maxLength(256)]\n      }),\n      authorUrl: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [isUrl()]\n      }),\n      authorIcon: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [isUrl()]\n      }),\n      footer: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [maxLength(2048)]\n      }),\n      footerIcon: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [isUrl()]\n      }),\n      timestamp: new Field(converters.object),\n      gallery: new Field(converters.stringArray, {\n        controlled: controlled.object,\n        validators: [value => {\n          var _value$map$find;\n\n          const check = isUrl();\n          return (_value$map$find = value.map((value, index) => check(value) ? `Image ${index + 1}: ${check(value)}` : false).find(Boolean)) !== null && _value$map$find !== void 0 ? _value$map$find : false;\n        }]\n      }),\n      thumbnail: new Field(converters.string, {\n        controlled: controlled.object,\n        validators: [isUrl()]\n      })\n    }, {\n      body: new Group({\n        include: [\"title\", \"description\", \"url\", \"color\"]\n      }),\n      author: new Group({\n        include: [\"author\", \"authorUrl\", \"authorIcon\"]\n      }),\n      footer: new Group({\n        include: [\"footer\", \"footerIcon\", \"timestamp\"]\n      }),\n      fields: new Group({\n        include: [\"fields\"]\n      }),\n      images: new Group({\n        include: [\"gallery\", \"thumbnail\"]\n      })\n    }),\n    reference: new Field(converters.string, {\n      controlled: controlled.object,\n      validators: [matchesRegex(MESSAGE_REF_RE, \"Invalid message link\")]\n    })\n  }),\n  targets: new RepeatingForm({\n    url: new Field(converters.string, {\n      controlled: controlled.object,\n      validators: [matchesRegex(WEBHOOK_URL_RE, \"Invalid webhook URL\")]\n    })\n  })\n});\nexport const createEditorForm = state => editorForm.state(state, {\n  backend: {\n    save: async node => node.save(),\n    process: async (node, path) => node.process(path)\n  }\n});\n\nconst repeatingMessageItemFormState = state => state.repeatingForm(\"messages\");\n\nconst messageItemFormState = state => state.index(0);\n\nconst repeatingEmbedItemFormState = state => state.repeatingForm(\"embeds\");\n\nconst embedItemFormState = state => state.index(0);\n\nconst repeatingFieldItemFormState = state => state.repeatingForm(\"fields\");\n\nconst fieldItemFormState = state => state.index(0);\n\nconst repeatingTargetFormState = state => state.repeatingForm(\"messages\");\n\nconst targetFormState = state => state.index(0);","map":null,"metadata":{},"sourceType":"module"}