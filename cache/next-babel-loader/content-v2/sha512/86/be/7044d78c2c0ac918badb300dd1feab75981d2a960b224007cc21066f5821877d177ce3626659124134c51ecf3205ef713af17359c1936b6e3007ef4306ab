{"ast":null,"code":"const MAX_FIELDS_PER_ROW = 3;\nconst FIELD_GRID_SIZE = 12;\nexport const getFieldGridColumn = field => {\n  const embed = field.embed;\n  const fieldIndex = embed.fields.indexOf(field);\n  if (!field.inline) return `1 / ${FIELD_GRID_SIZE + 1}`;\n  let startingField = fieldIndex;\n\n  while (startingField > 0 && embed.fields[startingField - 1].inline) {\n    startingField -= 1;\n  }\n\n  let totalInlineFields = 0;\n\n  while (embed.fields.length > startingField + totalInlineFields && embed.fields[startingField + totalInlineFields].inline) {\n    totalInlineFields += 1;\n  }\n\n  const indexInSequence = fieldIndex - startingField;\n  const currentRow = indexInSequence / MAX_FIELDS_PER_ROW;\n  const indexOnRow = indexInSequence % MAX_FIELDS_PER_ROW;\n  const totalOnLastRow = totalInlineFields % MAX_FIELDS_PER_ROW || MAX_FIELDS_PER_ROW;\n  const fullRows = (totalInlineFields - totalOnLastRow) / MAX_FIELDS_PER_ROW;\n  const totalOnRow = currentRow >= fullRows ? totalOnLastRow : MAX_FIELDS_PER_ROW;\n  const columnSpan = FIELD_GRID_SIZE / totalOnRow;\n  const start = indexOnRow * columnSpan + 1;\n  const end = start + columnSpan;\n  return `${start} / ${end}`;\n};","map":{"version":3,"sources":["/home/runner/work/site/site/modules/message/helpers/getFieldGridColumn.ts"],"names":["MAX_FIELDS_PER_ROW","FIELD_GRID_SIZE","getFieldGridColumn","field","embed","fieldIndex","fields","indexOf","inline","startingField","totalInlineFields","length","indexInSequence","currentRow","indexOnRow","totalOnLastRow","fullRows","totalOnRow","columnSpan","start","end"],"mappings":"AAEA,MAAMA,kBAAkB,GAAG,CAA3B;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAA8B;AAC9D,QAAMC,KAAK,GAAGD,KAAK,CAACC,KAApB;AACA,QAAMC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBJ,KAArB,CAAnB;AAEA,MAAI,CAACA,KAAK,CAACK,MAAX,EAAmB,OAAQ,OAAMP,eAAe,GAAG,CAAE,EAAlC;AAEnB,MAAIQ,aAAa,GAAGJ,UAApB;;AACA,SAAOI,aAAa,GAAG,CAAhB,IAAqBL,KAAK,CAACE,MAAN,CAAaG,aAAa,GAAG,CAA7B,EAAgCD,MAA5D,EAAoE;AAClEC,IAAAA,aAAa,IAAI,CAAjB;AACD;;AAED,MAAIC,iBAAiB,GAAG,CAAxB;;AACA,SACEN,KAAK,CAACE,MAAN,CAAaK,MAAb,GAAsBF,aAAa,GAAGC,iBAAtC,IACAN,KAAK,CAACE,MAAN,CAAaG,aAAa,GAAGC,iBAA7B,EAAgDF,MAFlD,EAGE;AACAE,IAAAA,iBAAiB,IAAI,CAArB;AACD;;AAED,QAAME,eAAe,GAAGP,UAAU,GAAGI,aAArC;AACA,QAAMI,UAAU,GAAGD,eAAe,GAAGZ,kBAArC;AACA,QAAMc,UAAU,GAAGF,eAAe,GAAGZ,kBAArC;AACA,QAAMe,cAAc,GAClBL,iBAAiB,GAAGV,kBAApB,IAA0CA,kBAD5C;AAEA,QAAMgB,QAAQ,GAAG,CAACN,iBAAiB,GAAGK,cAArB,IAAuCf,kBAAxD;AACA,QAAMiB,UAAU,GACdJ,UAAU,IAAIG,QAAd,GAAyBD,cAAzB,GAA0Cf,kBAD5C;AAGA,QAAMkB,UAAU,GAAGjB,eAAe,GAAGgB,UAArC;AACA,QAAME,KAAK,GAAGL,UAAU,GAAGI,UAAb,GAA0B,CAAxC;AACA,QAAME,GAAG,GAAGD,KAAK,GAAGD,UAApB;AAEA,SAAQ,GAAEC,KAAM,MAAKC,GAAI,EAAzB;AACD,CAjCM","sourcesContent":["import type { FieldLike } from \"../state/models/FieldModel\"\n\nconst MAX_FIELDS_PER_ROW = 3\nconst FIELD_GRID_SIZE = 12\n\nexport const getFieldGridColumn = (field: FieldLike): string => {\n  const embed = field.embed\n  const fieldIndex = embed.fields.indexOf(field)\n\n  if (!field.inline) return `1 / ${FIELD_GRID_SIZE + 1}`\n\n  let startingField = fieldIndex\n  while (startingField > 0 && embed.fields[startingField - 1].inline) {\n    startingField -= 1\n  }\n\n  let totalInlineFields = 0\n  while (\n    embed.fields.length > startingField + totalInlineFields &&\n    embed.fields[startingField + totalInlineFields].inline\n  ) {\n    totalInlineFields += 1\n  }\n\n  const indexInSequence = fieldIndex - startingField\n  const currentRow = indexInSequence / MAX_FIELDS_PER_ROW\n  const indexOnRow = indexInSequence % MAX_FIELDS_PER_ROW\n  const totalOnLastRow =\n    totalInlineFields % MAX_FIELDS_PER_ROW || MAX_FIELDS_PER_ROW\n  const fullRows = (totalInlineFields - totalOnLastRow) / MAX_FIELDS_PER_ROW\n  const totalOnRow =\n    currentRow >= fullRows ? totalOnLastRow : MAX_FIELDS_PER_ROW\n\n  const columnSpan = FIELD_GRID_SIZE / totalOnRow\n  const start = indexOnRow * columnSpan + 1\n  const end = start + columnSpan\n\n  return `${start} / ${end}`\n}\n"]},"metadata":{},"sourceType":"module"}