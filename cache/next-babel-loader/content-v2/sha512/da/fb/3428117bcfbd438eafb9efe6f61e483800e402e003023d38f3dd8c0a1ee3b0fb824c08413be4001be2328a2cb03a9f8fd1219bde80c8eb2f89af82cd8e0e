{"ast":null,"code":"import { useEffect } from \"react\";\n\nconst clamp = (number, ...range) => Math.max(Math.min(number, Math.max(...range)), Math.min(...range));\n\nexport const useDragArea = (ref, fn) => {\n  useEffect(() => {\n    const {\n      current: element\n    } = ref;\n    if (!element) return;\n\n    const handleDrag = event => {\n      const {\n        left,\n        top,\n        width,\n        height\n      } = element.getBoundingClientRect();\n      const x = clamp((event.clientX - left) / width, 0, 1);\n      const y = clamp((event.clientY - top) / height, 0, 1);\n      fn(x, y);\n    };\n\n    const handleDragStart = event => {\n      event.preventDefault();\n      handleDrag(event);\n\n      const handleDragEnd = () => {\n        removeEventListener(\"mouseup\", handleDragEnd);\n        removeEventListener(\"mousemove\", handleDrag);\n      };\n\n      addEventListener(\"mousemove\", handleDrag);\n      addEventListener(\"mouseup\", handleDragEnd);\n    };\n\n    element.addEventListener(\"mousedown\", handleDragStart);\n    return () => element.removeEventListener(\"mousedown\", handleDragStart);\n  }, [fn, ref]);\n};","map":{"version":3,"sources":["/home/runner/work/site/site/common/dom/useDragArea.ts"],"names":["useEffect","clamp","number","range","Math","max","min","useDragArea","ref","fn","current","element","handleDrag","event","left","top","width","height","getBoundingClientRect","x","clientX","y","clientY","handleDragStart","preventDefault","handleDragEnd","removeEventListener","addEventListener"],"mappings":"AAAA,SAAoBA,SAApB,QAAqC,OAArC;;AAEA,MAAMC,KAAK,GAAG,CAACC,MAAD,EAAiB,GAAGC,KAApB,KACZC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASJ,MAAT,EAAiBE,IAAI,CAACC,GAAL,CAAS,GAAGF,KAAZ,CAAjB,CAAT,EAA+CC,IAAI,CAACE,GAAL,CAAS,GAAGH,KAAZ,CAA/C,CADF;;AAGA,OAAO,MAAMI,WAAW,GAAG,CACzBC,GADyB,EAEzBC,EAFyB,KAGtB;AACHT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEU,MAAAA,OAAO,EAAEC;AAAX,QAAuBH,GAA7B;AACA,QAAI,CAACG,OAAL,EAAc;;AAEd,UAAMC,UAAU,GAAIC,KAAD,IAAuB;AACxC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,GAAR;AAAaC,QAAAA,KAAb;AAAoBC,QAAAA;AAApB,UAA+BN,OAAO,CAACO,qBAAR,EAArC;AAEA,YAAMC,CAAC,GAAGlB,KAAK,CAAC,CAACY,KAAK,CAACO,OAAN,GAAgBN,IAAjB,IAAyBE,KAA1B,EAAiC,CAAjC,EAAoC,CAApC,CAAf;AACA,YAAMK,CAAC,GAAGpB,KAAK,CAAC,CAACY,KAAK,CAACS,OAAN,GAAgBP,GAAjB,IAAwBE,MAAzB,EAAiC,CAAjC,EAAoC,CAApC,CAAf;AAEAR,MAAAA,EAAE,CAACU,CAAD,EAAIE,CAAJ,CAAF;AACD,KAPD;;AASA,UAAME,eAAe,GAAIV,KAAD,IAAuB;AAC7CA,MAAAA,KAAK,CAACW,cAAN;AAEAZ,MAAAA,UAAU,CAACC,KAAD,CAAV;;AAEA,YAAMY,aAAa,GAAG,MAAM;AAC1BC,QAAAA,mBAAmB,CAAC,SAAD,EAAYD,aAAZ,CAAnB;AACAC,QAAAA,mBAAmB,CAAC,WAAD,EAAcd,UAAd,CAAnB;AACD,OAHD;;AAKAe,MAAAA,gBAAgB,CAAC,WAAD,EAAcf,UAAd,CAAhB;AACAe,MAAAA,gBAAgB,CAAC,SAAD,EAAYF,aAAZ,CAAhB;AACD,KAZD;;AAcAd,IAAAA,OAAO,CAACgB,gBAAR,CAAyB,WAAzB,EAAsCJ,eAAtC;AACA,WAAO,MAAMZ,OAAO,CAACe,mBAAR,CAA4B,WAA5B,EAAyCH,eAAzC,CAAb;AACD,GA7BQ,EA6BN,CAACd,EAAD,EAAKD,GAAL,CA7BM,CAAT;AA8BD,CAlCM","sourcesContent":["import { RefObject, useEffect } from \"react\"\n\nconst clamp = (number: number, ...range: [number, number]) =>\n  Math.max(Math.min(number, Math.max(...range)), Math.min(...range))\n\nexport const useDragArea = (\n  ref: RefObject<HTMLElement>,\n  fn: (x: number, y: number) => void,\n) => {\n  useEffect(() => {\n    const { current: element } = ref\n    if (!element) return\n\n    const handleDrag = (event: MouseEvent) => {\n      const { left, top, width, height } = element.getBoundingClientRect()\n\n      const x = clamp((event.clientX - left) / width, 0, 1)\n      const y = clamp((event.clientY - top) / height, 0, 1)\n\n      fn(x, y)\n    }\n\n    const handleDragStart = (event: MouseEvent) => {\n      event.preventDefault()\n\n      handleDrag(event)\n\n      const handleDragEnd = () => {\n        removeEventListener(\"mouseup\", handleDragEnd)\n        removeEventListener(\"mousemove\", handleDrag)\n      }\n\n      addEventListener(\"mousemove\", handleDrag)\n      addEventListener(\"mouseup\", handleDragEnd)\n    }\n\n    element.addEventListener(\"mousedown\", handleDragStart)\n    return () => element.removeEventListener(\"mousedown\", handleDragStart)\n  }, [fn, ref])\n}\n"]},"metadata":{},"sourceType":"module"}