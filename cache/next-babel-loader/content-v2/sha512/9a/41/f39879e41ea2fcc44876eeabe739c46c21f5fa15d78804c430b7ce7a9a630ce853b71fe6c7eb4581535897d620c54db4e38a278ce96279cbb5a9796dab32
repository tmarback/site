{"ast":null,"code":"/* eslint-disable import/no-cycle */\nimport { flow, types } from \"mobx-state-tree\";\nimport { getUniqueId } from \"../../common/state/uid\";\nimport { BRANDED_DEFAULT_AVATAR_URL, DEFAULT_AVATAR_URL, DEFAULT_DISPLAY_NAME, DISCORD_API_HOST_PROMISE, DISCORD_AVATARS_CDN_BASE_URL, MESSAGE_REF_RE } from \"./constants\";\nexport const WebhookModel = types.model(\"WebhookModel\", {\n  id: types.optional(types.identifierNumber, getUniqueId),\n  url: \"\"\n}).volatile(() => ({\n  exists: undefined,\n  snowflake: undefined,\n  name: undefined,\n  avatar: undefined,\n  channelId: undefined,\n  guildId: undefined,\n  token: undefined,\n  thread_id: undefined\n})).views(self => ({\n  get avatarUrl() {\n    if (!self.avatar) return self.avatar;\n    return `${DISCORD_AVATARS_CDN_BASE_URL}/${self.snowflake}/${self.avatar}.png`;\n  },\n\n  get displayName() {\n    var _self$name;\n\n    return (_self$name = self.name) !== null && _self$name !== void 0 ? _self$name : DEFAULT_DISPLAY_NAME;\n  },\n\n  get displayAvatarUrl() {\n    var _this$avatarUrl;\n\n    return (_this$avatarUrl = this.avatarUrl) !== null && _this$avatarUrl !== void 0 ? _this$avatarUrl : self.avatar === null ? DEFAULT_AVATAR_URL : BRANDED_DEFAULT_AVATAR_URL;\n  },\n\n  async getRoute(reference) {\n    const host = await DISCORD_API_HOST_PROMISE;\n    const match = reference && MESSAGE_REF_RE.exec(reference);\n\n    if (match) {\n      const [, messageId] = match;\n      let url = `https://${host}/api/v8/webhooks/${self.snowflake}/${self.token}/messages/${messageId}`;\n\n      if (self.thread_id != null) {\n        url = `${url}?thread_id=${self.thread_id}`;\n      }\n\n      return [\"PATCH\", url];\n    } else {\n      let url = `https://${host}/api/v8/webhooks/${self.snowflake}/${self.token}?wait=true`;\n\n      if (self.thread_id != null) {\n        url = `${url}&thread_id=${self.thread_id}`;\n      }\n\n      return [\"POST\", url];\n    }\n  }\n\n})).actions(self => ({\n  set(key, value) {\n    self[key] = value;\n  },\n\n  fetch: flow(function* () {\n    self.exists = undefined;\n    self.snowflake = undefined;\n    self.name = undefined;\n    self.avatar = undefined;\n    self.channelId = undefined;\n    self.guildId = undefined;\n    self.token = undefined;\n    self.thread_id = undefined;\n\n    try {\n      const url = new URL(self.url);\n      url.host = yield DISCORD_API_HOST_PROMISE;\n      const response = yield fetch(String(url));\n      /* eslint-disable require-atomic-updates */\n\n      if (!response.ok) {\n        self.exists = false;\n        return;\n      }\n\n      const webhook = yield response.json();\n      self.exists = true;\n      self.snowflake = webhook.id;\n      self.name = webhook.name;\n      self.avatar = webhook.avatar;\n      self.channelId = webhook.channel_id;\n      self.guildId = webhook.guild_id;\n      self.token = webhook.token;\n      self.thread_id = url.searchParams.get(\"thread_id\");\n      /* eslint-enable require-atomic-updates */\n    } catch {// do nothing\n    }\n  })\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions","map":null,"metadata":{},"sourceType":"module"}