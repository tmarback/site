{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { defaultRules, unescapeUrl } from \"simple-markdown\";\nimport { depunycodeUrl } from \"../helpers/depunycodeUrl\";\nexport const link = _objectSpread(_objectSpread({}, defaultRules.link), {}, {\n  parse: (capture, parse, state) => {\n    const [, name, href, title] = capture;\n    const url = unescapeUrl(href);\n    if (!/^https?:\\/\\//i.test(url)) return parse(name, state);\n    const decoded = depunycodeUrl(url);\n\n    if (!decoded) {\n      return {\n        type: \"text\",\n        content: url\n      };\n    }\n\n    const target = decoded;\n    return {\n      content: parse(name, state),\n      target,\n      title\n    };\n  },\n  react: (node, output, state) => /*#__PURE__*/_jsx(\"a\", {\n    href: node.target,\n    title: node.title,\n    rel: \"noopener noreferrer nofollow ugc\",\n    target: \"_blank\",\n    children: output(node.content, state)\n  }, state.key)\n});","map":null,"metadata":{},"sourceType":"module"}