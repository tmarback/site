{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useObserver } from \"mobx-react-lite\";\nimport { applyPatch } from \"mobx-state-tree\";\nimport dynamic from \"next/dynamic\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { PrimaryButton } from \"../../../common/input/button/PrimaryButton\";\nimport { SecondaryButton } from \"../../../common/input/button/SecondaryButton\";\nimport { InputError } from \"../../../common/input/error/InputError\";\nimport { InputField } from \"../../../common/input/text/InputField\";\nimport { ButtonList } from \"../../../common/layout/ButtonList\";\nimport { Stack } from \"../../../common/layout/Stack\";\nimport { ModalManagerContext } from \"../../../common/modal/ModalManagerContext\";\nimport { useRequiredContext } from \"../../../common/state/useRequiredContext\";\nimport { Markdown } from \"../../markdown/Markdown\";\nimport { EditorManagerContext } from \"../EditorManagerContext\";\nimport { EmbedEditor } from \"./EmbedEditor\";\nimport { PrimaryContentEditor } from \"./PrimaryContentEditor\";\nconst DataEditorModal = dynamic(async () => import(\"../data/DataEditorModal\").then(module => module.DataEditorModal), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../data/DataEditorModal\")],\n    modules: [\"../data/DataEditorModal\"]\n  }\n});\nconst Message = styled(Markdown).withConfig({\n  componentId: \"gy799t-0\"\n})([\"margin-top:-8px;font-size:15px;\"]);\nconst EmbedValidationErrorContainer = styled.div.withConfig({\n  componentId: \"gy799t-1\"\n})([\"margin-bottom:8px;&:empty{margin:0;}\"]);\nexport function MessageEditor(props) {\n  const {\n    message,\n    form\n  } = props;\n  const modalManager = useRequiredContext(ModalManagerContext);\n  const editorManager = useRequiredContext(EditorManagerContext);\n\n  const spawnDataEditorModal = () => modalManager.spawn({\n    render: () => /*#__PURE__*/_jsx(DataEditorModal, {\n      message: message\n    })\n  });\n\n  return useObserver(() => /*#__PURE__*/_jsxs(Stack, {\n    gap: 16,\n    children: [/*#__PURE__*/_jsx(PrimaryContentEditor, {\n      message: message,\n      form: form\n    }), message.embeds.length > 0 && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(EmbedValidationErrorContainer, {\n        children: /*#__PURE__*/_jsx(InputError, {\n          error: message.embedLength > 6000 ? \"Embeds exceed 6000 character limit\" : undefined\n        })\n      }), /*#__PURE__*/_jsx(Stack, {\n        gap: 16,\n        children: message.embeds.map((embed, index) => /*#__PURE__*/_jsx(EmbedEditor, {\n          embed: embed,\n          form: form.repeatingForm(\"embeds\").index(index)\n        }, embed.id))\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(PrimaryButton, {\n        disabled: message.size >= 10,\n        onClick: () => {\n          form.repeatingForm(\"embeds\").push({}, [\"timestamp\"]);\n        },\n        children: \"Add Embed\"\n      })\n    }), /*#__PURE__*/_jsx(InputField, _objectSpread({\n      id: `_${message.id}_reference`,\n      label: \"Message Link\",\n      placeholder: \"https://discord.com/channels/...\",\n      error: form.field(\"reference\").error\n    }, form.field(\"reference\").inputProps)), /*#__PURE__*/_jsx(Message, {\n      content: \"*When a message link is set, pressing submit or edit will edit the\" + \" message sent inside of Discord. To load a message sent in Discord, use\" + \" the bot's 'restore' command.*\"\n    }), /*#__PURE__*/_jsxs(ButtonList, {\n      children: [editorManager.messages.length > 1 && /*#__PURE__*/_jsx(SecondaryButton, {\n        onClick: () => {\n          applyPatch(form.state.value, [{\n            op: \"remove\",\n            path: form.path\n          }]);\n        },\n        children: \"Remove Message\"\n      }), /*#__PURE__*/_jsx(SecondaryButton, {\n        onClick: () => spawnDataEditorModal(),\n        children: \"JSON Data Editor\"\n      })]\n    })]\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}