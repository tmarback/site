{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { getHumanReadableSize } from \"../../../modules/message/preview/attachment/helpers/getHumanReadableSize\";\nimport { SCREEN_SMALL } from \"../../layout/breakpoints\";\nimport { FlexContainer } from \"../../layout/FlexContainer\";\nimport { PrimaryButton } from \"../button/PrimaryButton\";\nimport { Input } from \"../layout/Input\";\nimport { InputConstraint } from \"../layout/InputConstraint\";\nimport { InputContainer } from \"../layout/InputContainer\";\nimport { InputLabel } from \"../layout/InputLabel\";\nimport { PasteFileButton } from \"./PasteFileButton\";\nexport const FakeInput = styled(Input).withConfig({\n  componentId: \"sc-3b0b62-0\"\n})([\"flex:1;input:focus + &&{border-color:\", \";}\"], ({\n  theme\n}) => theme.accent.primary);\nconst ClipboardButton = styled(PasteFileButton).withConfig({\n  componentId: \"sc-3b0b62-1\"\n})([\"\", \"{display:none;}\"], SCREEN_SMALL);\nexport function FileInputField(props) {\n  const {\n    id,\n    value,\n    onChange: handleChange,\n    label,\n    disabled = false,\n    maxSize\n  } = props;\n  const inputRef = useRef(null);\n\n  const handleRemoveFiles = () => {\n    if (!inputRef.current) return;\n    inputRef.current.value = \"\";\n    handleChange([]);\n  };\n\n  return /*#__PURE__*/_jsxs(InputContainer, {\n    children: [/*#__PURE__*/_jsxs(InputLabel, {\n      children: [/*#__PURE__*/_jsx(\"label\", {\n        htmlFor: id,\n        children: label\n      }), maxSize && /*#__PURE__*/_jsxs(InputConstraint, {\n        children: [getHumanReadableSize(maxSize), \" max.\"]\n      })]\n    }), /*#__PURE__*/_jsxs(FlexContainer, {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        ref: inputRef,\n        id: id,\n        type: \"file\",\n        multiple: true,\n        disabled: disabled,\n        style: {\n          position: \"absolute\",\n          opacity: 0,\n          pointerEvents: \"none\"\n        },\n        onChange: event => {\n          var _event$target$files;\n\n          handleChange(Array.from((_event$target$files = event.target.files) !== null && _event$target$files !== void 0 ? _event$target$files : []));\n        }\n      }), /*#__PURE__*/_jsx(FakeInput, {\n        value: value.map(file => file.name).join(\", \"),\n        readOnly: true,\n        disabled: disabled,\n        tabIndex: -1,\n        style: {\n          cursor: \"default\"\n        },\n        onClick: () => {\n          var _inputRef$current;\n\n          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();\n        }\n      }), /*#__PURE__*/_jsx(ClipboardButton, {\n        onChange: handleChange,\n        disabled: disabled\n      }), /*#__PURE__*/_jsx(PrimaryButton, {\n        onClick: handleRemoveFiles,\n        disabled: disabled,\n        children: \"Clear\"\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}