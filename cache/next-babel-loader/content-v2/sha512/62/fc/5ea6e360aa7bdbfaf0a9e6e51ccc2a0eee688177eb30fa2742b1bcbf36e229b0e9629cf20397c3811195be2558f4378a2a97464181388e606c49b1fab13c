{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { ErrorPage } from \"./ErrorPage\";\nexport class ErrorBoundary extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      caughtError: {\n        error,\n        info\n      }\n    });\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      caughtError\n    } = this.state;\n\n    if (caughtError) {\n      return /*#__PURE__*/_jsx(ErrorPage, _objectSpread({}, caughtError));\n    }\n\n    return children;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}