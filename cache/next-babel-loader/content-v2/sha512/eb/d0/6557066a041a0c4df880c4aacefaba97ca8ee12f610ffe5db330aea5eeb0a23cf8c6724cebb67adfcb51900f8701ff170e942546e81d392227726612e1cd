{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { InputContainer } from \"../layout/InputContainer\";\nimport { InputLabel } from \"../layout/InputLabel\";\nimport { Handle, Input, Marker, MarkerLabel, Range, Track } from \"./layout\";\nexport function Slider(props) {\n  const {\n    id,\n    label,\n    value,\n    onChange: handleChange,\n    min,\n    max,\n    step,\n    markers,\n    getValueName\n  } = props;\n  return /*#__PURE__*/_jsxs(InputContainer, {\n    children: [/*#__PURE__*/_jsx(InputLabel, {\n      children: label\n    }), /*#__PURE__*/_jsx(Input, {\n      id: id,\n      min: min,\n      max: max,\n      step: step,\n      value: value,\n      getAriaLabel: () => label,\n      getAriaValueText: getValueName,\n      hasMarkers: Number(markers === null || markers === void 0 ? void 0 : markers.length) > 0,\n      onChange: value => handleChange(value),\n      children: ({\n        hasFocus\n      }) => /*#__PURE__*/_jsxs(Track, {\n        children: [/*#__PURE__*/_jsx(Range, {}), markers === null || markers === void 0 ? void 0 : markers.map(marker => /*#__PURE__*/_jsx(Marker, {\n          value: marker.value,\n          children: /*#__PURE__*/_jsx(MarkerLabel, {\n            children: marker.label\n          })\n        }, marker.value)), /*#__PURE__*/_jsx(Handle, {\n          hasFocus: hasFocus\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"sources":["/home/runner/work/site/site/common/input/slider/Slider.tsx"],"names":["React","InputContainer","InputLabel","Handle","Input","Marker","MarkerLabel","Range","Track","Slider","props","id","label","value","onChange","handleChange","min","max","step","markers","getValueName","Number","length","hasFocus","map","marker"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,WAAhC,EAA6CC,KAA7C,EAAoDC,KAApD,QAAiE,UAAjE;AAcA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAoC;AACzC,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,QAAQ,EAAEC,YAJN;AAKJC,IAAAA,GALI;AAMJC,IAAAA,GANI;AAOJC,IAAAA,IAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA;AATI,MAUFV,KAVJ;AAYA,sBACE,MAAC,cAAD;AAAA,4BACE,KAAC,UAAD;AAAA,gBAAaE;AAAb,MADF,eAEE,KAAC,KAAD;AACE,MAAA,EAAE,EAAED,EADN;AAEE,MAAA,GAAG,EAAEK,GAFP;AAGE,MAAA,GAAG,EAAEC,GAHP;AAIE,MAAA,IAAI,EAAEC,IAJR;AAKE,MAAA,KAAK,EAAEL,KALT;AAME,MAAA,YAAY,EAAE,MAAMD,KANtB;AAOE,MAAA,gBAAgB,EAAEQ,YAPpB;AAQE,MAAA,UAAU,EAAEC,MAAM,CAACF,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEG,MAAV,CAAN,GAA0B,CARxC;AASE,MAAA,QAAQ,EAAET,KAAK,IAAIE,YAAY,CAACF,KAAD,CATjC;AAAA,gBAWG,CAAC;AAAEU,QAAAA;AAAF,OAAD,kBACC,MAAC,KAAD;AAAA,gCACE,KAAC,KAAD,KADF,EAEGJ,OAFH,aAEGA,OAFH,uBAEGA,OAAO,CAAEK,GAAT,CAAaC,MAAM,iBAClB,KAAC,MAAD;AAA2B,UAAA,KAAK,EAAEA,MAAM,CAACZ,KAAzC;AAAA,iCACE,KAAC,WAAD;AAAA,sBAAcY,MAAM,CAACb;AAArB;AADF,WAAaa,MAAM,CAACZ,KAApB,CADD,CAFH,eAOE,KAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEU;AAAlB,UAPF;AAAA;AAZJ,MAFF;AAAA,IADF;AA4BD","sourcesContent":["import React from \"react\"\nimport { InputContainer } from \"../layout/InputContainer\"\nimport { InputLabel } from \"../layout/InputLabel\"\nimport { Handle, Input, Marker, MarkerLabel, Range, Track } from \"./layout\"\n\nexport type SliderProps = {\n  id: string\n  label: string\n  value: number\n  onChange: (value: number) => void\n  min: number\n  max: number\n  step?: number\n  markers?: { value: number; label: string }[]\n  getValueName?: (value: number) => string\n}\n\nexport function Slider(props: SliderProps) {\n  const {\n    id,\n    label,\n    value,\n    onChange: handleChange,\n    min,\n    max,\n    step,\n    markers,\n    getValueName,\n  } = props\n\n  return (\n    <InputContainer>\n      <InputLabel>{label}</InputLabel>\n      <Input\n        id={id}\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        getAriaLabel={() => label}\n        getAriaValueText={getValueName}\n        hasMarkers={Number(markers?.length) > 0}\n        onChange={value => handleChange(value)}\n      >\n        {({ hasFocus }) => (\n          <Track>\n            <Range />\n            {markers?.map(marker => (\n              <Marker key={marker.value} value={marker.value}>\n                <MarkerLabel>{marker.label}</MarkerLabel>\n              </Marker>\n            ))}\n            <Handle hasFocus={hasFocus} />\n          </Track>\n        )}\n      </Input>\n    </InputContainer>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}