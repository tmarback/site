{"ast":null,"code":"import _objectWithoutProperties from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-await-in-loop */\nimport { toSnakeCase } from \"../../../common/object/toSnakeCase\";\nexport const upgradeDatabase = async (database, transaction, oldVersion) => {\n  if (oldVersion < 2 && oldVersion >= 1) {\n    let cursor = await transaction.objectStore(\"backups\").openCursor();\n\n    while (cursor) {\n      await cursor.update({\n        name: cursor.key,\n        message: cursor.value\n      });\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 3) {\n    database.createObjectStore(\"backup\", {\n      keyPath: \"id\",\n      autoIncrement: true\n    });\n    const backupStore = transaction.objectStore(\"backup\");\n    backupStore.createIndex(\"name\", \"name\", {\n      unique: true\n    });\n  }\n\n  if (oldVersion < 4 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    const existingBackups = new Set();\n    let nameCursor = await backupStore.index(\"name\").openKeyCursor();\n\n    while (nameCursor) {\n      existingBackups.add(nameCursor.key);\n      nameCursor = await nameCursor.continue();\n    }\n\n    let cursor = await transaction.objectStore(\"backups\").openCursor();\n\n    while (cursor) {\n      if (!existingBackups.has(cursor.key)) {\n        await backupStore.put(_objectSpread(_objectSpread({}, cursor.value), {}, {\n          name: cursor.key,\n          message: toSnakeCase(cursor.value.message)\n        }));\n      }\n\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 5 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    let cursor = await backupStore.openCursor();\n\n    while (cursor) {\n      const _cursor$value = cursor.value,\n            {\n        message\n      } = _cursor$value,\n            rest = _objectWithoutProperties(_cursor$value, [\"message\"]);\n\n      await backupStore.put(_objectSpread(_objectSpread({}, rest), {}, {\n        messages: [message]\n      }));\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 6 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    let cursor = await backupStore.openCursor();\n\n    while (cursor) {\n      const _cursor$value2 = cursor.value,\n            {\n        webhookUrl\n      } = _cursor$value2,\n            rest = _objectWithoutProperties(_cursor$value2, [\"webhookUrl\"]);\n\n      await backupStore.put(_objectSpread(_objectSpread({}, rest), {}, {\n        target: {\n          url: webhookUrl\n        }\n      }));\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 9 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    let cursor = await backupStore.openCursor();\n\n    while (cursor) {\n      const {\n        id,\n        name,\n        messages,\n        target\n      } = cursor.value;\n\n      if (name) {\n        await backupStore.put({\n          id,\n          name,\n          messages: messages.map(data => ({\n            data: \"data\" in data ? data.data : data,\n            reference: \"reference\" in data ? data.reference : target.message\n          })),\n          target: {\n            url: target.url\n          }\n        });\n      } else {\n        await backupStore.delete(id);\n      }\n\n      cursor = await cursor.continue();\n    }\n  }\n\n  if (oldVersion < 10 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\");\n    let cursor = await backupStore.openCursor();\n\n    while (cursor) {\n      var _target$url;\n\n      const _cursor$value3 = cursor.value,\n            {\n        target\n      } = _cursor$value3,\n            backup = _objectWithoutProperties(_cursor$value3, [\"target\"]);\n\n      await backupStore.put(_objectSpread(_objectSpread({}, backup), {}, {\n        targets: [{\n          url: (_target$url = target.url) !== null && _target$url !== void 0 ? _target$url : \"\"\n        }]\n      }));\n      cursor = await cursor.continue();\n    }\n  }\n};","map":{"version":3,"sources":["/home/runner/work/site/site/modules/database/connection/upgradeDatabase.ts"],"names":["toSnakeCase","upgradeDatabase","database","transaction","oldVersion","cursor","objectStore","openCursor","update","name","key","message","value","continue","createObjectStore","keyPath","autoIncrement","backupStore","createIndex","unique","existingBackups","Set","nameCursor","index","openKeyCursor","add","has","put","rest","messages","webhookUrl","target","url","id","map","data","reference","delete","backup","targets"],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n\nimport type { IDBPDatabase, IDBPTransaction } from \"idb\"\nimport { toSnakeCase } from \"../../../common/object/toSnakeCase\"\n\nexport const upgradeDatabase = async (\n  database: IDBPDatabase,\n  transaction: IDBPTransaction<unknown, string[], \"versionchange\">,\n  oldVersion: number,\n) => {\n  if (oldVersion < 2 && oldVersion >= 1) {\n    let cursor = await transaction.objectStore(\"backups\").openCursor()\n\n    while (cursor) {\n      await cursor.update({\n        name: cursor.key,\n        message: cursor.value,\n      })\n\n      cursor = await cursor.continue()\n    }\n  }\n\n  if (oldVersion < 3) {\n    database.createObjectStore(\"backup\", {\n      keyPath: \"id\",\n      autoIncrement: true,\n    })\n\n    const backupStore = transaction.objectStore(\"backup\")\n    backupStore.createIndex(\"name\", \"name\", {\n      unique: true,\n    })\n  }\n\n  if (oldVersion < 4 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\")\n\n    const existingBackups = new Set<IDBValidKey>()\n    let nameCursor = await backupStore.index(\"name\").openKeyCursor()\n\n    while (nameCursor) {\n      existingBackups.add(nameCursor.key)\n      nameCursor = await nameCursor.continue()\n    }\n\n    let cursor = await transaction.objectStore(\"backups\").openCursor()\n\n    while (cursor) {\n      if (!existingBackups.has(cursor.key)) {\n        await backupStore.put({\n          ...cursor.value,\n          name: cursor.key,\n          message: toSnakeCase(cursor.value.message),\n        })\n      }\n\n      cursor = await cursor.continue()\n    }\n  }\n\n  if (oldVersion < 5 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\")\n\n    let cursor = await backupStore.openCursor()\n\n    while (cursor) {\n      const { message, ...rest } = cursor.value\n\n      await backupStore.put({\n        ...rest,\n        messages: [message],\n      })\n\n      cursor = await cursor.continue()\n    }\n  }\n\n  if (oldVersion < 6 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\")\n\n    let cursor = await backupStore.openCursor()\n\n    while (cursor) {\n      const { webhookUrl, ...rest } = cursor.value\n\n      await backupStore.put({\n        ...rest,\n        target: {\n          url: webhookUrl,\n        },\n      })\n\n      cursor = await cursor.continue()\n    }\n  }\n\n  if (oldVersion < 9 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\")\n\n    let cursor = await backupStore.openCursor()\n\n    while (cursor) {\n      const { id, name, messages, target } = cursor.value\n\n      if (name) {\n        await backupStore.put({\n          id,\n          name,\n          messages: messages.map((data: Record<string, unknown>) => ({\n            data: \"data\" in data ? data.data : data,\n            reference: \"reference\" in data ? data.reference : target.message,\n          })),\n          target: {\n            url: target.url,\n          },\n        })\n      } else {\n        await backupStore.delete(id)\n      }\n\n      cursor = await cursor.continue()\n    }\n  }\n\n  if (oldVersion < 10 && oldVersion >= 1) {\n    const backupStore = transaction.objectStore(\"backup\")\n\n    let cursor = await backupStore.openCursor()\n\n    while (cursor) {\n      const { target, ...backup } = cursor.value\n\n      await backupStore.put({\n        ...backup,\n        targets: [{ url: target.url ?? \"\" }],\n      })\n\n      cursor = await cursor.continue()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}