{"ast":null,"code":"import { getDate, getMonth, getYear, isValid } from \"date-fns\";\nconst ONE_DAY = 1000 * 60 * 60 * 24;\n\nconst getTimestampFormat = (date, base) => {\n  const givenDate = new Date(date).setHours(0, 0, 0, 0);\n  const now = new Date(base !== null && base !== void 0 ? base : Date.now()).setHours(0, 0, 0, 0);\n  const difference = (givenDate - now) / ONE_DAY;\n  if (difference < -1) return \"full\";\n  if (difference < 0) return \"yesterday\";\n  if (difference < 1) return \"today\";\n  if (difference < 2) return \"tomorrow\";\n  return \"full\";\n};\n\nexport const formatTimestamp = (date, base) => {\n  if (!isValid(date)) return \"Invalid date\";\n  const day = String(getDate(date)).padStart(2, \"0\");\n  const month = String(getMonth(date) + 1).padStart(2, \"0\");\n  const year = getYear(date);\n  const time = date.toLocaleString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"numeric\",\n    hour12: true\n  });\n\n  switch (getTimestampFormat(date, base)) {\n    case \"yesterday\":\n      {\n        return `Yesterday at ${time}`;\n      }\n\n    case \"today\":\n      {\n        return `Today at ${time}`;\n      }\n\n    case \"tomorrow\":\n      {\n        return `Tomorrow at ${time}`;\n      }\n\n    default:\n      {\n        return `${day}/${month}/${year}`;\n      }\n  }\n};","map":{"version":3,"sources":["/home/runner/work/site/site/modules/message/preview/formatTimestamp.ts"],"names":["getDate","getMonth","getYear","isValid","ONE_DAY","getTimestampFormat","date","base","givenDate","Date","setHours","now","difference","formatTimestamp","day","String","padStart","month","year","time","toLocaleString","hour","minute","hour12"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,OAA5B,EAAqCC,OAArC,QAAoD,UAApD;AAEA,MAAMC,OAAO,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjC;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,IAAD,EAAaC,IAAb,KAA6B;AACtD,QAAMC,SAAS,GAAG,IAAIC,IAAJ,CAASH,IAAT,EAAeI,QAAf,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,CAAlB;AACA,QAAMC,GAAG,GAAG,IAAIF,IAAJ,CAASF,IAAT,aAASA,IAAT,cAASA,IAAT,GAAiBE,IAAI,CAACE,GAAL,EAAjB,EAA6BD,QAA7B,CAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAAZ;AAEA,QAAME,UAAU,GAAG,CAACJ,SAAS,GAAGG,GAAb,IAAoBP,OAAvC;AAEA,MAAIQ,UAAU,GAAG,CAAC,CAAlB,EAAqB,OAAO,MAAP;AACrB,MAAIA,UAAU,GAAG,CAAjB,EAAoB,OAAO,WAAP;AACpB,MAAIA,UAAU,GAAG,CAAjB,EAAoB,OAAO,OAAP;AACpB,MAAIA,UAAU,GAAG,CAAjB,EAAoB,OAAO,UAAP;AACpB,SAAO,MAAP;AACD,CAXD;;AAaA,OAAO,MAAMC,eAAe,GAAG,CAACP,IAAD,EAAaC,IAAb,KAA6B;AAC1D,MAAI,CAACJ,OAAO,CAACG,IAAD,CAAZ,EAAoB,OAAO,cAAP;AAEpB,QAAMQ,GAAG,GAAGC,MAAM,CAACf,OAAO,CAACM,IAAD,CAAR,CAAN,CAAsBU,QAAtB,CAA+B,CAA/B,EAAkC,GAAlC,CAAZ;AACA,QAAMC,KAAK,GAAGF,MAAM,CAACd,QAAQ,CAACK,IAAD,CAAR,GAAiB,CAAlB,CAAN,CAA2BU,QAA3B,CAAoC,CAApC,EAAuC,GAAvC,CAAd;AACA,QAAME,IAAI,GAAGhB,OAAO,CAACI,IAAD,CAApB;AAEA,QAAMa,IAAI,GAAGb,IAAI,CAACc,cAAL,CAAoB,OAApB,EAA6B;AACxCC,IAAAA,IAAI,EAAE,SADkC;AAExCC,IAAAA,MAAM,EAAE,SAFgC;AAGxCC,IAAAA,MAAM,EAAE;AAHgC,GAA7B,CAAb;;AAMA,UAAQlB,kBAAkB,CAACC,IAAD,EAAOC,IAAP,CAA1B;AACE,SAAK,WAAL;AAAkB;AAChB,eAAQ,gBAAeY,IAAK,EAA5B;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,eAAQ,YAAWA,IAAK,EAAxB;AACD;;AACD,SAAK,UAAL;AAAiB;AACf,eAAQ,eAAcA,IAAK,EAA3B;AACD;;AACD;AAAS;AACP,eAAQ,GAAEL,GAAI,IAAGG,KAAM,IAAGC,IAAK,EAA/B;AACD;AAZH;AAcD,CA3BM","sourcesContent":["import { getDate, getMonth, getYear, isValid } from \"date-fns\"\n\nconst ONE_DAY = 1000 * 60 * 60 * 24\n\nconst getTimestampFormat = (date: Date, base?: Date) => {\n  const givenDate = new Date(date).setHours(0, 0, 0, 0)\n  const now = new Date(base ?? Date.now()).setHours(0, 0, 0, 0)\n\n  const difference = (givenDate - now) / ONE_DAY\n\n  if (difference < -1) return \"full\"\n  if (difference < 0) return \"yesterday\"\n  if (difference < 1) return \"today\"\n  if (difference < 2) return \"tomorrow\"\n  return \"full\"\n}\n\nexport const formatTimestamp = (date: Date, base?: Date) => {\n  if (!isValid(date)) return \"Invalid date\"\n\n  const day = String(getDate(date)).padStart(2, \"0\")\n  const month = String(getMonth(date) + 1).padStart(2, \"0\")\n  const year = getYear(date)\n\n  const time = date.toLocaleString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"numeric\",\n    hour12: true,\n  })\n\n  switch (getTimestampFormat(date, base)) {\n    case \"yesterday\": {\n      return `Yesterday at ${time}`\n    }\n    case \"today\": {\n      return `Today at ${time}`\n    }\n    case \"tomorrow\": {\n      return `Tomorrow at ${time}`\n    }\n    default: {\n      return `${day}/${month}/${year}`\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}