{"ast":null,"code":"import { SERIALISED_EMOJI_DATA } from \"./serialisedEmojiData\";\nimport { SKIN_TONES, TONE_NAMES, TONE_NUMBERS } from \"./skinTones\"; // Flag reference:\n// + = include ::skin-tone-x\n// # = include _tonex\n// ! = include _x_skin_tone\n// * = skip alias as global\n\nconst EMOJI = SERIALISED_EMOJI_DATA.split(\"\\n\").map(line => {\n  const [emoji, ...names] = line.split(\" \");\n  return {\n    emoji: emoji.split(\"/\")[0],\n    flags: emoji.split(\"/\")[1],\n    aliases: names.map(name => ({\n      name: name.split(\"/\")[0],\n      flags: name.split(\"/\")[1]\n    }))\n  };\n});\nconst ZWJ = String.fromCodePoint(0x200d);\nconst MAN = \"üë®\";\nconst WOMAN = \"üë©\";\nconst PERSON = \"üßë\";\nconst HANDSHAKE = \"ü§ù\";\nconst NAME_TO_EMOJI = new Map();\nconst EMOJI_TO_NAME = new Map();\n\nfor (const {\n  emoji,\n  flags,\n  aliases\n} of EMOJI) {\n  EMOJI_TO_NAME.set(emoji, aliases[0].name);\n\n  if (flags !== null && flags !== void 0 && flags.includes(\"+\")) {\n    for (const [number, diversity] of Object.entries(TONE_NUMBERS)) {\n      EMOJI_TO_NAME.set(emoji + diversity, `${aliases[0].name}_tone${number}`);\n    }\n  }\n\n  for (const alias of aliases) {\n    var _alias$flags, _alias$flags2, _alias$flags3;\n\n    if (!((_alias$flags = alias.flags) !== null && _alias$flags !== void 0 && _alias$flags.includes(\"*\"))) {\n      NAME_TO_EMOJI.set(alias.name, emoji);\n    }\n\n    if (flags !== null && flags !== void 0 && flags.includes(\"+\")) {\n      for (const [number, diversity] of Object.entries(TONE_NUMBERS)) {\n        NAME_TO_EMOJI.set(`${alias.name}::skin-tone-${number}`, emoji + diversity);\n      }\n    }\n\n    if ((_alias$flags2 = alias.flags) !== null && _alias$flags2 !== void 0 && _alias$flags2.includes(\"#\")) {\n      for (const [id, diversity] of Object.entries(TONE_NUMBERS)) {\n        NAME_TO_EMOJI.set(`${alias.name}_tone${id}`, emoji + diversity);\n      }\n    }\n\n    if ((_alias$flags3 = alias.flags) !== null && _alias$flags3 !== void 0 && _alias$flags3.includes(\"!\")) {\n      for (const [number, diversity] of Object.entries(TONE_NAMES)) {\n        NAME_TO_EMOJI.set(`${alias.name}_${number}_skin_tone`, emoji + diversity);\n      }\n    }\n  }\n}\n\nfor (const {\n  unicode: toneA,\n  number: numberA,\n  name: nameA\n} of SKIN_TONES) {\n  const idSuffix = `_tone${numberA}`;\n  const nameSuffix = `_${nameA}_skin_tone`;\n  const toneSuffix = `::skin-tone-${numberA}`;\n  const womanAndMan = `üë´${toneA}`;\n  const womanAndManName = \"woman_and_man_holding_hands\";\n  EMOJI_TO_NAME.set(womanAndMan, womanAndManName + idSuffix);\n  NAME_TO_EMOJI.set(womanAndManName + idSuffix, womanAndMan);\n  NAME_TO_EMOJI.set(womanAndManName + nameSuffix, womanAndMan);\n  NAME_TO_EMOJI.set(`couple${toneSuffix}`, womanAndMan);\n  const men = `üë¨${toneA}`;\n  const menName = \"men_holding_hands\";\n  EMOJI_TO_NAME.set(men, menName + idSuffix);\n  NAME_TO_EMOJI.set(menName + idSuffix, men);\n  NAME_TO_EMOJI.set(menName + nameSuffix, men);\n  NAME_TO_EMOJI.set(`two_${menName}${toneSuffix}`, men);\n  const women = `üë≠${toneA}`;\n  const womenName = \"women_holding_hands\";\n  EMOJI_TO_NAME.set(women, womenName + idSuffix);\n  NAME_TO_EMOJI.set(womenName + idSuffix, women);\n  NAME_TO_EMOJI.set(womenName + nameSuffix, women);\n  NAME_TO_EMOJI.set(`two_${womenName}${toneSuffix}`, women);\n  const people = PERSON + toneA + ZWJ + HANDSHAKE + ZWJ + PERSON + toneA;\n  const peopleName = \"people_holding_hands\";\n  EMOJI_TO_NAME.set(people, peopleName + idSuffix);\n  NAME_TO_EMOJI.set(peopleName + idSuffix, people);\n  NAME_TO_EMOJI.set(peopleName + nameSuffix, people);\n  NAME_TO_EMOJI.set(peopleName + toneSuffix, people);\n\n  for (const {\n    unicode: toneB,\n    number: numberB,\n    name: nameB\n  } of SKIN_TONES) {\n    if (numberA <= numberB) continue;\n    const idSuffix = `_tone${numberA}_tone${numberB}`;\n    const nameSuffix = `_${nameA}_skin_tone_${nameB}_skin_tone`;\n    const womanAndMan = WOMAN + toneA + ZWJ + HANDSHAKE + ZWJ + MAN + toneB;\n    EMOJI_TO_NAME.set(womanAndMan, womanAndManName + idSuffix);\n    NAME_TO_EMOJI.set(womanAndManName + idSuffix, womanAndMan);\n    NAME_TO_EMOJI.set(womanAndManName + nameSuffix, womanAndMan);\n    const men = MAN + toneA + ZWJ + HANDSHAKE + ZWJ + MAN + toneB;\n    EMOJI_TO_NAME.set(men, menName + idSuffix);\n    NAME_TO_EMOJI.set(menName + idSuffix, men);\n    NAME_TO_EMOJI.set(menName + nameSuffix, men);\n    const women = WOMAN + toneA + ZWJ + HANDSHAKE + ZWJ + WOMAN + toneB;\n    EMOJI_TO_NAME.set(women, womenName + idSuffix);\n    NAME_TO_EMOJI.set(womenName + idSuffix, women);\n    NAME_TO_EMOJI.set(womenName + nameSuffix, women);\n    const people = PERSON + toneA + ZWJ + HANDSHAKE + ZWJ + PERSON + toneB;\n    EMOJI_TO_NAME.set(people, peopleName + idSuffix);\n    NAME_TO_EMOJI.set(peopleName + idSuffix, people);\n    NAME_TO_EMOJI.set(peopleName + nameSuffix, people);\n  }\n}\n\nexport { NAME_TO_EMOJI, EMOJI_TO_NAME };","map":null,"metadata":{},"sourceType":"module"}