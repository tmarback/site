{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useObserver } from \"mobx-react-lite\";\nimport { applyPatch, getSnapshot } from \"mobx-state-tree\";\nimport { FieldAccessor } from \"mstform\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Checkbox } from \"../../../common/input/checkable/Checkbox\";\nimport { InputField } from \"../../../common/input/text/InputField\";\nimport { Section } from \"../../../common/layout/Section\";\nimport { Stack } from \"../../../common/layout/Stack\";\nimport { chevron, chevronDown } from \"../../../icons/chevron\";\nimport { copy } from \"../../../icons/copy\";\nimport { remove } from \"../../../icons/remove\";\nconst InlineCheckbox = styled(Checkbox).withConfig({\n  componentId: \"sc-1vw8qxe-0\"\n})([\"margin-left:12px;\"]);\nexport function EmbedFieldEditor(props) {\n  const {\n    field,\n    form\n  } = props;\n  const name = useObserver(() => {\n    let name = `Field ${form.index + 1}`;\n\n    if (field.displayName) {\n      name += ` â€” ${field.displayName}`;\n    }\n\n    return name;\n  });\n  return useObserver(() => /*#__PURE__*/_jsx(Section, {\n    name: name,\n    actions: [form.index !== 0 && {\n      icon: chevron,\n      label: \"Move up\",\n      handler: () => {\n        var _form$parent;\n\n        applyPatch(form.state.value, [{\n          op: \"remove\",\n          path: form.path\n        }, {\n          op: \"add\",\n          path: `${(_form$parent = form.parent) === null || _form$parent === void 0 ? void 0 : _form$parent.path}/${form.index - 1}`,\n          value: getSnapshot(field)\n        }]);\n        const parent = form.parent;\n\n        for (const accessor of parent.index(form.index - 1).flatAccessors) {\n          if (accessor instanceof FieldAccessor) {\n            accessor.setRawFromValue();\n          }\n        }\n      }\n    }, form.index !== field.embed.fields.length - 1 && {\n      icon: chevronDown,\n      label: \"Move down\",\n      handler: () => {\n        var _form$parent2;\n\n        applyPatch(form.state.value, [{\n          op: \"remove\",\n          path: form.path\n        }, {\n          op: \"add\",\n          path: `${(_form$parent2 = form.parent) === null || _form$parent2 === void 0 ? void 0 : _form$parent2.path}/${form.index + 1}`,\n          value: getSnapshot(field)\n        }]);\n        const parent = form.parent;\n\n        for (const accessor of parent.index(form.index + 1).flatAccessors) {\n          if (accessor instanceof FieldAccessor) {\n            accessor.setRawFromValue();\n          }\n        }\n      }\n    }, field.embed.fields.length < 25 && {\n      icon: copy,\n      label: \"Duplicate\",\n      handler: () => {\n        var _form$parent3;\n\n        applyPatch(form.state.value, [{\n          op: \"add\",\n          path: `${(_form$parent3 = form.parent) === null || _form$parent3 === void 0 ? void 0 : _form$parent3.path}/${form.index + 1}`,\n          value: _objectSpread(_objectSpread({}, getSnapshot(field)), {}, {\n            id: undefined\n          })\n        }]);\n        const parent = form.parent;\n\n        for (const accessor of parent.index(form.index + 1).flatAccessors) {\n          if (accessor instanceof FieldAccessor) {\n            accessor.setRawFromValue();\n          }\n        }\n      }\n    }, {\n      icon: remove,\n      label: \"Remove\",\n      handler: () => {\n        applyPatch(form.state.value, [{\n          op: \"remove\",\n          path: form.path\n        }]);\n      }\n    }].filter(item => typeof item === \"object\"),\n    hasError: !form.isValid,\n    children: /*#__PURE__*/_jsxs(Stack, {\n      gap: 12,\n      children: [/*#__PURE__*/_jsx(InputField, _objectSpread(_objectSpread({\n        id: `_${field.id}_name`,\n        label: \"Field Name\",\n        maxLength: 256,\n        required: true,\n        rows: 1,\n        error: form.field(\"name\").error\n      }, form.field(\"name\").inputProps), {}, {\n        children: /*#__PURE__*/_jsx(InlineCheckbox, _objectSpread({\n          id: `_${field.id}_inline`,\n          label: \"Inline\"\n        }, form.field(\"inline\").inputProps))\n      })), /*#__PURE__*/_jsx(InputField, _objectSpread({\n        id: `_${field.id}_value`,\n        label: \"Field Value\",\n        maxLength: 1024,\n        required: true,\n        rows: 4,\n        error: form.field(\"value\").error\n      }, form.field(\"value\").inputProps))]\n    })\n  }));\n}","map":{"version":3,"sources":["/home/runner/work/site/site/modules/editor/message/EmbedFieldEditor.tsx"],"names":["useObserver","applyPatch","getSnapshot","FieldAccessor","React","styled","Checkbox","InputField","Section","Stack","chevron","chevronDown","copy","remove","InlineCheckbox","EmbedFieldEditor","props","field","form","name","index","displayName","icon","label","handler","state","value","op","path","parent","accessor","flatAccessors","setRawFromValue","embed","fields","length","id","undefined","filter","item","isValid","error","inputProps"],"mappings":"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","sourcesContent":["import { useObserver } from \"mobx-react-lite\"\nimport { applyPatch, getSnapshot } from \"mobx-state-tree\"\nimport { FieldAccessor } from \"mstform\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Checkbox } from \"../../../common/input/checkable/Checkbox\"\nimport { InputField } from \"../../../common/input/text/InputField\"\nimport type { Action } from \"../../../common/layout/ActionButtons\"\nimport { Section } from \"../../../common/layout/Section\"\nimport { Stack } from \"../../../common/layout/Stack\"\nimport { chevron, chevronDown } from \"../../../icons/chevron\"\nimport { copy } from \"../../../icons/copy\"\nimport { remove } from \"../../../icons/remove\"\nimport type {\n  FieldItemFormState,\n  RepeatingFieldItemFormState,\n} from \"../../message/state/editorForm\"\nimport type { FieldLike } from \"../../message/state/models/FieldModel\"\n\nconst InlineCheckbox = styled(Checkbox)`\n  margin-left: 12px;\n`\n\nexport type EmbedFieldEditorProps = {\n  field: FieldLike\n  form: FieldItemFormState\n}\n\nexport function EmbedFieldEditor(props: EmbedFieldEditorProps) {\n  const { field, form } = props\n\n  const name = useObserver(() => {\n    let name = `Field ${form.index + 1}`\n    if (field.displayName) {\n      name += ` â€” ${field.displayName}`\n    }\n    return name\n  })\n\n  return useObserver(() => (\n    <Section\n      name={name}\n      actions={[\n        form.index !== 0 && {\n          icon: chevron,\n          label: \"Move up\",\n          handler: () => {\n            applyPatch(form.state.value, [\n              {\n                op: \"remove\",\n                path: form.path,\n              },\n              {\n                op: \"add\",\n                path: `${form.parent?.path}/${form.index - 1}`,\n                value: getSnapshot(field),\n              },\n            ])\n            const parent = form.parent as RepeatingFieldItemFormState\n            for (const accessor of parent.index(form.index - 1).flatAccessors) {\n              if (accessor instanceof FieldAccessor) {\n                accessor.setRawFromValue()\n              }\n            }\n          },\n        },\n        form.index !== field.embed.fields.length - 1 && {\n          icon: chevronDown,\n          label: \"Move down\",\n          handler: () => {\n            applyPatch(form.state.value, [\n              {\n                op: \"remove\",\n                path: form.path,\n              },\n              {\n                op: \"add\",\n                path: `${form.parent?.path}/${form.index + 1}`,\n                value: getSnapshot(field),\n              },\n            ])\n            const parent = form.parent as RepeatingFieldItemFormState\n            for (const accessor of parent.index(form.index + 1).flatAccessors) {\n              if (accessor instanceof FieldAccessor) {\n                accessor.setRawFromValue()\n              }\n            }\n          },\n        },\n        field.embed.fields.length < 25 && {\n          icon: copy,\n          label: \"Duplicate\",\n          handler: () => {\n            applyPatch(form.state.value, [\n              {\n                op: \"add\",\n                path: `${form.parent?.path}/${form.index + 1}`,\n                value: { ...getSnapshot(field), id: undefined },\n              },\n            ])\n            const parent = form.parent as RepeatingFieldItemFormState\n            for (const accessor of parent.index(form.index + 1).flatAccessors) {\n              if (accessor instanceof FieldAccessor) {\n                accessor.setRawFromValue()\n              }\n            }\n          },\n        },\n        {\n          icon: remove,\n          label: \"Remove\",\n          handler: () => {\n            applyPatch(form.state.value, [\n              {\n                op: \"remove\",\n                path: form.path,\n              },\n            ])\n          },\n        },\n      ].filter((item): item is Action => typeof item === \"object\")}\n      hasError={!form.isValid}\n    >\n      <Stack gap={12}>\n        <InputField\n          id={`_${field.id}_name`}\n          label=\"Field Name\"\n          maxLength={256}\n          required\n          rows={1}\n          error={form.field(\"name\").error}\n          {...form.field(\"name\").inputProps}\n        >\n          <InlineCheckbox\n            id={`_${field.id}_inline`}\n            label=\"Inline\"\n            {...form.field(\"inline\").inputProps}\n          />\n        </InputField>\n        <InputField\n          id={`_${field.id}_value`}\n          label=\"Field Value\"\n          maxLength={1024}\n          required\n          rows={4}\n          error={form.field(\"value\").error}\n          {...form.field(\"value\").inputProps}\n        />\n      </Stack>\n    </Section>\n  ))\n}\n"]},"metadata":{},"sourceType":"module"}