{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useObserver } from \"mobx-react-lite\";\nimport { applyPatch, getSnapshot } from \"mobx-state-tree\";\nimport { FieldAccessor } from \"mstform\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Checkbox } from \"../../../common/input/checkable/Checkbox\";\nimport { InputField } from \"../../../common/input/text/InputField\";\nimport { Section } from \"../../../common/layout/Section\";\nimport { Stack } from \"../../../common/layout/Stack\";\nimport { chevron, chevronDown } from \"../../../icons/chevron\";\nimport { copy } from \"../../../icons/copy\";\nimport { remove } from \"../../../icons/remove\";\nconst InlineCheckbox = styled(Checkbox).withConfig({\n  componentId: \"sc-1vw8qxe-0\"\n})([\"margin-left:12px;\"]);\nexport function EmbedFieldEditor(props) {\n  const {\n    field,\n    form\n  } = props;\n  const name = useObserver(() => {\n    let name = `Field ${form.index + 1}`;\n\n    if (field.displayName) {\n      name += ` â€” ${field.displayName}`;\n    }\n\n    return name;\n  });\n  return useObserver(() => /*#__PURE__*/_jsx(Section, {\n    name: name,\n    actions: [form.index !== 0 && {\n      icon: chevron,\n      label: \"Move up\",\n      handler: () => {\n        var _form$parent;\n\n        applyPatch(form.state.value, [{\n          op: \"remove\",\n          path: form.path\n        }, {\n          op: \"add\",\n          path: `${(_form$parent = form.parent) === null || _form$parent === void 0 ? void 0 : _form$parent.path}/${form.index - 1}`,\n          value: getSnapshot(field)\n        }]);\n        const parent = form.parent;\n\n        for (const accessor of parent.index(form.index - 1).flatAccessors) {\n          if (accessor instanceof FieldAccessor) {\n            accessor.setRawFromValue();\n          }\n        }\n      }\n    }, form.index !== field.embed.fields.length - 1 && {\n      icon: chevronDown,\n      label: \"Move down\",\n      handler: () => {\n        var _form$parent2;\n\n        applyPatch(form.state.value, [{\n          op: \"remove\",\n          path: form.path\n        }, {\n          op: \"add\",\n          path: `${(_form$parent2 = form.parent) === null || _form$parent2 === void 0 ? void 0 : _form$parent2.path}/${form.index + 1}`,\n          value: getSnapshot(field)\n        }]);\n        const parent = form.parent;\n\n        for (const accessor of parent.index(form.index + 1).flatAccessors) {\n          if (accessor instanceof FieldAccessor) {\n            accessor.setRawFromValue();\n          }\n        }\n      }\n    }, field.embed.fields.length < 25 && {\n      icon: copy,\n      label: \"Duplicate\",\n      handler: () => {\n        var _form$parent3;\n\n        applyPatch(form.state.value, [{\n          op: \"add\",\n          path: `${(_form$parent3 = form.parent) === null || _form$parent3 === void 0 ? void 0 : _form$parent3.path}/${form.index + 1}`,\n          value: _objectSpread(_objectSpread({}, getSnapshot(field)), {}, {\n            id: undefined\n          })\n        }]);\n        const parent = form.parent;\n\n        for (const accessor of parent.index(form.index + 1).flatAccessors) {\n          if (accessor instanceof FieldAccessor) {\n            accessor.setRawFromValue();\n          }\n        }\n      }\n    }, {\n      icon: remove,\n      label: \"Remove\",\n      handler: () => {\n        applyPatch(form.state.value, [{\n          op: \"remove\",\n          path: form.path\n        }]);\n      }\n    }].filter(item => typeof item === \"object\"),\n    hasError: !form.isValid,\n    children: /*#__PURE__*/_jsxs(Stack, {\n      gap: 12,\n      children: [/*#__PURE__*/_jsx(InputField, _objectSpread(_objectSpread({\n        id: `_${field.id}_name`,\n        label: \"Field Name\",\n        maxLength: 256,\n        required: true,\n        rows: 1,\n        error: form.field(\"name\").error\n      }, form.field(\"name\").inputProps), {}, {\n        children: /*#__PURE__*/_jsx(InlineCheckbox, _objectSpread({\n          id: `_${field.id}_inline`,\n          label: \"Inline\"\n        }, form.field(\"inline\").inputProps))\n      })), /*#__PURE__*/_jsx(InputField, _objectSpread({\n        id: `_${field.id}_value`,\n        label: \"Field Value\",\n        maxLength: 1024,\n        required: true,\n        rows: 4,\n        error: form.field(\"value\").error\n      }, form.field(\"value\").inputProps))]\n    })\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}