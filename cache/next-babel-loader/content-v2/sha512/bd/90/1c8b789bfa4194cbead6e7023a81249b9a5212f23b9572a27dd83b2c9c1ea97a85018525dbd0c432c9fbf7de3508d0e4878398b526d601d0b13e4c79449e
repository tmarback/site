{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createPopper } from \"@popperjs/core\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { rgb, size } from \"polished\";\nimport React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useAutorun } from \"../state/useAutorun\";\nimport { useIsomorphicLayoutEffect } from \"../state/useIsomorphicLayoutEffect\";\nconst TooltipContainer = styled(animated.div).withConfig({\n  componentId: \"sc-1q1pha4-0\"\n})([\"padding:8px 11px;background:\", \";border-radius:4px;font-size:15px;font-weight:500;color:\", \";box-shadow:\", \";transform-origin:bottom;\"], rgb(0, 0, 0), rgb(255, 255, 255), ({\n  theme\n}) => theme.elavation.high);\nconst Arrow = styled.div.withConfig({\n  componentId: \"sc-1q1pha4-1\"\n})([\"&,&::before{\", \" position:absolute;z-index:-1;}&::before{content:\\\"\\\";transform:rotate(45deg);background:\", \";}\"], size(10), rgb(0, 0, 0));\nexport function TooltipItem(props) {\n  const {\n    tooltip\n  } = props;\n  const popperRef = useRef(null);\n  const arrowRef = useRef(null);\n  useIsomorphicLayoutEffect(() => {\n    const {\n      current: popper\n    } = popperRef;\n    const {\n      current: arrow\n    } = arrowRef;\n    if (!popper || !arrow) return;\n    const instance = createPopper(tooltip.anchor, popper, {\n      placement: \"top\",\n      modifiers: [{\n        name: \"offset\",\n        options: {\n          offset: [0, 4]\n        }\n      }, {\n        name: \"arrow\",\n        options: {\n          element: arrow\n        }\n      }]\n    });\n    return () => {\n      instance.destroy();\n    };\n  });\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const transition = useTransition(visible, {\n    key: Number(visible),\n    config: {\n      friction: 20,\n      tension: 400,\n      clamp: true\n    },\n    from: {\n      opacity: 0,\n      scale: 0.9\n    },\n    enter: {\n      opacity: 1,\n      scale: 1\n    },\n    leave: {\n      opacity: 0,\n      scale: 0.9\n    }\n  });\n\n  const mouseEnter = () => setVisible(true);\n\n  const mouseLeave = () => setVisible(false);\n\n  useAutorun(() => {\n    tooltip.anchor.addEventListener(\"mouseenter\", mouseEnter);\n    tooltip.anchor.addEventListener(\"mouseleave\", mouseLeave);\n    return () => {\n      tooltip.anchor.removeEventListener(\"mouseenter\", mouseEnter);\n      tooltip.anchor.removeEventListener(\"mouseleave\", mouseLeave);\n    };\n  });\n  return transition((style, item) => item && /*#__PURE__*/_jsx(\"div\", {\n    ref: popperRef,\n    style: {\n      pointerEvents: \"none\",\n      position: \"absolute\"\n    },\n    children: /*#__PURE__*/_jsxs(TooltipContainer, {\n      style: style,\n      children: [tooltip.content, /*#__PURE__*/_jsx(Arrow, {\n        ref: arrowRef\n      })]\n    })\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}