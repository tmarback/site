{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaultRules } from \"simple-markdown\";\nimport { convertEmojiToNames } from \"../emoji/convertEmojiToNames\";\nexport const text = _objectSpread(_objectSpread({}, defaultRules.text), {}, {\n  parse: (capture, parse, state) => {\n    const [content] = capture;\n    const {\n      nested\n    } = state;\n\n    if (nested) {\n      return {\n        content\n      };\n    }\n\n    return parse(convertEmojiToNames(content), _objectSpread(_objectSpread({}, state), {}, {\n      nested: true\n    }));\n  }\n});","map":null,"metadata":{},"sourceType":"module"}