{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { copyTextToClipboard } from \"../../../common/dom/copyTextToClipboard\";\nimport { PrimaryButton } from \"../../../common/input/button/PrimaryButton\";\nimport { SecondaryButton } from \"../../../common/input/button/SecondaryButton\";\nimport { ModalAction } from \"../../../common/modal/layout/ModalAction\";\nimport { ModalBody } from \"../../../common/modal/layout/ModalBody\";\nimport { ModalContainer } from \"../../../common/modal/layout/ModalContainer\";\nimport { ModalFooter } from \"../../../common/modal/layout/ModalFooter\";\nimport { ModalHeader } from \"../../../common/modal/layout/ModalHeader\";\nimport { ModalTitle } from \"../../../common/modal/layout/ModalTitle\";\nimport { ModalContext } from \"../../../common/modal/ModalContext\";\nimport { useRequiredContext } from \"../../../common/state/useRequiredContext\";\nimport { shorten } from \"../../../common/utilities/shorten\";\nimport { remove } from \"../../../icons/remove\";\nimport { Markdown } from \"../../markdown/Markdown\";\nimport { getEditorUrl } from \"../getEditorUrl\";\nexport function ShareModal(props) {\n  const {\n    editorManager\n  } = props;\n  const modal = useRequiredContext(ModalContext);\n  const {\n    0: response,\n    1: setResponse\n  } = useState();\n  useEffect(() => {\n    const url = getEditorUrl(editorManager);\n    shorten(url).then(response => setResponse(response)).catch(() => setResponse(null));\n  }, [editorManager]);\n  let content = \"Getting short URL...\";\n\n  if (response) {\n    const formattedExpires = response.expires.toLocaleString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      hour12: true\n    });\n    content = `URL: <${response.url}>\\nThis link expires at ${formattedExpires}.`;\n  } else if (response === null) {\n    content = \"Failed getting short URL. Please try again later.\";\n  }\n\n  return /*#__PURE__*/_jsxs(ModalContainer, {\n    children: [/*#__PURE__*/_jsxs(ModalHeader, {\n      children: [/*#__PURE__*/_jsx(ModalTitle, {\n        children: \"Share\"\n      }), /*#__PURE__*/_jsx(ModalAction, {\n        icon: remove,\n        label: \"Close\",\n        onClick: () => modal.dismiss()\n      })]\n    }), /*#__PURE__*/_jsx(ModalBody, {\n      children: /*#__PURE__*/_jsx(Markdown, {\n        content: content\n      })\n    }), /*#__PURE__*/_jsxs(ModalFooter, {\n      children: [/*#__PURE__*/_jsx(SecondaryButton, {\n        disabled: !response,\n        onClick: () => {\n          var _response$url;\n\n          copyTextToClipboard((_response$url = response === null || response === void 0 ? void 0 : response.url) !== null && _response$url !== void 0 ? _response$url : \"\");\n        },\n        children: \"Copy Link\"\n      }), /*#__PURE__*/_jsx(PrimaryButton, {\n        onClick: () => {\n          modal.dismiss();\n        },\n        children: \"Close\"\n      })]\n    })]\n  });\n}","map":{"version":3,"sources":["/home/runner/work/site/site/modules/editor/share/ShareModal.tsx"],"names":["React","useEffect","useState","copyTextToClipboard","PrimaryButton","SecondaryButton","ModalAction","ModalBody","ModalContainer","ModalFooter","ModalHeader","ModalTitle","ModalContext","useRequiredContext","shorten","remove","Markdown","getEditorUrl","ShareModal","props","editorManager","modal","response","setResponse","url","then","catch","content","formattedExpires","expires","toLocaleString","year","month","day","hour","minute","hour12","dismiss"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,mBAAT,QAAoC,yCAApC;AACA,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,eAAT,QAAgC,8CAAhC;AACA,SAASC,WAAT,QAA4B,0CAA5B;AACA,SAASC,SAAT,QAA0B,wCAA1B;AACA,SAASC,cAAT,QAA+B,6CAA/B;AACA,SAASC,WAAT,QAA4B,0CAA5B;AACA,SAASC,WAAT,QAA4B,0CAA5B;AACA,SAASC,UAAT,QAA2B,yCAA3B;AACA,SAASC,YAAT,QAA6B,oCAA7B;AACA,SAASC,kBAAT,QAAmC,0CAAnC;AACA,SAASC,OAAT,QAAyC,mCAAzC;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AAMA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA4C;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAoBD,KAA1B;AAEA,QAAME,KAAK,GAAGR,kBAAkB,CAACD,YAAD,CAAhC;AAEA,QAAM;AAAA,OAACU,QAAD;AAAA,OAAWC;AAAX,MAA0BrB,QAAQ,EAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,GAAG,GAAGP,YAAY,CAACG,aAAD,CAAxB;AAEAN,IAAAA,OAAO,CAACU,GAAD,CAAP,CACGC,IADH,CACQH,QAAQ,IAAIC,WAAW,CAACD,QAAD,CAD/B,EAEGI,KAFH,CAES,MAAMH,WAAW,CAAC,IAAD,CAF1B;AAGD,GANQ,EAMN,CAACH,aAAD,CANM,CAAT;AAQA,MAAIO,OAAO,GAAG,sBAAd;;AACA,MAAIL,QAAJ,EAAc;AACZ,UAAMM,gBAAgB,GAAGN,QAAQ,CAACO,OAAT,CAAiBC,cAAjB,CAAgC,OAAhC,EAAyC;AAChEC,MAAAA,IAAI,EAAE,SAD0D;AAEhEC,MAAAA,KAAK,EAAE,OAFyD;AAGhEC,MAAAA,GAAG,EAAE,SAH2D;AAIhEC,MAAAA,IAAI,EAAE,SAJ0D;AAKhEC,MAAAA,MAAM,EAAE,SALwD;AAMhEC,MAAAA,MAAM,EAAE;AANwD,KAAzC,CAAzB;AASAT,IAAAA,OAAO,GAAI,SAAQL,QAAQ,CAACE,GAAI,2BAA0BI,gBAAiB,GAA3E;AACD,GAXD,MAWO,IAAIN,QAAQ,KAAK,IAAjB,EAAuB;AAC5BK,IAAAA,OAAO,GAAG,mDAAV;AACD;;AAED,sBACE,MAAC,cAAD;AAAA,4BACE,MAAC,WAAD;AAAA,8BACE,KAAC,UAAD;AAAA;AAAA,QADF,eAEE,KAAC,WAAD;AACE,QAAA,IAAI,EAAEZ,MADR;AAEE,QAAA,KAAK,EAAC,OAFR;AAGE,QAAA,OAAO,EAAE,MAAMM,KAAK,CAACgB,OAAN;AAHjB,QAFF;AAAA,MADF,eASE,KAAC,SAAD;AAAA,6BACE,KAAC,QAAD;AAAU,QAAA,OAAO,EAAEV;AAAnB;AADF,MATF,eAYE,MAAC,WAAD;AAAA,8BACE,KAAC,eAAD;AACE,QAAA,QAAQ,EAAE,CAACL,QADb;AAEE,QAAA,OAAO,EAAE,MAAM;AAAA;;AACbnB,UAAAA,mBAAmB,kBAACmB,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEE,GAAX,yDAAkB,EAAlB,CAAnB;AACD,SAJH;AAAA;AAAA,QADF,eASE,KAAC,aAAD;AACE,QAAA,OAAO,EAAE,MAAM;AACbH,UAAAA,KAAK,CAACgB,OAAN;AACD,SAHH;AAAA;AAAA,QATF;AAAA,MAZF;AAAA,IADF;AAgCD","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { copyTextToClipboard } from \"../../../common/dom/copyTextToClipboard\"\nimport { PrimaryButton } from \"../../../common/input/button/PrimaryButton\"\nimport { SecondaryButton } from \"../../../common/input/button/SecondaryButton\"\nimport { ModalAction } from \"../../../common/modal/layout/ModalAction\"\nimport { ModalBody } from \"../../../common/modal/layout/ModalBody\"\nimport { ModalContainer } from \"../../../common/modal/layout/ModalContainer\"\nimport { ModalFooter } from \"../../../common/modal/layout/ModalFooter\"\nimport { ModalHeader } from \"../../../common/modal/layout/ModalHeader\"\nimport { ModalTitle } from \"../../../common/modal/layout/ModalTitle\"\nimport { ModalContext } from \"../../../common/modal/ModalContext\"\nimport { useRequiredContext } from \"../../../common/state/useRequiredContext\"\nimport { shorten, ShortenResponse } from \"../../../common/utilities/shorten\"\nimport { remove } from \"../../../icons/remove\"\nimport { Markdown } from \"../../markdown/Markdown\"\nimport type { EditorManagerLike } from \"../EditorManager\"\nimport { getEditorUrl } from \"../getEditorUrl\"\n\nexport type ShareModalProps = {\n  editorManager: EditorManagerLike\n}\n\nexport function ShareModal(props: ShareModalProps) {\n  const { editorManager } = props\n\n  const modal = useRequiredContext(ModalContext)\n\n  const [response, setResponse] = useState<ShortenResponse | null>()\n\n  useEffect(() => {\n    const url = getEditorUrl(editorManager)\n\n    shorten(url)\n      .then(response => setResponse(response))\n      .catch(() => setResponse(null))\n  }, [editorManager])\n\n  let content = \"Getting short URL...\"\n  if (response) {\n    const formattedExpires = response.expires.toLocaleString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      hour12: true,\n    })\n\n    content = `URL: <${response.url}>\\nThis link expires at ${formattedExpires}.`\n  } else if (response === null) {\n    content = \"Failed getting short URL. Please try again later.\"\n  }\n\n  return (\n    <ModalContainer>\n      <ModalHeader>\n        <ModalTitle>Share</ModalTitle>\n        <ModalAction\n          icon={remove}\n          label=\"Close\"\n          onClick={() => modal.dismiss()}\n        />\n      </ModalHeader>\n      <ModalBody>\n        <Markdown content={content} />\n      </ModalBody>\n      <ModalFooter>\n        <SecondaryButton\n          disabled={!response}\n          onClick={() => {\n            copyTextToClipboard(response?.url ?? \"\")\n          }}\n        >\n          Copy Link\n        </SecondaryButton>\n        <PrimaryButton\n          onClick={() => {\n            modal.dismiss()\n          }}\n        >\n          Close\n        </PrimaryButton>\n      </ModalFooter>\n    </ModalContainer>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}