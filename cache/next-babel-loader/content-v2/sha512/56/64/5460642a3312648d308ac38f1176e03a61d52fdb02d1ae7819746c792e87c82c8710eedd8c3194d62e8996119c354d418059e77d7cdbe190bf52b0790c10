{"ast":null,"code":"/* eslint-disable import/no-cycle */\nimport { types } from \"mobx-state-tree\";\nimport { nullableDate } from \"../../../../common/state/nullableDate\";\nimport { getUniqueId } from \"../../../../common/state/uid\";\nimport { stringifyMessage } from \"../../helpers/stringifyMessage\";\nimport { EmbedModel } from \"./EmbedModel\";\nexport const MessageModel = types.model(\"MessageModel\", {\n  id: types.optional(types.identifierNumber, getUniqueId),\n  content: \"\",\n  username: \"\",\n  avatar: \"\",\n  embeds: types.array(types.late(() => EmbedModel)),\n  reference: \"\",\n  timestamp: types.optional(nullableDate, null),\n  badge: types.optional(types.maybeNull(types.string), \"Bot\")\n}).volatile(() => ({\n  files: []\n})).views(self => ({\n  get hasContent() {\n    return self.content.trim().length > 0;\n  },\n\n  get hasExtras() {\n    return self.embeds.length > 0 || self.files.length > 0;\n  },\n\n  get embedLength() {\n    return self.embeds.reduce((size, embed) => size + embed.length, 0);\n  },\n\n  get size() {\n    return self.embeds.reduce((size, embed) => size + embed.size, 0);\n  },\n\n  get data() {\n    const embeds = self.embeds.flatMap(embed => embed.data);\n    return {\n      content: self.content || null,\n      embeds: embeds.length > 0 ? embeds : null,\n      username: self.username || undefined,\n      avatar_url: self.avatar || undefined,\n      files: self.files.length > 0 ? Array.from(self.files) : undefined\n    };\n  },\n\n  get body() {\n    const json = stringifyMessage(this.data, false);\n\n    if (self.files.length > 0) {\n      const formData = new FormData();\n      if (json !== \"{}\") formData.append(\"payload_json\", json);\n\n      for (const [index, file] of self.files.entries()) {\n        formData.append(`file[${index}]`, file, file.name);\n      }\n\n      return formData;\n    }\n\n    return json;\n  }\n\n})).actions(self => ({\n  set(key, value) {\n    self[key] = value;\n  }\n\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions","map":{"version":3,"sources":["/home/runner/work/site/site/modules/message/state/models/MessageModel.ts"],"names":["types","nullableDate","getUniqueId","stringifyMessage","EmbedModel","MessageModel","model","id","optional","identifierNumber","content","username","avatar","embeds","array","late","reference","timestamp","badge","maybeNull","string","volatile","files","views","self","hasContent","trim","length","hasExtras","embedLength","reduce","size","embed","data","flatMap","undefined","avatar_url","Array","from","body","json","formData","FormData","append","index","file","entries","name","actions","set","key","value"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n\nimport { Instance, SnapshotOrInstance, types } from \"mobx-state-tree\"\nimport { nullableDate } from \"../../../../common/state/nullableDate\"\nimport { getUniqueId } from \"../../../../common/state/uid\"\nimport { stringifyMessage } from \"../../helpers/stringifyMessage\"\nimport type { MessageData } from \"../data/MessageData\"\nimport { EmbedModel } from \"./EmbedModel\"\n\nexport const MessageModel = types\n  .model(\"MessageModel\", {\n    id: types.optional(types.identifierNumber, getUniqueId),\n    content: \"\",\n    username: \"\",\n    avatar: \"\",\n    embeds: types.array(types.late(() => EmbedModel)),\n    reference: \"\",\n    timestamp: types.optional(nullableDate, null),\n    badge: types.optional(types.maybeNull(types.string), \"Bot\"),\n  })\n  .volatile(() => ({\n    files: [] as readonly File[],\n  }))\n  .views(self => ({\n    get hasContent() {\n      return self.content.trim().length > 0\n    },\n    get hasExtras() {\n      return self.embeds.length > 0 || self.files.length > 0\n    },\n\n    get embedLength() {\n      return self.embeds.reduce((size, embed) => size + embed.length, 0)\n    },\n\n    get size() {\n      return self.embeds.reduce((size, embed) => size + embed.size, 0)\n    },\n\n    get data(): MessageData {\n      const embeds = self.embeds.flatMap(embed => embed.data)\n\n      return {\n        content: self.content || null,\n        embeds: embeds.length > 0 ? embeds : null,\n        username: self.username || undefined,\n        avatar_url: self.avatar || undefined,\n        files: self.files.length > 0 ? Array.from(self.files) : undefined,\n      }\n    },\n\n    get body() {\n      const json = stringifyMessage(this.data, false)\n\n      if (self.files.length > 0) {\n        const formData = new FormData()\n\n        if (json !== \"{}\") formData.append(\"payload_json\", json)\n\n        for (const [index, file] of self.files.entries()) {\n          formData.append(`file[${index}]`, file, file.name)\n        }\n\n        return formData\n      }\n\n      return json\n    },\n  }))\n  .actions(self => ({\n    set<K extends keyof typeof self>(\n      key: K,\n      value: SnapshotOrInstance<typeof self[K]>,\n    ): void {\n      self[key] = value\n    },\n  }))\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions\nexport interface MessageLike extends Instance<typeof MessageModel> {}\n"]},"metadata":{},"sourceType":"module"}