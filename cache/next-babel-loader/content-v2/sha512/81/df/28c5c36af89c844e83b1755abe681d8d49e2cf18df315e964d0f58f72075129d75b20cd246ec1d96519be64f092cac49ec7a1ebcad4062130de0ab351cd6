{"ast":null,"code":"import _defineProperty from \"/home/runner/work/site/site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const jumbosizeEmojis = ast => {\n  // Gets all nodes of type 'emoji' or 'customEmoji'\n  const emojiNodes = ast.filter(node => node.type === \"emoji\"); // If there's more than 27 (limit of jumbosized emojis), return the tree as is\n\n  if (emojiNodes.length > 27) return ast; // Check if the tree has any amount of nodes that aren't emojis,\n  // or nodes containing whitespace only\n\n  const hasText = ast.some(node => {\n    if (node.type === \"emoji\") return false;\n    if (node.type === \"br\") return false;\n    if (typeof node.content !== \"string\") return true;\n    if (node.content.trim() !== \"\") return true;\n    return false;\n  });\n  if (hasText) return ast; // If the message passed all checks, return a copy of the tree where all nodes\n  // have the 'jumboable' property set to true\n\n  return ast.map(node => {\n    if (node.type === \"emoji\") {\n      return _objectSpread(_objectSpread({}, node), {}, {\n        jumboable: true\n      });\n    }\n\n    return node;\n  });\n};","map":{"version":3,"sources":["/home/runner/work/site/site/modules/markdown/emoji/jumbosizeEmojis.ts"],"names":["jumbosizeEmojis","ast","emojiNodes","filter","node","type","length","hasText","some","content","trim","map","jumboable"],"mappings":";;;;;;AAEA,OAAO,MAAMA,eAAe,GAAIC,GAAD,IAA2C;AACxE;AACA,QAAMC,UAAU,GAAGD,GAAG,CAACE,MAAJ,CAAWC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,OAAjC,CAAnB,CAFwE,CAGxE;;AACA,MAAIH,UAAU,CAACI,MAAX,GAAoB,EAAxB,EAA4B,OAAOL,GAAP,CAJ4C,CAMxE;AACA;;AACA,QAAMM,OAAO,GAAGN,GAAG,CAACO,IAAJ,CAASJ,IAAI,IAAI;AAC/B,QAAIA,IAAI,CAACC,IAAL,KAAc,OAAlB,EAA2B,OAAO,KAAP;AAC3B,QAAID,IAAI,CAACC,IAAL,KAAc,IAAlB,EAAwB,OAAO,KAAP;AACxB,QAAI,OAAOD,IAAI,CAACK,OAAZ,KAAwB,QAA5B,EAAsC,OAAO,IAAP;AACtC,QAAIL,IAAI,CAACK,OAAL,CAAaC,IAAb,OAAwB,EAA5B,EAAgC,OAAO,IAAP;AAChC,WAAO,KAAP;AACD,GANe,CAAhB;AAOA,MAAIH,OAAJ,EAAa,OAAON,GAAP,CAf2D,CAiBxE;AACA;;AACA,SAAOA,GAAG,CAACU,GAAJ,CAAQP,IAAI,IAAI;AACrB,QAAIA,IAAI,CAACC,IAAL,KAAc,OAAlB,EAA2B;AACzB,6CAAYD,IAAZ;AAAkBQ,QAAAA,SAAS,EAAE;AAA7B;AACD;;AACD,WAAOR,IAAP;AACD,GALM,CAAP;AAMD,CAzBM","sourcesContent":["import type { SingleASTNode } from \"simple-markdown\"\n\nexport const jumbosizeEmojis = (ast: SingleASTNode[]): SingleASTNode[] => {\n  // Gets all nodes of type 'emoji' or 'customEmoji'\n  const emojiNodes = ast.filter(node => node.type === \"emoji\")\n  // If there's more than 27 (limit of jumbosized emojis), return the tree as is\n  if (emojiNodes.length > 27) return ast\n\n  // Check if the tree has any amount of nodes that aren't emojis,\n  // or nodes containing whitespace only\n  const hasText = ast.some(node => {\n    if (node.type === \"emoji\") return false\n    if (node.type === \"br\") return false\n    if (typeof node.content !== \"string\") return true\n    if (node.content.trim() !== \"\") return true\n    return false\n  })\n  if (hasText) return ast\n\n  // If the message passed all checks, return a copy of the tree where all nodes\n  // have the 'jumboable' property set to true\n  return ast.map(node => {\n    if (node.type === \"emoji\") {\n      return { ...node, jumboable: true }\n    }\n    return node\n  })\n}\n"]},"metadata":{},"sourceType":"module"}